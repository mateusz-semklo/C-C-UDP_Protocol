
ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b74  0800ffe4  0800ffe4  0001ffe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b58  08012b58  000300e0  2**0
                  CONTENTS
  4 .ARM          00000008  08012b58  08012b58  00022b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b60  08012b60  000300e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b60  08012b60  00022b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b64  08012b64  00022b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08012b68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006e04  200000e0  08012c48  000300e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006ee4  08012c48  00036ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fd6b  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005bc9  00000000  00000000  0005fe7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001648  00000000  00000000  00065a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001540  00000000  00000000  00067090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000321e8  00000000  00000000  000685d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fef7  00000000  00000000  0009a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00100d9f  00000000  00000000  000ba6af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001bb44e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006044  00000000  00000000  001bb4cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ffcc 	.word	0x0800ffcc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000e4 	.word	0x200000e4
 800020c:	0800ffcc 	.word	0x0800ffcc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_GPIO_EXTI_Callback>:
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	80fb      	strh	r3, [r7, #6]


if(GPIO_Pin==GPIO_PIN_13)
 80005ca:	88fb      	ldrh	r3, [r7, #6]
 80005cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005d0:	d106      	bne.n	80005e0 <HAL_GPIO_EXTI_Callback+0x20>
	{



stat_send=serverUDPSendString(&send);
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x28>)
 80005d4:	f000 fa66 	bl	8000aa4 <serverUDPSendString>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <HAL_GPIO_EXTI_Callback+0x2c>)
 80005de:	701a      	strb	r2, [r3, #0]


	}
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000835 	.word	0x20000835

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fd3d 	bl	8001072 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f82a 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f916 	bl	800082c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000600:	f000 f8b6 	bl	8000770 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000604:	f000 f8e4 	bl	80007d0 <MX_USB_OTG_FS_PCD_Init>
  //MX_LWIP_Init();
  /* USER CODE BEGIN 2 */

stat_init=serverUDPInit();
 8000608:	f000 f9c2 	bl	8000990 <serverUDPInit>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <main+0x50>)
 8000612:	701a      	strb	r2, [r3, #0]
stat_start=serverUDPStart();
 8000614:	f000 f9ec 	bl	80009f0 <serverUDPStart>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <main+0x54>)
 800061e:	701a      	strb	r2, [r3, #0]
  while (1)
  {



	        rx_check = serverUDPWorks(buffer);
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <main+0x58>)
 8000622:	f000 faa3 	bl	8000b6c <serverUDPWorks>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <main+0x5c>)
 800062c:	701a      	strb	r2, [r3, #0]
	        if(rx_check == UDP_RECEIVE_BUF_READY)
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <main+0x5c>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b02      	cmp	r3, #2
 8000634:	d1f4      	bne.n	8000620 <main+0x30>
	        {
	           serverUDPSendString(buffer);
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <main+0x58>)
 8000638:	f000 fa34 	bl	8000aa4 <serverUDPSendString>
	        rx_check = serverUDPWorks(buffer);
 800063c:	e7f0      	b.n	8000620 <main+0x30>
 800063e:	bf00      	nop
 8000640:	20000836 	.word	0x20000836
 8000644:	20000834 	.word	0x20000834
 8000648:	200000fc 	.word	0x200000fc
 800064c:	20000064 	.word	0x20000064

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b0b4      	sub	sp, #208	; 0xd0
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f00e fd8c 	bl	800f17c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2284      	movs	r2, #132	; 0x84
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f00e fd7d 	bl	800f17c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000682:	f002 f9a3 	bl	80029cc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	4b37      	ldr	r3, [pc, #220]	; (8000764 <SystemClock_Config+0x114>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	4a36      	ldr	r2, [pc, #216]	; (8000764 <SystemClock_Config+0x114>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000690:	6413      	str	r3, [r2, #64]	; 0x40
 8000692:	4b34      	ldr	r3, [pc, #208]	; (8000764 <SystemClock_Config+0x114>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800069e:	4b32      	ldr	r3, [pc, #200]	; (8000768 <SystemClock_Config+0x118>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a6:	4a30      	ldr	r2, [pc, #192]	; (8000768 <SystemClock_Config+0x118>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6013      	str	r3, [r2, #0]
 80006ae:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <SystemClock_Config+0x118>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ba:	2301      	movs	r3, #1
 80006bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006dc:	2348      	movs	r3, #72	; 0x48
 80006de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006e8:	2303      	movs	r3, #3
 80006ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 f97a 	bl	80029ec <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006fe:	f000 f93f 	bl	8000980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2302      	movs	r3, #2
 800070a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000722:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000726:	2102      	movs	r1, #2
 8000728:	4618      	mov	r0, r3
 800072a:	f002 fc03 	bl	8002f34 <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000734:	f000 f924 	bl	8000980 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <SystemClock_Config+0x11c>)
 800073a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800073c:	2300      	movs	r3, #0
 800073e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000740:	2300      	movs	r3, #0
 8000742:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fdea 	bl	8003324 <HAL_RCCEx_PeriphCLKConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000756:	f000 f913 	bl	8000980 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	37d0      	adds	r7, #208	; 0xd0
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000
 800076c:	00200100 	.word	0x00200100

08000770 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 8000776:	4a15      	ldr	r2, [pc, #84]	; (80007cc <MX_USART3_UART_Init+0x5c>)
 8000778:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 80007b4:	f003 f9a4 	bl	8003b00 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f8df 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200003b0 	.word	0x200003b0
 80007cc:	40004800 	.word	0x40004800

080007d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007de:	2206      	movs	r2, #6
 80007e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e4:	2202      	movs	r2, #2
 80007e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f0:	2202      	movs	r2, #2
 80007f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000808:	2201      	movs	r2, #1
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000814:	f001 ff92 	bl	800273c <HAL_PCD_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f8af 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000430 	.word	0x20000430

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	4b4a      	ldr	r3, [pc, #296]	; (800096c <MX_GPIO_Init+0x140>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a49      	ldr	r2, [pc, #292]	; (800096c <MX_GPIO_Init+0x140>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b47      	ldr	r3, [pc, #284]	; (800096c <MX_GPIO_Init+0x140>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	4b44      	ldr	r3, [pc, #272]	; (800096c <MX_GPIO_Init+0x140>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a43      	ldr	r2, [pc, #268]	; (800096c <MX_GPIO_Init+0x140>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b41      	ldr	r3, [pc, #260]	; (800096c <MX_GPIO_Init+0x140>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b3e      	ldr	r3, [pc, #248]	; (800096c <MX_GPIO_Init+0x140>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a3d      	ldr	r2, [pc, #244]	; (800096c <MX_GPIO_Init+0x140>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b3b      	ldr	r3, [pc, #236]	; (800096c <MX_GPIO_Init+0x140>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b38      	ldr	r3, [pc, #224]	; (800096c <MX_GPIO_Init+0x140>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a37      	ldr	r2, [pc, #220]	; (800096c <MX_GPIO_Init+0x140>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b35      	ldr	r3, [pc, #212]	; (800096c <MX_GPIO_Init+0x140>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	4b32      	ldr	r3, [pc, #200]	; (800096c <MX_GPIO_Init+0x140>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a31      	ldr	r2, [pc, #196]	; (800096c <MX_GPIO_Init+0x140>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b2f      	ldr	r3, [pc, #188]	; (800096c <MX_GPIO_Init+0x140>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ba:	4b2c      	ldr	r3, [pc, #176]	; (800096c <MX_GPIO_Init+0x140>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a2b      	ldr	r2, [pc, #172]	; (800096c <MX_GPIO_Init+0x140>)
 80008c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b29      	ldr	r3, [pc, #164]	; (800096c <MX_GPIO_Init+0x140>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008d8:	4825      	ldr	r0, [pc, #148]	; (8000970 <MX_GPIO_Init+0x144>)
 80008da:	f001 fefd 	bl	80026d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2140      	movs	r1, #64	; 0x40
 80008e2:	4824      	ldr	r0, [pc, #144]	; (8000974 <MX_GPIO_Init+0x148>)
 80008e4:	f001 fef8 	bl	80026d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ee:	4b22      	ldr	r3, [pc, #136]	; (8000978 <MX_GPIO_Init+0x14c>)
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008f2:	2302      	movs	r3, #2
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	481f      	ldr	r0, [pc, #124]	; (800097c <MX_GPIO_Init+0x150>)
 80008fe:	f001 fd41 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000902:	f244 0381 	movw	r3, #16513	; 0x4081
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4815      	ldr	r0, [pc, #84]	; (8000970 <MX_GPIO_Init+0x144>)
 800091c:	f001 fd32 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000920:	2340      	movs	r3, #64	; 0x40
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	480f      	ldr	r0, [pc, #60]	; (8000974 <MX_GPIO_Init+0x148>)
 8000938:	f001 fd24 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4809      	ldr	r0, [pc, #36]	; (8000974 <MX_GPIO_Init+0x148>)
 8000950:	f001 fd18 	bl	8002384 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2101      	movs	r1, #1
 8000958:	2028      	movs	r0, #40	; 0x28
 800095a:	f000 fce4 	bl	8001326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800095e:	2028      	movs	r0, #40	; 0x28
 8000960:	f000 fcfd 	bl	800135e <HAL_NVIC_EnableIRQ>

}
 8000964:	bf00      	nop
 8000966:	3730      	adds	r7, #48	; 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40020400 	.word	0x40020400
 8000974:	40021800 	.word	0x40021800
 8000978:	10110000 	.word	0x10110000
 800097c:	40020800 	.word	0x40020800

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <serverUDPInit>:
 * @param: 	none
 * @ret:	returns 0 if operation OK, returns 1 if connection already initialized
 */
//--------------------------------------------------------------
uint8_t serverUDPInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* Set operation status for default */
  uint8_t status = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	71fb      	strb	r3, [r7, #7]

  /* check if server isn't initialized yet */
  if(UDP_CONN_INF.status == UDP_ST_NOINIT)
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <serverUDPInit+0x54>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d114      	bne.n	80009cc <serverUDPInit+0x3c>
  {
	/* Set link status */
    EthLinkStatus = 0;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <serverUDPInit+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]

    /* Enable Ethernet and LWIP Stack */
    MX_LWIP_Init();
 80009a8:	f003 ff9e 	bl	80048e8 <MX_LWIP_Init>

    /* Init NVIC */
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 fcaf 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	f04f 30ff 	mov.w	r0, #4294967295
 80009ba:	f000 fcb4 	bl	8001326 <HAL_NVIC_SetPriority>

    /* Set notification for user */
    udpUserNotification(&gnetif);
 80009be:	480b      	ldr	r0, [pc, #44]	; (80009ec <serverUDPInit+0x5c>)
 80009c0:	f000 f96e 	bl	8000ca0 <udpUserNotification>

    /* Set status for initialization */
    UDP_CONN_INF.status = UDP_ST_NOCONNECT;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <serverUDPInit+0x54>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	701a      	strb	r2, [r3, #0]
 80009ca:	e005      	b.n	80009d8 <serverUDPInit+0x48>
  }
  else if(UDP_CONN_INF.status == UDP_ST_NOCONNECT)
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <serverUDPInit+0x54>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d101      	bne.n	80009d8 <serverUDPInit+0x48>
  {
	  /* udp connection already initialized */
	  status = 1;
 80009d4:	2301      	movs	r3, #1
 80009d6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80009d8:	79fb      	ldrb	r3, [r7, #7]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000194 	.word	0x20000194
 80009e8:	20000065 	.word	0x20000065
 80009ec:	20000854 	.word	0x20000854

080009f0 <serverUDPStart>:
 * @param: 	none
 * @ret:	returns 0 if operation OK, returns 1 if Error
 */
//--------------------------------------------------------------
UDP_SERVER_CONNECT_t serverUDPStart(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  UDP_SERVER_CONNECT_t status = UDP_SER_CON_STA_ERROR_2;
 80009f6:	2305      	movs	r3, #5
 80009f8:	71fb      	strb	r3, [r7, #7]
  err_t err;

  if(UDP_CONN_INF.status == UDP_ST_NOINIT)
 80009fa:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <serverUDPStart+0x94>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d101      	bne.n	8000a06 <serverUDPStart+0x16>
  {
	  return UDP_SER_CON_STA_INIT_ERR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e039      	b.n	8000a7a <serverUDPStart+0x8a>
  }

  if(UDP_CONN_INF.status == UDP_ST_RUNNING)
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <serverUDPStart+0x94>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d101      	bne.n	8000a12 <serverUDPStart+0x22>
  {
	  return UDP_SER_CON_STA_RUNNING;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	e033      	b.n	8000a7a <serverUDPStart+0x8a>
  }
  if(EthLinkStatus > 0)
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <serverUDPStart+0x98>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <serverUDPStart+0x2e>
  {
	  return UDP_SER_CON_STA_NO_LINK;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	e02d      	b.n	8000a7a <serverUDPStart+0x8a>
  }

  /* Create new UDP pcb */
  upcb_server = udp_new();
 8000a1e:	f00c f86d 	bl	800cafc <udp_new>
 8000a22:	4602      	mov	r2, r0
 8000a24:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <serverUDPStart+0x9c>)
 8000a26:	601a      	str	r2, [r3, #0]

  /* return pointer */
  if (upcb_server == NULL)
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <serverUDPStart+0x9c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d101      	bne.n	8000a34 <serverUDPStart+0x44>
  {
	  return UDP_SER_CON_STA_ERROR_1;
 8000a30:	2304      	movs	r3, #4
 8000a32:	e022      	b.n	8000a7a <serverUDPStart+0x8a>
  }

#ifdef HOST_IP_0
  IP4_ADDR(&HostIPaddr, HOST_IP_0, HOST_IP_1, HOST_IP_2, HOST_IP_3 );
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <serverUDPStart+0xa0>)
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <serverUDPStart+0xa4>)
 8000a38:	601a      	str	r2, [r3, #0]
#endif

  IP4_ADDR(&OwnIPaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3 );
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <serverUDPStart+0xa8>)
 8000a3c:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <serverUDPStart+0xac>)
 8000a3e:	601a      	str	r2, [r3, #0]

  /* Bind PCB to local IP address and port*/
  err = udp_bind(upcb_server, &OwnIPaddr, SERVER_UDP_PORT);
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <serverUDPStart+0x9c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f640 5205 	movw	r2, #3333	; 0xd05
 8000a48:	4913      	ldr	r1, [pc, #76]	; (8000a98 <serverUDPStart+0xa8>)
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f00b ff6c 	bl	800c928 <udp_bind>
 8000a50:	4603      	mov	r3, r0
 8000a52:	71bb      	strb	r3, [r7, #6]

  if (err != ERR_OK)
 8000a54:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <serverUDPStart+0x70>
  {
	  return UDP_SER_CON_STA_ERROR_2;
 8000a5c:	2305      	movs	r3, #5
 8000a5e:	e00c      	b.n	8000a7a <serverUDPStart+0x8a>
  }

  /* Set callback for incoming UDP data */
  udp_recv(upcb_server, udpReceiveCallback, NULL);
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <serverUDPStart+0x9c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2200      	movs	r2, #0
 8000a66:	490e      	ldr	r1, [pc, #56]	; (8000aa0 <serverUDPStart+0xb0>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f00b ffe5 	bl	800ca38 <udp_recv>

  /* change status */
  status = UDP_SER_CON_STA_CONNECT_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	71fb      	strb	r3, [r7, #7]
  UDP_CONN_INF.status = UDP_ST_RUNNING;
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <serverUDPStart+0x94>)
 8000a74:	2202      	movs	r2, #2
 8000a76:	701a      	strb	r2, [r3, #0]

  return status;
 8000a78:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000194 	.word	0x20000194
 8000a88:	20000065 	.word	0x20000065
 8000a8c:	20000840 	.word	0x20000840
 8000a90:	20000848 	.word	0x20000848
 8000a94:	0200a8c0 	.word	0x0200a8c0
 8000a98:	2000083c 	.word	0x2000083c
 8000a9c:	0600a8c0 	.word	0x0600a8c0
 8000aa0:	08000c2d 	.word	0x08000c2d

08000aa4 <serverUDPSendString>:
 * @param:	ptr: pointer to string to send
 * @ret:	return status if error then 0, if OK then return 1
 */
//--------------------------------------------------------------
uint8_t serverUDPSendString(uint8_t *ptr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint8_t status = ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p;
  err_t err;

  /* if server is enable */
  if(UDP_CONN_INF.status == UDP_ST_RUNNING)
 8000ab0:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <serverUDPSendString+0xb8>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d14b      	bne.n	8000b50 <serverUDPSendString+0xac>
  {
	/* allocate buffer */
    p = pbuf_alloc(PBUF_TRANSPORT, strlen(*ptr), PBUF_POOL);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fba7 	bl	8000210 <strlen>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000aca:	4619      	mov	r1, r3
 8000acc:	2036      	movs	r0, #54	; 0x36
 8000ace:	f005 faff 	bl	80060d0 <pbuf_alloc>
 8000ad2:	6138      	str	r0, [r7, #16]

    /* if buffer is allocated */
    if (p == NULL)
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d103      	bne.n	8000ae2 <serverUDPSendString+0x3e>
    {
    	status = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	75fb      	strb	r3, [r7, #23]
    	return status;
 8000ade:	7dfb      	ldrb	r3, [r7, #23]
 8000ae0:	e037      	b.n	8000b52 <serverUDPSendString+0xae>
    }

    /* copy data */
    pbuf_take(p, (char*)ptr, strlen((char*)ptr));
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff fb94 	bl	8000210 <strlen>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	461a      	mov	r2, r3
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	6938      	ldr	r0, [r7, #16]
 8000af2:	f006 f839 	bl	8006b68 <pbuf_take>
    ppp=p;
 8000af6:	4a1a      	ldr	r2, [pc, #104]	; (8000b60 <serverUDPSendString+0xbc>)
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	6013      	str	r3, [r2, #0]
    /* Send data to a specified address using UDP */
    err = udp_sendto(upcb_server, p, &HostIPaddr, CLIENT_USP_PORT);
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <serverUDPSendString+0xc0>)
 8000afe:	6818      	ldr	r0, [r3, #0]
 8000b00:	f640 5305 	movw	r3, #3333	; 0xd05
 8000b04:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <serverUDPSendString+0xc4>)
 8000b06:	6939      	ldr	r1, [r7, #16]
 8000b08:	f00b fd58 	bl	800c5bc <udp_sendto>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	73fb      	strb	r3, [r7, #15]

    /* clear sending buffer */

    for(uint8_t loop = 0; loop < UDP_RECEIVE_MSG_SIZE; loop++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	75bb      	strb	r3, [r7, #22]
 8000b14:	e007      	b.n	8000b26 <serverUDPSendString+0x82>
    {
    	UDP_CONN_INF.recBufer[loop] = 0;
 8000b16:	7dbb      	ldrb	r3, [r7, #22]
 8000b18:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <serverUDPSendString+0xb8>)
 8000b1a:	4413      	add	r3, r2
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	705a      	strb	r2, [r3, #1]
    for(uint8_t loop = 0; loop < UDP_RECEIVE_MSG_SIZE; loop++)
 8000b20:	7dbb      	ldrb	r3, [r7, #22]
 8000b22:	3301      	adds	r3, #1
 8000b24:	75bb      	strb	r3, [r7, #22]
 8000b26:	7dbb      	ldrb	r3, [r7, #22]
 8000b28:	2b95      	cmp	r3, #149	; 0x95
 8000b2a:	d9f4      	bls.n	8000b16 <serverUDPSendString+0x72>
    }

    /* free buffer */
    pbuf_free(p);
 8000b2c:	6938      	ldr	r0, [r7, #16]
 8000b2e:	f005 fdaf 	bl	8006690 <pbuf_free>

    if(err == ERR_OK)
 8000b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <serverUDPSendString+0x9c>
    {
      status = SUCCESS;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	75fb      	strb	r3, [r7, #23]
 8000b3e:	e007      	b.n	8000b50 <serverUDPSendString+0xac>
    }
    else
    {
      /* remove a UDP pcb */
      udp_remove(upcb_server);
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <serverUDPSendString+0xc0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f00b ff97 	bl	800ca78 <udp_remove>
      UDP_CONN_INF.status=UDP_ST_NOCONNECT;
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <serverUDPSendString+0xb8>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000194 	.word	0x20000194
 8000b60:	20000844 	.word	0x20000844
 8000b64:	20000840 	.word	0x20000840
 8000b68:	20000848 	.word	0x20000848

08000b6c <serverUDPWorks>:
 * @param:	ptr: pointer to string
 * @ret:	return UDP status
 */
//--------------------------------------------------------------
UDP_RECEIVE_t serverUDPWorks(uint8_t *ptr)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  UDP_RECEIVE_t status = UDP_REVEICE_BUF_EMPTY;
 8000b74:	2301      	movs	r3, #1
 8000b76:	75fb      	strb	r3, [r7, #23]
  uint32_t i;
  uint8_t value;

  if(UDP_CONN_INF.status != UDP_ST_NOINIT)
 8000b78:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <serverUDPWorks+0xb0>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d014      	beq.n	8000baa <serverUDPWorks+0x3e>
  {
	  /* Use when packet is ready to read from the interface */
	  ethernetif_input(&gnetif);
 8000b80:	4827      	ldr	r0, [pc, #156]	; (8000c20 <serverUDPWorks+0xb4>)
 8000b82:	f004 fa95 	bl	80050b0 <ethernetif_input>

	  /* Handle timeout */
	  sys_check_timeouts();
 8000b86:	f00b fb15 	bl	800c1b4 <sys_check_timeouts>

    /* check linki status */
    if(EthLinkStatus > 0)
 8000b8a:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <serverUDPWorks+0xb8>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d00b      	beq.n	8000baa <serverUDPWorks+0x3e>
    {
      if(UDP_CONN_INF.status == UDP_ST_RUNNING)
 8000b92:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <serverUDPWorks+0xb0>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d107      	bne.n	8000baa <serverUDPWorks+0x3e>
      {
    	  /* remove a UDP pcb */
    	  udp_remove(upcb_server);
 8000b9a:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <serverUDPWorks+0xbc>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f00b ff6a 	bl	800ca78 <udp_remove>
    	  UDP_CONN_INF.status = UDP_ST_NOCONNECT;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <serverUDPWorks+0xb0>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if(UDP_CONN_INF.status != UDP_ST_RUNNING)
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <serverUDPWorks+0xb0>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d001      	beq.n	8000bb6 <serverUDPWorks+0x4a>
  {
	  return UDP_SERVER_BUF_OFFLINE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e02d      	b.n	8000c12 <serverUDPWorks+0xa6>
  }

  if(UDP_CONN_INF.recLength > 0)
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <serverUDPWorks+0xb0>)
 8000bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d027      	beq.n	8000c10 <serverUDPWorks+0xa4>
  {
	  status = UDP_RECEIVE_BUF_READY;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	75fb      	strb	r3, [r7, #23]

	  /* copy buffer */
	  i=0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
	  value = UDP_CONN_INF.recBufer[i];
 8000bc8:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <serverUDPWorks+0xb0>)
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	4413      	add	r3, r2
 8000bce:	3301      	adds	r3, #1
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	73fb      	strb	r3, [r7, #15]

	  while((value != 0) && (i < UDP_RECEIVE_MSG_SIZE-1))
 8000bd4:	e00d      	b.n	8000bf2 <serverUDPWorks+0x86>
	  {
		  value=UDP_CONN_INF.recBufer[i];
 8000bd6:	4a11      	ldr	r2, [pc, #68]	; (8000c1c <serverUDPWorks+0xb0>)
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4413      	add	r3, r2
 8000bdc:	3301      	adds	r3, #1
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	73fb      	strb	r3, [r7, #15]
		  ptr[i]=value;
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	4413      	add	r3, r2
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	701a      	strb	r2, [r3, #0]
		  i++;
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	613b      	str	r3, [r7, #16]
	  while((value != 0) && (i < UDP_RECEIVE_MSG_SIZE-1))
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d002      	beq.n	8000bfe <serverUDPWorks+0x92>
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	2b94      	cmp	r3, #148	; 0x94
 8000bfc:	d9eb      	bls.n	8000bd6 <serverUDPWorks+0x6a>
	  }

	  /* clear last character */
	  ptr[i]=0x00;
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	4413      	add	r3, r2
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]

	  UDP_CONN_INF.recLength=0;
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <serverUDPWorks+0xb0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

  return status;
 8000c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000194 	.word	0x20000194
 8000c20:	20000854 	.word	0x20000854
 8000c24:	20000065 	.word	0x20000065
 8000c28:	20000840 	.word	0x20000840

08000c2c <udpReceiveCallback>:
 * @param:	port: port to listen too
 * @ret:	none
 */
//--------------------------------------------------------------
static void udpReceiveCallback(void *arg, struct udp_pcb *upcb, struct pbuf *p, struct ip4_addr *addr, u16_t port)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
 8000c38:	603b      	str	r3, [r7, #0]
  uint16_t i;
  uint8_t value;
  uint8_t *ptr;
b++;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <udpReceiveCallback+0x6c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	4a15      	ldr	r2, [pc, #84]	; (8000c98 <udpReceiveCallback+0x6c>)
 8000c42:	6013      	str	r3, [r2, #0]
  ptr=(uint8_t*)p->payload;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	61bb      	str	r3, [r7, #24]

  i=0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	83fb      	strh	r3, [r7, #30]

  do
  {
	value = *ptr;
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	75fb      	strb	r3, [r7, #23]
    UDP_CONN_INF.recBufer[i] = value;
 8000c54:	8bfb      	ldrh	r3, [r7, #30]
 8000c56:	4a11      	ldr	r2, [pc, #68]	; (8000c9c <udpReceiveCallback+0x70>)
 8000c58:	4413      	add	r3, r2
 8000c5a:	7dfa      	ldrb	r2, [r7, #23]
 8000c5c:	705a      	strb	r2, [r3, #1]
    ptr++;
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	3301      	adds	r3, #1
 8000c62:	61bb      	str	r3, [r7, #24]
    i++;
 8000c64:	8bfb      	ldrh	r3, [r7, #30]
 8000c66:	3301      	adds	r3, #1
 8000c68:	83fb      	strh	r3, [r7, #30]
  }while((value != 0) && (i < UDP_RECEIVE_MSG_SIZE-1));
 8000c6a:	7dfb      	ldrb	r3, [r7, #23]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <udpReceiveCallback+0x4a>
 8000c70:	8bfb      	ldrh	r3, [r7, #30]
 8000c72:	2b94      	cmp	r3, #148	; 0x94
 8000c74:	d9eb      	bls.n	8000c4e <udpReceiveCallback+0x22>

  UDP_CONN_INF.recBufer[i]=0x00;
 8000c76:	8bfb      	ldrh	r3, [r7, #30]
 8000c78:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <udpReceiveCallback+0x70>)
 8000c7a:	4413      	add	r3, r2
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	705a      	strb	r2, [r3, #1]
  UDP_CONN_INF.recLength = i;
 8000c80:	8bfb      	ldrh	r3, [r7, #30]
 8000c82:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <udpReceiveCallback+0x70>)
 8000c84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  pbuf_free(p);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f005 fd01 	bl	8006690 <pbuf_free>
}
 8000c8e:	bf00      	nop
 8000c90:	3720      	adds	r7, #32
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200003ac 	.word	0x200003ac
 8000c9c:	20000194 	.word	0x20000194

08000ca0 <udpUserNotification>:
 * @brief:	check link status
 * @param:	netif: default network interface
 * @ret:	none
 */
static void udpUserNotification(struct netif *netif)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  else
  {
	  /* Error */
	//  Usart_Uart_SendString(USART1, "Netif ERROR, cable not connected", LF_CR);
  }
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <HAL_MspInit+0x44>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <HAL_MspInit+0x44>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_MspInit+0x44>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_MspInit+0x44>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <HAL_MspInit+0x44>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_MspInit+0x44>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800

08000cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <HAL_UART_MspInit+0x7c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d128      	bne.n	8000d70 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <HAL_UART_MspInit+0x80>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a16      	ldr	r2, [pc, #88]	; (8000d7c <HAL_UART_MspInit+0x80>)
 8000d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <HAL_UART_MspInit+0x80>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_UART_MspInit+0x80>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_UART_MspInit+0x80>)
 8000d3c:	f043 0308 	orr.w	r3, r3, #8
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_UART_MspInit+0x80>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0308 	and.w	r3, r3, #8
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d60:	2307      	movs	r3, #7
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <HAL_UART_MspInit+0x84>)
 8000d6c:	f001 fb0a 	bl	8002384 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	; 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40004800 	.word	0x40004800
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020c00 	.word	0x40020c00

08000d84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000da4:	d141      	bne.n	8000e2a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <HAL_PCD_MspInit+0xb0>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a22      	ldr	r2, [pc, #136]	; (8000e34 <HAL_PCD_MspInit+0xb0>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <HAL_PCD_MspInit+0xb0>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dbe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dd0:	230a      	movs	r3, #10
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4817      	ldr	r0, [pc, #92]	; (8000e38 <HAL_PCD_MspInit+0xb4>)
 8000ddc:	f001 fad2 	bl	8002384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4810      	ldr	r0, [pc, #64]	; (8000e38 <HAL_PCD_MspInit+0xb4>)
 8000df6:	f001 fac5 	bl	8002384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_PCD_MspInit+0xb0>)
 8000dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfe:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <HAL_PCD_MspInit+0xb0>)
 8000e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e04:	6353      	str	r3, [r2, #52]	; 0x34
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_PCD_MspInit+0xb0>)
 8000e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_PCD_MspInit+0xb0>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <HAL_PCD_MspInit+0xb0>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_PCD_MspInit+0xb0>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020000 	.word	0x40020000

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler+0x4>

08000e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 f92c 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ea0:	f001 fc34 	bl	800270c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <ETH_IRQHandler+0x10>)
 8000eae:	f000 fe51 	bl	8001b54 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20002168 	.word	0x20002168

08000ebc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	e00a      	b.n	8000ee4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ece:	f3af 8000 	nop.w
 8000ed2:	4601      	mov	r1, r0
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	60ba      	str	r2, [r7, #8]
 8000eda:	b2ca      	uxtb	r2, r1
 8000edc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	dbf0      	blt.n	8000ece <_read+0x12>
	}

return len;
 8000eec:	687b      	ldr	r3, [r7, #4]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	e009      	b.n	8000f1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	60ba      	str	r2, [r7, #8]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbf1      	blt.n	8000f08 <_write+0x12>
	}
	return len;
 8000f24:	687b      	ldr	r3, [r7, #4]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_close>:

int _close(int file)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
	return -1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f56:	605a      	str	r2, [r3, #4]
	return 0;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_isatty>:

int _isatty(int file)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
	return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_sbrk+0x50>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <_sbrk+0x16>
		heap_end = &end;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <_sbrk+0x50>)
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <_sbrk+0x54>)
 8000fac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <_sbrk+0x50>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <_sbrk+0x50>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4413      	add	r3, r2
 8000fbc:	466a      	mov	r2, sp
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d905      	bls.n	8000fce <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <_sbrk+0x58>)
 8000fc4:	220c      	movs	r2, #12
 8000fc6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fcc:	e006      	b.n	8000fdc <_sbrk+0x44>
	}

	heap_end += incr;
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <_sbrk+0x50>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <_sbrk+0x50>)
 8000fd8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000fda:	68fb      	ldr	r3, [r7, #12]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	20000230 	.word	0x20000230
 8000fec:	20006ee8 	.word	0x20006ee8
 8000ff0:	20006ee0 	.word	0x20006ee0

08000ff4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <SystemInit+0x28>)
 8000ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffe:	4a07      	ldr	r2, [pc, #28]	; (800101c <SystemInit+0x28>)
 8001000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <SystemInit+0x28>)
 800100a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800100e:	609a      	str	r2, [r3, #8]
#endif
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001058 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001024:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001026:	e003      	b.n	8001030 <LoopCopyDataInit>

08001028 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800102a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800102c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800102e:	3104      	adds	r1, #4

08001030 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001030:	480b      	ldr	r0, [pc, #44]	; (8001060 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001034:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001036:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001038:	d3f6      	bcc.n	8001028 <CopyDataInit>
  ldr  r2, =_sbss
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800103c:	e002      	b.n	8001044 <LoopFillZerobss>

0800103e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800103e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001040:	f842 3b04 	str.w	r3, [r2], #4

08001044 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001046:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001048:	d3f9      	bcc.n	800103e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800104a:	f7ff ffd3 	bl	8000ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104e:	f00e f857 	bl	800f100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001052:	f7ff facd 	bl	80005f0 <main>
  bx  lr    
 8001056:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001058:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800105c:	08012b68 	.word	0x08012b68
  ldr  r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001064:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 8001068:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 800106c:	20006ee4 	.word	0x20006ee4

08001070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC_IRQHandler>

08001072 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001076:	2003      	movs	r0, #3
 8001078:	f000 f94a 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107c:	2000      	movs	r0, #0
 800107e:	f000 f805 	bl	800108c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001082:	f7ff fe17 	bl	8000cb4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_InitTick+0x54>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_InitTick+0x58>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f965 	bl	800137a <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00e      	b.n	80010d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d80a      	bhi.n	80010d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f000 f92d 	bl	8001326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_InitTick+0x5c>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000068 	.word	0x20000068
 80010e4:	20000070 	.word	0x20000070
 80010e8:	2000006c 	.word	0x2000006c

080010ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x20>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x24>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <HAL_IncTick+0x24>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000070 	.word	0x20000070
 8001110:	2000084c 	.word	0x2000084c

08001114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <HAL_GetTick+0x14>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	2000084c 	.word	0x2000084c

0800112c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff ffee 	bl	8001114 <HAL_GetTick>
 8001138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d005      	beq.n	8001152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_Delay+0x40>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001152:	bf00      	nop
 8001154:	f7ff ffde 	bl	8001114 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	429a      	cmp	r2, r3
 8001162:	d8f7      	bhi.n	8001154 <HAL_Delay+0x28>
  {
  }
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000070 	.word	0x20000070

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 800119a:	4313      	orrs	r3, r2
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <__NVIC_SetPriorityGrouping+0x40>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00
 80011b4:	05fa0000 	.word	0x05fa0000

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db0b      	blt.n	80011fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4907      	ldr	r1, [pc, #28]	; (800120c <__NVIC_EnableIRQ+0x38>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	; (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012dc:	d301      	bcc.n	80012e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012de:	2301      	movs	r3, #1
 80012e0:	e00f      	b.n	8001302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <SysTick_Config+0x40>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ea:	210f      	movs	r1, #15
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f7ff ff8e 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <SysTick_Config+0x40>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <SysTick_Config+0x40>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	e000e010 	.word	0xe000e010

08001310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff29 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001338:	f7ff ff3e 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 800133c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f7ff ff8e 	bl	8001264 <NVIC_EncodePriority>
 8001348:	4602      	mov	r2, r0
 800134a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff5d 	bl	8001210 <__NVIC_SetPriority>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff31 	bl	80011d4 <__NVIC_EnableIRQ>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa2 	bl	80012cc <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80013a4:	4ba9      	ldr	r3, [pc, #676]	; (800164c <HAL_ETH_Init+0x2b8>)
 80013a6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e183      	b.n	80016c2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d106      	bne.n	80013d4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f003 fbb6 	bl	8004b40 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d4:	4b9e      	ldr	r3, [pc, #632]	; (8001650 <HAL_ETH_Init+0x2bc>)
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	4a9d      	ldr	r2, [pc, #628]	; (8001650 <HAL_ETH_Init+0x2bc>)
 80013da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013de:	6453      	str	r3, [r2, #68]	; 0x44
 80013e0:	4b9b      	ldr	r3, [pc, #620]	; (8001650 <HAL_ETH_Init+0x2bc>)
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013ec:	4b99      	ldr	r3, [pc, #612]	; (8001654 <HAL_ETH_Init+0x2c0>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a98      	ldr	r2, [pc, #608]	; (8001654 <HAL_ETH_Init+0x2c0>)
 80013f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013f6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013f8:	4b96      	ldr	r3, [pc, #600]	; (8001654 <HAL_ETH_Init+0x2c0>)
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	4994      	ldr	r1, [pc, #592]	; (8001654 <HAL_ETH_Init+0x2c0>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0201 	orr.w	r2, r2, #1
 8001418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800141c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800141e:	f7ff fe79 	bl	8001114 <HAL_GetTick>
 8001422:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001424:	e011      	b.n	800144a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001426:	f7ff fe75 	bl	8001114 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001434:	d909      	bls.n	800144a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2203      	movs	r2, #3
 800143a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e13b      	b.n	80016c2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1e4      	bne.n	8001426 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f023 031c 	bic.w	r3, r3, #28
 800146a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800146c:	f001 ff26 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 8001470:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	4a78      	ldr	r2, [pc, #480]	; (8001658 <HAL_ETH_Init+0x2c4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d908      	bls.n	800148c <HAL_ETH_Init+0xf8>
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4a77      	ldr	r2, [pc, #476]	; (800165c <HAL_ETH_Init+0x2c8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d804      	bhi.n	800148c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	e027      	b.n	80014dc <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	4a73      	ldr	r2, [pc, #460]	; (800165c <HAL_ETH_Init+0x2c8>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d908      	bls.n	80014a6 <HAL_ETH_Init+0x112>
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	4a72      	ldr	r2, [pc, #456]	; (8001660 <HAL_ETH_Init+0x2cc>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d804      	bhi.n	80014a6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f043 030c 	orr.w	r3, r3, #12
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	e01a      	b.n	80014dc <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4a6d      	ldr	r2, [pc, #436]	; (8001660 <HAL_ETH_Init+0x2cc>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d903      	bls.n	80014b6 <HAL_ETH_Init+0x122>
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4a6c      	ldr	r2, [pc, #432]	; (8001664 <HAL_ETH_Init+0x2d0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d911      	bls.n	80014da <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4a6a      	ldr	r2, [pc, #424]	; (8001664 <HAL_ETH_Init+0x2d0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d908      	bls.n	80014d0 <HAL_ETH_Init+0x13c>
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4a69      	ldr	r2, [pc, #420]	; (8001668 <HAL_ETH_Init+0x2d4>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d804      	bhi.n	80014d0 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	e005      	b.n	80014dc <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f043 0310 	orr.w	r3, r3, #16
 80014d6:	61fb      	str	r3, [r7, #28]
 80014d8:	e000      	b.n	80014dc <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80014da:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014e8:	2100      	movs	r1, #0
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 fc1f 	bl	8001d2e <HAL_ETH_WritePHYRegister>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00b      	beq.n	800150e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80014fa:	6939      	ldr	r1, [r7, #16]
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 fcab 	bl	8001e58 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e0d9      	b.n	80016c2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800150e:	20ff      	movs	r0, #255	; 0xff
 8001510:	f7ff fe0c 	bl	800112c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80a7 	beq.w	800166c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800151e:	f7ff fdf9 	bl	8001114 <HAL_GetTick>
 8001522:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	461a      	mov	r2, r3
 800152a:	2101      	movs	r1, #1
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 fb96 	bl	8001c5e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001532:	f7ff fdef 	bl	8001114 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001540:	4293      	cmp	r3, r2
 8001542:	d90f      	bls.n	8001564 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001548:	6939      	ldr	r1, [r7, #16]
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 fc84 	bl	8001e58 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e0ae      	b.n	80016c2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0da      	beq.n	8001524 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800156e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001572:	2100      	movs	r1, #0
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 fbda 	bl	8001d2e <HAL_ETH_WritePHYRegister>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00b      	beq.n	8001598 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001584:	6939      	ldr	r1, [r7, #16]
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 fc66 	bl	8001e58 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001594:	2301      	movs	r3, #1
 8001596:	e094      	b.n	80016c2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001598:	f7ff fdbc 	bl	8001114 <HAL_GetTick>
 800159c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	461a      	mov	r2, r3
 80015a4:	2101      	movs	r1, #1
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 fb59 	bl	8001c5e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80015ac:	f7ff fdb2 	bl	8001114 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d90f      	bls.n	80015de <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015c2:	6939      	ldr	r1, [r7, #16]
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 fc47 	bl	8001e58 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e071      	b.n	80016c2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0da      	beq.n	800159e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	461a      	mov	r2, r3
 80015ee:	211f      	movs	r1, #31
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 fb34 	bl	8001c5e <HAL_ETH_ReadPHYRegister>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00b      	beq.n	8001614 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001600:	6939      	ldr	r1, [r7, #16]
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 fc28 	bl	8001e58 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001610:	2301      	movs	r3, #1
 8001612:	e056      	b.n	80016c2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b00      	cmp	r3, #0
 800161c:	d004      	beq.n	8001628 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	e002      	b.n	800162e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	e037      	b.n	80016b0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	e032      	b.n	80016b0 <HAL_ETH_Init+0x31c>
 800164a:	bf00      	nop
 800164c:	03938700 	.word	0x03938700
 8001650:	40023800 	.word	0x40023800
 8001654:	40013800 	.word	0x40013800
 8001658:	01312cff 	.word	0x01312cff
 800165c:	02160ebf 	.word	0x02160ebf
 8001660:	039386ff 	.word	0x039386ff
 8001664:	05f5e0ff 	.word	0x05f5e0ff
 8001668:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	08db      	lsrs	r3, r3, #3
 8001672:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	085b      	lsrs	r3, r3, #1
 800167a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800167c:	4313      	orrs	r3, r2
 800167e:	b29b      	uxth	r3, r3
 8001680:	461a      	mov	r2, r3
 8001682:	2100      	movs	r1, #0
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 fb52 	bl	8001d2e <HAL_ETH_WritePHYRegister>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00b      	beq.n	80016a8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001694:	6939      	ldr	r1, [r7, #16]
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 fbde 	bl	8001e58 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e00c      	b.n	80016c2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80016a8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80016ac:	f7ff fd3e 	bl	800112c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016b0:	6939      	ldr	r1, [r7, #16]
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 fbd0 	bl	8001e58 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop

080016cc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_ETH_DMATxDescListInit+0x20>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e052      	b.n	8001792 <HAL_ETH_DMATxDescListInit+0xc6>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2202      	movs	r2, #2
 80016f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e030      	b.n	800176a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	015b      	lsls	r3, r3, #5
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	4413      	add	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001718:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	4413      	add	r3, r2
 8001728:	461a      	mov	r2, r3
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d105      	bne.n	8001742 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	3b01      	subs	r3, #1
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	429a      	cmp	r2, r3
 800174a:	d208      	bcs.n	800175e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3301      	adds	r3, #1
 8001750:	015b      	lsls	r3, r3, #5
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	4413      	add	r3, r2
 8001756:	461a      	mov	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	e002      	b.n	8001764 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3301      	adds	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d3ca      	bcc.n	8001708 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6819      	ldr	r1, [r3, #0]
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f241 0310 	movw	r3, #4112	; 0x1010
 800177c:	440b      	add	r3, r1
 800177e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	371c      	adds	r7, #28
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800179e:	b480      	push	{r7}
 80017a0:	b087      	sub	sp, #28
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_ETH_DMARxDescListInit+0x20>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e056      	b.n	800186c <HAL_ETH_DMARxDescListInit+0xce>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2202      	movs	r2, #2
 80017ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	e034      	b.n	8001844 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	015b      	lsls	r3, r3, #5
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	4413      	add	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017ea:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017f2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017fa:	fb02 f303 	mul.w	r3, r2, r3
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	461a      	mov	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	3b01      	subs	r3, #1
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	429a      	cmp	r2, r3
 8001824:	d208      	bcs.n	8001838 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3301      	adds	r3, #1
 800182a:	015b      	lsls	r3, r3, #5
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	4413      	add	r3, r2
 8001830:	461a      	mov	r2, r3
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	e002      	b.n	800183e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3301      	adds	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d3c6      	bcc.n	80017da <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6819      	ldr	r1, [r3, #0]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	f241 030c 	movw	r3, #4108	; 0x100c
 8001856:	440b      	add	r3, r1
 8001858:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_ETH_TransmitFrame+0x24>
 8001898:	2302      	movs	r3, #2
 800189a:	e0cd      	b.n	8001a38 <HAL_ETH_TransmitFrame+0x1c0>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0b8      	b.n	8001a38 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	da09      	bge.n	80018e4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2212      	movs	r2, #18
 80018d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0a9      	b.n	8001a38 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d915      	bls.n	800191a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	4a54      	ldr	r2, [pc, #336]	; (8001a44 <HAL_ETH_TransmitFrame+0x1cc>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	0a9b      	lsrs	r3, r3, #10
 80018f8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	4b51      	ldr	r3, [pc, #324]	; (8001a44 <HAL_ETH_TransmitFrame+0x1cc>)
 80018fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001902:	0a9b      	lsrs	r3, r3, #10
 8001904:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	e001      	b.n	800191e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800191a:	2301      	movs	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d11c      	bne.n	800195e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001932:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800193e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800194e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	461a      	mov	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	62da      	str	r2, [r3, #44]	; 0x2c
 800195c:	e04b      	b.n	80019f6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	e044      	b.n	80019ee <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001972:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d107      	bne.n	800198a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001988:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001992:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3b01      	subs	r3, #1
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	429a      	cmp	r2, r3
 800199c:	d116      	bne.n	80019cc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019ac:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	4a25      	ldr	r2, [pc, #148]	; (8001a48 <HAL_ETH_TransmitFrame+0x1d0>)
 80019b2:	fb02 f203 	mul.w	r2, r2, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80019be:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019ca:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019da:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	461a      	mov	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	3301      	adds	r3, #1
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d3b6      	bcc.n	8001964 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	f241 0314 	movw	r3, #4116	; 0x1014
 80019fe:	4413      	add	r3, r2
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00d      	beq.n	8001a26 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a12:	4413      	add	r3, r2
 8001a14:	2204      	movs	r2, #4
 8001a16:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	f241 0304 	movw	r3, #4100	; 0x1004
 8001a20:	4413      	add	r3, r2
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	ac02b00b 	.word	0xac02b00b
 8001a48:	fffffa0c 	.word	0xfffffa0c

08001a4c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_ETH_GetReceivedFrame+0x1a>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e070      	b.n	8001b48 <HAL_ETH_GetReceivedFrame+0xfc>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2202      	movs	r2, #2
 8001a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db5a      	blt.n	8001b36 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d030      	beq.n	8001af0 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d103      	bne.n	8001aa8 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	0c1b      	lsrs	r3, r3, #16
 8001ab8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001abc:	3b04      	subs	r3, #4
 8001abe:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e02b      	b.n	8001b48 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d010      	beq.n	8001b20 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b1e:	e00a      	b.n	8001b36 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	461a      	mov	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b64:	4413      	add	r3, r2
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b6c:	2b40      	cmp	r3, #64	; 0x40
 8001b6e:	d112      	bne.n	8001b96 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f860 	bl	8001c36 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b7e:	4413      	add	r3, r2
 8001b80:	2240      	movs	r2, #64	; 0x40
 8001b82:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b94:	e01b      	b.n	8001bce <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b9e:	4413      	add	r3, r2
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d111      	bne.n	8001bce <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f839 	bl	8001c22 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bb8:	4413      	add	r3, r2
 8001bba:	2201      	movs	r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bdc:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	f241 0314 	movw	r3, #4116	; 0x1014
 8001be6:	4413      	add	r3, r2
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bf2:	d112      	bne.n	8001c1a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f828 	bl	8001c4a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c02:	4413      	add	r3, r2
 8001c04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c08:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	460b      	mov	r3, r1
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b82      	cmp	r3, #130	; 0x82
 8001c7e:	d101      	bne.n	8001c84 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c80:	2302      	movs	r3, #2
 8001c82:	e050      	b.n	8001d26 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2282      	movs	r2, #130	; 0x82
 8001c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 031c 	and.w	r3, r3, #28
 8001c9a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8a1b      	ldrh	r3, [r3, #16]
 8001ca0:	02db      	lsls	r3, r3, #11
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001caa:	897b      	ldrh	r3, [r7, #10]
 8001cac:	019b      	lsls	r3, r3, #6
 8001cae:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f023 0302 	bic.w	r3, r3, #2
 8001cbe:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001cd0:	f7ff fa20 	bl	8001114 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cd6:	e015      	b.n	8001d04 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001cd8:	f7ff fa1c 	bl	8001114 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce6:	d309      	bcc.n	8001cfc <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e014      	b.n	8001d26 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1e4      	bne.n	8001cd8 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	460b      	mov	r3, r1
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b42      	cmp	r3, #66	; 0x42
 8001d4e:	d101      	bne.n	8001d54 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d50:	2302      	movs	r3, #2
 8001d52:	e04e      	b.n	8001df2 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2242      	movs	r2, #66	; 0x42
 8001d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f003 031c 	and.w	r3, r3, #28
 8001d6a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8a1b      	ldrh	r3, [r3, #16]
 8001d70:	02db      	lsls	r3, r3, #11
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001d7a:	897b      	ldrh	r3, [r7, #10]
 8001d7c:	019b      	lsls	r3, r3, #6
 8001d7e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001daa:	f7ff f9b3 	bl	8001114 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001db0:	e015      	b.n	8001dde <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001db2:	f7ff f9af 	bl	8001114 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc0:	d309      	bcc.n	8001dd6 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e00d      	b.n	8001df2 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1e4      	bne.n	8001db2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_ETH_Start+0x16>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e01f      	b.n	8001e50 <HAL_ETH_Start+0x56>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fa1b 	bl	800225c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fa35 	bl	8002296 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fa7f 	bl	8002330 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fa4c 	bl	80022d0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 fa61 	bl	8002300 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b0b0      	sub	sp, #192	; 0xc0
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e74:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001e86:	2300      	movs	r3, #0
 8001e88:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d103      	bne.n	8001ea6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ea2:	663b      	str	r3, [r7, #96]	; 0x60
 8001ea4:	e001      	b.n	8001eaa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eae:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001ec4:	2340      	movs	r3, #64	; 0x40
 8001ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f30:	4bab      	ldr	r3, [pc, #684]	; (80021e0 <ETH_MACDMAConfig+0x388>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f38:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f3c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001f40:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001f44:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001f4a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001f4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001f4e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001f52:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001f58:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001f5c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001f5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001f60:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001f62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001f64:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001f68:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001f6c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f80:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f7ff f8cd 	bl	800112c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f9a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001f9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fa0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001fa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001fa4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001fa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001faa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001fb0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001fb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001fb6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001fbc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001fc0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001fc8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fca:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f7ff f8a8 	bl	800112c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fe4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001fee:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001ff8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002004:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002008:	f64f 7341 	movw	r3, #65345	; 0xff41
 800200c:	4013      	ands	r3, r2
 800200e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002012:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002016:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002018:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800201c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800201e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002022:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002024:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002028:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800202a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800202e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002030:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002034:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002036:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002048:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002054:	2001      	movs	r0, #1
 8002056:	f7ff f869 	bl	800112c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002062:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002064:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002068:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800207e:	2001      	movs	r0, #1
 8002080:	f7ff f854 	bl	800112c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800208c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002092:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002096:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800209c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020a0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80020b2:	2304      	movs	r3, #4
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80020b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80020bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020c0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020cc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	f241 0318 	movw	r3, #4120	; 0x1018
 80020e2:	4413      	add	r3, r2
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80020ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ee:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <ETH_MACDMAConfig+0x38c>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020f6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80020f8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020fa:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80020fc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80020fe:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002100:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002102:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002104:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002106:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002108:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800210a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800210c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800210e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002112:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002114:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002116:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002118:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	f241 0318 	movw	r3, #4120	; 0x1018
 800212a:	4413      	add	r3, r2
 800212c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002130:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	f241 0318 	movw	r3, #4120	; 0x1018
 800213a:	4413      	add	r3, r2
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002142:	2001      	movs	r0, #1
 8002144:	f7fe fff2 	bl	800112c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002150:	4413      	add	r3, r2
 8002152:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002156:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800215a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800215c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800215e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002160:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002164:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002168:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800216a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800216c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800216e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002172:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800217c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002180:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002190:	2001      	movs	r0, #1
 8002192:	f7fe ffcb 	bl	800112c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021a2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d10d      	bne.n	80021c8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	f241 031c 	movw	r3, #4124	; 0x101c
 80021b4:	4413      	add	r3, r2
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6811      	ldr	r1, [r2, #0]
 80021bc:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <ETH_MACDMAConfig+0x390>)
 80021be:	431a      	orrs	r2, r3
 80021c0:	f241 031c 	movw	r3, #4124	; 0x101c
 80021c4:	440b      	add	r3, r1
 80021c6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	461a      	mov	r2, r3
 80021ce:	2100      	movs	r1, #0
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f80b 	bl	80021ec <ETH_MACAddressConfig>
}
 80021d6:	bf00      	nop
 80021d8:	37c0      	adds	r7, #192	; 0xc0
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	ff20810f 	.word	0xff20810f
 80021e4:	f8de3f23 	.word	0xf8de3f23
 80021e8:	00010040 	.word	0x00010040

080021ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3305      	adds	r3, #5
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	3204      	adds	r2, #4
 8002204:	7812      	ldrb	r2, [r2, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <ETH_MACAddressConfig+0x68>)
 800220e:	4413      	add	r3, r2
 8002210:	461a      	mov	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3303      	adds	r3, #3
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	061a      	lsls	r2, r3, #24
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3302      	adds	r3, #2
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	041b      	lsls	r3, r3, #16
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3301      	adds	r3, #1
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	021b      	lsls	r3, r3, #8
 8002230:	4313      	orrs	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	7812      	ldrb	r2, [r2, #0]
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <ETH_MACAddressConfig+0x6c>)
 800223e:	4413      	add	r3, r2
 8002240:	461a      	mov	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	6013      	str	r3, [r2, #0]
}
 8002246:	bf00      	nop
 8002248:	371c      	adds	r7, #28
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40028040 	.word	0x40028040
 8002258:	40028044 	.word	0x40028044

0800225c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0208 	orr.w	r2, r2, #8
 8002276:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002280:	2001      	movs	r0, #1
 8002282:	f7fe ff53 	bl	800112c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	601a      	str	r2, [r3, #0]
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0204 	orr.w	r2, r2, #4
 80022b0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ba:	2001      	movs	r0, #1
 80022bc:	f7fe ff36 	bl	800112c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	601a      	str	r2, [r3, #0]
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	f241 0318 	movw	r3, #4120	; 0x1018
 80022e0:	4413      	add	r3, r2
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6811      	ldr	r1, [r2, #0]
 80022e8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022ec:	f241 0318 	movw	r3, #4120	; 0x1018
 80022f0:	440b      	add	r3, r1
 80022f2:	601a      	str	r2, [r3, #0]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002310:	4413      	add	r3, r2
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6811      	ldr	r1, [r2, #0]
 8002318:	f043 0202 	orr.w	r2, r3, #2
 800231c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002320:	440b      	add	r3, r1
 8002322:	601a      	str	r2, [r3, #0]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	f241 0318 	movw	r3, #4120	; 0x1018
 8002344:	4413      	add	r3, r2
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6811      	ldr	r1, [r2, #0]
 800234c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002350:	f241 0318 	movw	r3, #4120	; 0x1018
 8002354:	440b      	add	r3, r1
 8002356:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002360:	4413      	add	r3, r2
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002366:	2001      	movs	r0, #1
 8002368:	f7fe fee0 	bl	800112c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6819      	ldr	r1, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	f241 0318 	movw	r3, #4120	; 0x1018
 8002376:	440b      	add	r3, r1
 8002378:	601a      	str	r2, [r3, #0]
}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	e175      	b.n	8002690 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023a4:	2201      	movs	r2, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	429a      	cmp	r2, r3
 80023be:	f040 8164 	bne.w	800268a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d00b      	beq.n	80023e2 <HAL_GPIO_Init+0x5e>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d007      	beq.n	80023e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023d6:	2b11      	cmp	r3, #17
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b12      	cmp	r3, #18
 80023e0:	d130      	bne.n	8002444 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	2203      	movs	r2, #3
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002418:	2201      	movs	r2, #1
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	f003 0201 	and.w	r2, r3, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x100>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b12      	cmp	r3, #18
 8002482:	d123      	bne.n	80024cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	08da      	lsrs	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3208      	adds	r2, #8
 800248c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	220f      	movs	r2, #15
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	08da      	lsrs	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3208      	adds	r2, #8
 80024c6:	69b9      	ldr	r1, [r7, #24]
 80024c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0203 	and.w	r2, r3, #3
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80be 	beq.w	800268a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250e:	4b65      	ldr	r3, [pc, #404]	; (80026a4 <HAL_GPIO_Init+0x320>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	4a64      	ldr	r2, [pc, #400]	; (80026a4 <HAL_GPIO_Init+0x320>)
 8002514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002518:	6453      	str	r3, [r2, #68]	; 0x44
 800251a:	4b62      	ldr	r3, [pc, #392]	; (80026a4 <HAL_GPIO_Init+0x320>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002526:	4a60      	ldr	r2, [pc, #384]	; (80026a8 <HAL_GPIO_Init+0x324>)
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	3302      	adds	r3, #2
 800252e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	220f      	movs	r2, #15
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a57      	ldr	r2, [pc, #348]	; (80026ac <HAL_GPIO_Init+0x328>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d037      	beq.n	80025c2 <HAL_GPIO_Init+0x23e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a56      	ldr	r2, [pc, #344]	; (80026b0 <HAL_GPIO_Init+0x32c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d031      	beq.n	80025be <HAL_GPIO_Init+0x23a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a55      	ldr	r2, [pc, #340]	; (80026b4 <HAL_GPIO_Init+0x330>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d02b      	beq.n	80025ba <HAL_GPIO_Init+0x236>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a54      	ldr	r2, [pc, #336]	; (80026b8 <HAL_GPIO_Init+0x334>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d025      	beq.n	80025b6 <HAL_GPIO_Init+0x232>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a53      	ldr	r2, [pc, #332]	; (80026bc <HAL_GPIO_Init+0x338>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d01f      	beq.n	80025b2 <HAL_GPIO_Init+0x22e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a52      	ldr	r2, [pc, #328]	; (80026c0 <HAL_GPIO_Init+0x33c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d019      	beq.n	80025ae <HAL_GPIO_Init+0x22a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a51      	ldr	r2, [pc, #324]	; (80026c4 <HAL_GPIO_Init+0x340>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d013      	beq.n	80025aa <HAL_GPIO_Init+0x226>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a50      	ldr	r2, [pc, #320]	; (80026c8 <HAL_GPIO_Init+0x344>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00d      	beq.n	80025a6 <HAL_GPIO_Init+0x222>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4f      	ldr	r2, [pc, #316]	; (80026cc <HAL_GPIO_Init+0x348>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d007      	beq.n	80025a2 <HAL_GPIO_Init+0x21e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4e      	ldr	r2, [pc, #312]	; (80026d0 <HAL_GPIO_Init+0x34c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d101      	bne.n	800259e <HAL_GPIO_Init+0x21a>
 800259a:	2309      	movs	r3, #9
 800259c:	e012      	b.n	80025c4 <HAL_GPIO_Init+0x240>
 800259e:	230a      	movs	r3, #10
 80025a0:	e010      	b.n	80025c4 <HAL_GPIO_Init+0x240>
 80025a2:	2308      	movs	r3, #8
 80025a4:	e00e      	b.n	80025c4 <HAL_GPIO_Init+0x240>
 80025a6:	2307      	movs	r3, #7
 80025a8:	e00c      	b.n	80025c4 <HAL_GPIO_Init+0x240>
 80025aa:	2306      	movs	r3, #6
 80025ac:	e00a      	b.n	80025c4 <HAL_GPIO_Init+0x240>
 80025ae:	2305      	movs	r3, #5
 80025b0:	e008      	b.n	80025c4 <HAL_GPIO_Init+0x240>
 80025b2:	2304      	movs	r3, #4
 80025b4:	e006      	b.n	80025c4 <HAL_GPIO_Init+0x240>
 80025b6:	2303      	movs	r3, #3
 80025b8:	e004      	b.n	80025c4 <HAL_GPIO_Init+0x240>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e002      	b.n	80025c4 <HAL_GPIO_Init+0x240>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <HAL_GPIO_Init+0x240>
 80025c2:	2300      	movs	r3, #0
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	f002 0203 	and.w	r2, r2, #3
 80025ca:	0092      	lsls	r2, r2, #2
 80025cc:	4093      	lsls	r3, r2
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025d4:	4934      	ldr	r1, [pc, #208]	; (80026a8 <HAL_GPIO_Init+0x324>)
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	089b      	lsrs	r3, r3, #2
 80025da:	3302      	adds	r3, #2
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025e2:	4b3c      	ldr	r3, [pc, #240]	; (80026d4 <HAL_GPIO_Init+0x350>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002606:	4a33      	ldr	r2, [pc, #204]	; (80026d4 <HAL_GPIO_Init+0x350>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800260c:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <HAL_GPIO_Init+0x350>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002630:	4a28      	ldr	r2, [pc, #160]	; (80026d4 <HAL_GPIO_Init+0x350>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002636:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <HAL_GPIO_Init+0x350>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800265a:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <HAL_GPIO_Init+0x350>)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002660:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <HAL_GPIO_Init+0x350>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002684:	4a13      	ldr	r2, [pc, #76]	; (80026d4 <HAL_GPIO_Init+0x350>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3301      	adds	r3, #1
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	2b0f      	cmp	r3, #15
 8002694:	f67f ae86 	bls.w	80023a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002698:	bf00      	nop
 800269a:	3724      	adds	r7, #36	; 0x24
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40013800 	.word	0x40013800
 80026ac:	40020000 	.word	0x40020000
 80026b0:	40020400 	.word	0x40020400
 80026b4:	40020800 	.word	0x40020800
 80026b8:	40020c00 	.word	0x40020c00
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40021400 	.word	0x40021400
 80026c4:	40021800 	.word	0x40021800
 80026c8:	40021c00 	.word	0x40021c00
 80026cc:	40022000 	.word	0x40022000
 80026d0:	40022400 	.word	0x40022400
 80026d4:	40013c00 	.word	0x40013c00

080026d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	807b      	strh	r3, [r7, #2]
 80026e4:	4613      	mov	r3, r2
 80026e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026e8:	787b      	ldrb	r3, [r7, #1]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ee:	887a      	ldrh	r2, [r7, #2]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026f4:	e003      	b.n	80026fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026f6:	887b      	ldrh	r3, [r7, #2]
 80026f8:	041a      	lsls	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	619a      	str	r2, [r3, #24]
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002716:	4b08      	ldr	r3, [pc, #32]	; (8002738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d006      	beq.n	8002730 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002722:	4a05      	ldr	r2, [pc, #20]	; (8002738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd ff48 	bl	80005c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40013c00 	.word	0x40013c00

0800273c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800273c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273e:	b08f      	sub	sp, #60	; 0x3c
 8002740:	af0a      	add	r7, sp, #40	; 0x28
 8002742:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e116      	b.n	800297c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d106      	bne.n	800276e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7fe fb0b 	bl	8000d84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2203      	movs	r2, #3
 8002772:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d102      	bne.n	8002788 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f001 fe53 	bl	8004438 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	687e      	ldr	r6, [r7, #4]
 800279a:	466d      	mov	r5, sp
 800279c:	f106 0410 	add.w	r4, r6, #16
 80027a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80027b0:	1d33      	adds	r3, r6, #4
 80027b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027b4:	6838      	ldr	r0, [r7, #0]
 80027b6:	f001 fde7 	bl	8004388 <USB_CoreInit>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0d7      	b.n	800297c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f001 fe41 	bl	800445a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d8:	2300      	movs	r3, #0
 80027da:	73fb      	strb	r3, [r7, #15]
 80027dc:	e04a      	b.n	8002874 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	333d      	adds	r3, #61	; 0x3d
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	1a9b      	subs	r3, r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	333c      	adds	r3, #60	; 0x3c
 8002802:	7bfa      	ldrb	r2, [r7, #15]
 8002804:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002806:	7bfa      	ldrb	r2, [r7, #15]
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	b298      	uxth	r0, r3
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	1a9b      	subs	r3, r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	3342      	adds	r3, #66	; 0x42
 800281a:	4602      	mov	r2, r0
 800281c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800281e:	7bfa      	ldrb	r2, [r7, #15]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	333f      	adds	r3, #63	; 0x3f
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002832:	7bfa      	ldrb	r2, [r7, #15]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	3344      	adds	r3, #68	; 0x44
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002846:	7bfa      	ldrb	r2, [r7, #15]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	3348      	adds	r3, #72	; 0x48
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800285a:	7bfa      	ldrb	r2, [r7, #15]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	3350      	adds	r3, #80	; 0x50
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	3301      	adds	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	429a      	cmp	r2, r3
 800287c:	d3af      	bcc.n	80027de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800287e:	2300      	movs	r3, #0
 8002880:	73fb      	strb	r3, [r7, #15]
 8002882:	e044      	b.n	800290e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002884:	7bfa      	ldrb	r2, [r7, #15]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002896:	2200      	movs	r2, #0
 8002898:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800289a:	7bfa      	ldrb	r2, [r7, #15]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80028ac:	7bfa      	ldrb	r2, [r7, #15]
 80028ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028b0:	7bfa      	ldrb	r2, [r7, #15]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028c6:	7bfa      	ldrb	r2, [r7, #15]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	3301      	adds	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
 800290e:	7bfa      	ldrb	r2, [r7, #15]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	429a      	cmp	r2, r3
 8002916:	d3b5      	bcc.n	8002884 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	603b      	str	r3, [r7, #0]
 800291e:	687e      	ldr	r6, [r7, #4]
 8002920:	466d      	mov	r5, sp
 8002922:	f106 0410 	add.w	r4, r6, #16
 8002926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800292a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800292c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800292e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002932:	e885 0003 	stmia.w	r5, {r0, r1}
 8002936:	1d33      	adds	r3, r6, #4
 8002938:	cb0e      	ldmia	r3, {r1, r2, r3}
 800293a:	6838      	ldr	r0, [r7, #0]
 800293c:	f001 fdb8 	bl	80044b0 <USB_DevInit>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2202      	movs	r2, #2
 800294a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e014      	b.n	800297c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	2b01      	cmp	r3, #1
 8002968:	d102      	bne.n	8002970 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f80a 	bl	8002984 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f001 ff6a 	bl	800484e <USB_DevDisconnect>

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002984 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	10000003 	.word	0x10000003

080029cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029da:	6013      	str	r3, [r2, #0]
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40007000 	.word	0x40007000

080029ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029f4:	2300      	movs	r3, #0
 80029f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e291      	b.n	8002f26 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8087 	beq.w	8002b1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a10:	4b96      	ldr	r3, [pc, #600]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 030c 	and.w	r3, r3, #12
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d00c      	beq.n	8002a36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1c:	4b93      	ldr	r3, [pc, #588]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 030c 	and.w	r3, r3, #12
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d112      	bne.n	8002a4e <HAL_RCC_OscConfig+0x62>
 8002a28:	4b90      	ldr	r3, [pc, #576]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a34:	d10b      	bne.n	8002a4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a36:	4b8d      	ldr	r3, [pc, #564]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d06c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x130>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d168      	bne.n	8002b1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e26b      	b.n	8002f26 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a56:	d106      	bne.n	8002a66 <HAL_RCC_OscConfig+0x7a>
 8002a58:	4b84      	ldr	r3, [pc, #528]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a83      	ldr	r2, [pc, #524]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	e02e      	b.n	8002ac4 <HAL_RCC_OscConfig+0xd8>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x9c>
 8002a6e:	4b7f      	ldr	r3, [pc, #508]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a7e      	ldr	r2, [pc, #504]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4b7c      	ldr	r3, [pc, #496]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a7b      	ldr	r2, [pc, #492]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002a80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e01d      	b.n	8002ac4 <HAL_RCC_OscConfig+0xd8>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0xc0>
 8002a92:	4b76      	ldr	r3, [pc, #472]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a75      	ldr	r2, [pc, #468]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b73      	ldr	r3, [pc, #460]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a72      	ldr	r2, [pc, #456]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e00b      	b.n	8002ac4 <HAL_RCC_OscConfig+0xd8>
 8002aac:	4b6f      	ldr	r3, [pc, #444]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a6e      	ldr	r2, [pc, #440]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	4b6c      	ldr	r3, [pc, #432]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a6b      	ldr	r2, [pc, #428]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d013      	beq.n	8002af4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fe fb22 	bl	8001114 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad4:	f7fe fb1e 	bl	8001114 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b64      	cmp	r3, #100	; 0x64
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e21f      	b.n	8002f26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	4b61      	ldr	r3, [pc, #388]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0xe8>
 8002af2:	e014      	b.n	8002b1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af4:	f7fe fb0e 	bl	8001114 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002afc:	f7fe fb0a 	bl	8001114 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b64      	cmp	r3, #100	; 0x64
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e20b      	b.n	8002f26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	4b57      	ldr	r3, [pc, #348]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x110>
 8002b1a:	e000      	b.n	8002b1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d069      	beq.n	8002bfe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b2a:	4b50      	ldr	r3, [pc, #320]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00b      	beq.n	8002b4e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b36:	4b4d      	ldr	r3, [pc, #308]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d11c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x190>
 8002b42:	4b4a      	ldr	r3, [pc, #296]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d116      	bne.n	8002b7c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4e:	4b47      	ldr	r3, [pc, #284]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_RCC_OscConfig+0x17a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d001      	beq.n	8002b66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e1df      	b.n	8002f26 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b66:	4b41      	ldr	r3, [pc, #260]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	493d      	ldr	r1, [pc, #244]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7a:	e040      	b.n	8002bfe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d023      	beq.n	8002bcc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b84:	4b39      	ldr	r3, [pc, #228]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a38      	ldr	r2, [pc, #224]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe fac0 	bl	8001114 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b98:	f7fe fabc 	bl	8001114 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e1bd      	b.n	8002f26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002baa:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb6:	4b2d      	ldr	r3, [pc, #180]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4929      	ldr	r1, [pc, #164]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]
 8002bca:	e018      	b.n	8002bfe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bcc:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a26      	ldr	r2, [pc, #152]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fa9c 	bl	8001114 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be0:	f7fe fa98 	bl	8001114 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e199      	b.n	8002f26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf2:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d038      	beq.n	8002c7c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d019      	beq.n	8002c46 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c12:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c16:	4a15      	ldr	r2, [pc, #84]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1e:	f7fe fa79 	bl	8001114 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c26:	f7fe fa75 	bl	8001114 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e176      	b.n	8002f26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x23a>
 8002c44:	e01a      	b.n	8002c7c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c46:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4a:	4a08      	ldr	r2, [pc, #32]	; (8002c6c <HAL_RCC_OscConfig+0x280>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c52:	f7fe fa5f 	bl	8001114 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5a:	f7fe fa5b 	bl	8001114 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d903      	bls.n	8002c70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e15c      	b.n	8002f26 <HAL_RCC_OscConfig+0x53a>
 8002c6c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c70:	4b91      	ldr	r3, [pc, #580]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1ee      	bne.n	8002c5a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80a4 	beq.w	8002dd2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8a:	4b8b      	ldr	r3, [pc, #556]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10d      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	4b88      	ldr	r3, [pc, #544]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4a87      	ldr	r2, [pc, #540]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca2:	4b85      	ldr	r3, [pc, #532]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb2:	4b82      	ldr	r3, [pc, #520]	; (8002ebc <HAL_RCC_OscConfig+0x4d0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d118      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cbe:	4b7f      	ldr	r3, [pc, #508]	; (8002ebc <HAL_RCC_OscConfig+0x4d0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a7e      	ldr	r2, [pc, #504]	; (8002ebc <HAL_RCC_OscConfig+0x4d0>)
 8002cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cca:	f7fe fa23 	bl	8001114 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd2:	f7fe fa1f 	bl	8001114 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b64      	cmp	r3, #100	; 0x64
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e120      	b.n	8002f26 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce4:	4b75      	ldr	r3, [pc, #468]	; (8002ebc <HAL_RCC_OscConfig+0x4d0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d106      	bne.n	8002d06 <HAL_RCC_OscConfig+0x31a>
 8002cf8:	4b6f      	ldr	r3, [pc, #444]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	4a6e      	ldr	r2, [pc, #440]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	6713      	str	r3, [r2, #112]	; 0x70
 8002d04:	e02d      	b.n	8002d62 <HAL_RCC_OscConfig+0x376>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x33c>
 8002d0e:	4b6a      	ldr	r3, [pc, #424]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d12:	4a69      	ldr	r2, [pc, #420]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1a:	4b67      	ldr	r3, [pc, #412]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1e:	4a66      	ldr	r2, [pc, #408]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002d20:	f023 0304 	bic.w	r3, r3, #4
 8002d24:	6713      	str	r3, [r2, #112]	; 0x70
 8002d26:	e01c      	b.n	8002d62 <HAL_RCC_OscConfig+0x376>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b05      	cmp	r3, #5
 8002d2e:	d10c      	bne.n	8002d4a <HAL_RCC_OscConfig+0x35e>
 8002d30:	4b61      	ldr	r3, [pc, #388]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	4a60      	ldr	r2, [pc, #384]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002d36:	f043 0304 	orr.w	r3, r3, #4
 8002d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3c:	4b5e      	ldr	r3, [pc, #376]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	4a5d      	ldr	r2, [pc, #372]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6713      	str	r3, [r2, #112]	; 0x70
 8002d48:	e00b      	b.n	8002d62 <HAL_RCC_OscConfig+0x376>
 8002d4a:	4b5b      	ldr	r3, [pc, #364]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	4a5a      	ldr	r2, [pc, #360]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	6713      	str	r3, [r2, #112]	; 0x70
 8002d56:	4b58      	ldr	r3, [pc, #352]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	4a57      	ldr	r2, [pc, #348]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002d5c:	f023 0304 	bic.w	r3, r3, #4
 8002d60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d015      	beq.n	8002d96 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6a:	f7fe f9d3 	bl	8001114 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d72:	f7fe f9cf 	bl	8001114 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e0ce      	b.n	8002f26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d88:	4b4b      	ldr	r3, [pc, #300]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0ee      	beq.n	8002d72 <HAL_RCC_OscConfig+0x386>
 8002d94:	e014      	b.n	8002dc0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d96:	f7fe f9bd 	bl	8001114 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9c:	e00a      	b.n	8002db4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9e:	f7fe f9b9 	bl	8001114 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e0b8      	b.n	8002f26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db4:	4b40      	ldr	r3, [pc, #256]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1ee      	bne.n	8002d9e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dc0:	7dfb      	ldrb	r3, [r7, #23]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d105      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc6:	4b3c      	ldr	r3, [pc, #240]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	4a3b      	ldr	r2, [pc, #236]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80a4 	beq.w	8002f24 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ddc:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 030c 	and.w	r3, r3, #12
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d06b      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d149      	bne.n	8002e84 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df0:	4b31      	ldr	r3, [pc, #196]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a30      	ldr	r2, [pc, #192]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f98a 	bl	8001114 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe f986 	bl	8001114 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e087      	b.n	8002f26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e16:	4b28      	ldr	r3, [pc, #160]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69da      	ldr	r2, [r3, #28]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	019b      	lsls	r3, r3, #6
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	085b      	lsrs	r3, r3, #1
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	041b      	lsls	r3, r3, #16
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	4313      	orrs	r3, r2
 8002e48:	4a1b      	ldr	r2, [pc, #108]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002e4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e4e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a18      	ldr	r2, [pc, #96]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe f95a 	bl	8001114 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e64:	f7fe f956 	bl	8001114 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e057      	b.n	8002f26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0x478>
 8002e82:	e04f      	b.n	8002f24 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a0b      	ldr	r2, [pc, #44]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe f940 	bl	8001114 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fe f93c 	bl	8001114 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e03d      	b.n	8002f26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eaa:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <HAL_RCC_OscConfig+0x4cc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4ac>
 8002eb6:	e035      	b.n	8002f24 <HAL_RCC_OscConfig+0x538>
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_RCC_OscConfig+0x544>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d028      	beq.n	8002f20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d121      	bne.n	8002f20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d11a      	bne.n	8002f20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ef6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d111      	bne.n	8002f20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f06:	085b      	lsrs	r3, r3, #1
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d107      	bne.n	8002f20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800

08002f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0d0      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b6a      	ldr	r3, [pc, #424]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d910      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b67      	ldr	r3, [pc, #412]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 020f 	bic.w	r2, r3, #15
 8002f62:	4965      	ldr	r1, [pc, #404]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b63      	ldr	r3, [pc, #396]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b8      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f94:	4b59      	ldr	r3, [pc, #356]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a58      	ldr	r2, [pc, #352]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8002f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fac:	4b53      	ldr	r3, [pc, #332]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8002fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b50      	ldr	r3, [pc, #320]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	494d      	ldr	r1, [pc, #308]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d040      	beq.n	8003058 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b47      	ldr	r3, [pc, #284]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d115      	bne.n	8003016 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff6:	4b41      	ldr	r3, [pc, #260]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e073      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003006:	4b3d      	ldr	r3, [pc, #244]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e06b      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003016:	4b39      	ldr	r3, [pc, #228]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f023 0203 	bic.w	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4936      	ldr	r1, [pc, #216]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	4313      	orrs	r3, r2
 8003026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003028:	f7fe f874 	bl	8001114 <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302e:	e00a      	b.n	8003046 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003030:	f7fe f870 	bl	8001114 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e053      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003046:	4b2d      	ldr	r3, [pc, #180]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 020c 	and.w	r2, r3, #12
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	429a      	cmp	r2, r3
 8003056:	d1eb      	bne.n	8003030 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003058:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d210      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 020f 	bic.w	r2, r3, #15
 800306e:	4922      	ldr	r1, [pc, #136]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e032      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4916      	ldr	r1, [pc, #88]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	490e      	ldr	r1, [pc, #56]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030c6:	f000 f821 	bl	800310c <HAL_RCC_GetSysClockFreq>
 80030ca:	4601      	mov	r1, r0
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <HAL_RCC_ClockConfig+0x1cc>)
 80030d8:	5cd3      	ldrb	r3, [r2, r3]
 80030da:	fa21 f303 	lsr.w	r3, r1, r3
 80030de:	4a09      	ldr	r2, [pc, #36]	; (8003104 <HAL_RCC_ClockConfig+0x1d0>)
 80030e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_RCC_ClockConfig+0x1d4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd ffd0 	bl	800108c <HAL_InitTick>

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023c00 	.word	0x40023c00
 80030fc:	40023800 	.word	0x40023800
 8003100:	080129c4 	.word	0x080129c4
 8003104:	20000068 	.word	0x20000068
 8003108:	2000006c 	.word	0x2000006c

0800310c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800310c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	2300      	movs	r3, #0
 800311c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003122:	4b63      	ldr	r3, [pc, #396]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b04      	cmp	r3, #4
 800312c:	d007      	beq.n	800313e <HAL_RCC_GetSysClockFreq+0x32>
 800312e:	2b08      	cmp	r3, #8
 8003130:	d008      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x38>
 8003132:	2b00      	cmp	r3, #0
 8003134:	f040 80b4 	bne.w	80032a0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003138:	4b5e      	ldr	r3, [pc, #376]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800313a:	60bb      	str	r3, [r7, #8]
      break;
 800313c:	e0b3      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800313e:	4b5e      	ldr	r3, [pc, #376]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003140:	60bb      	str	r3, [r7, #8]
      break;
 8003142:	e0b0      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003144:	4b5a      	ldr	r3, [pc, #360]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800314c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800314e:	4b58      	ldr	r3, [pc, #352]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d04a      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315a:	4b55      	ldr	r3, [pc, #340]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	099b      	lsrs	r3, r3, #6
 8003160:	f04f 0400 	mov.w	r4, #0
 8003164:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	ea03 0501 	and.w	r5, r3, r1
 8003170:	ea04 0602 	and.w	r6, r4, r2
 8003174:	4629      	mov	r1, r5
 8003176:	4632      	mov	r2, r6
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	f04f 0400 	mov.w	r4, #0
 8003180:	0154      	lsls	r4, r2, #5
 8003182:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003186:	014b      	lsls	r3, r1, #5
 8003188:	4619      	mov	r1, r3
 800318a:	4622      	mov	r2, r4
 800318c:	1b49      	subs	r1, r1, r5
 800318e:	eb62 0206 	sbc.w	r2, r2, r6
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	f04f 0400 	mov.w	r4, #0
 800319a:	0194      	lsls	r4, r2, #6
 800319c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031a0:	018b      	lsls	r3, r1, #6
 80031a2:	1a5b      	subs	r3, r3, r1
 80031a4:	eb64 0402 	sbc.w	r4, r4, r2
 80031a8:	f04f 0100 	mov.w	r1, #0
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	00e2      	lsls	r2, r4, #3
 80031b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031b6:	00d9      	lsls	r1, r3, #3
 80031b8:	460b      	mov	r3, r1
 80031ba:	4614      	mov	r4, r2
 80031bc:	195b      	adds	r3, r3, r5
 80031be:	eb44 0406 	adc.w	r4, r4, r6
 80031c2:	f04f 0100 	mov.w	r1, #0
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	0262      	lsls	r2, r4, #9
 80031cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80031d0:	0259      	lsls	r1, r3, #9
 80031d2:	460b      	mov	r3, r1
 80031d4:	4614      	mov	r4, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	4621      	mov	r1, r4
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f04f 0400 	mov.w	r4, #0
 80031e0:	461a      	mov	r2, r3
 80031e2:	4623      	mov	r3, r4
 80031e4:	f7fd f86c 	bl	80002c0 <__aeabi_uldivmod>
 80031e8:	4603      	mov	r3, r0
 80031ea:	460c      	mov	r4, r1
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	e049      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f0:	4b2f      	ldr	r3, [pc, #188]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	099b      	lsrs	r3, r3, #6
 80031f6:	f04f 0400 	mov.w	r4, #0
 80031fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	ea03 0501 	and.w	r5, r3, r1
 8003206:	ea04 0602 	and.w	r6, r4, r2
 800320a:	4629      	mov	r1, r5
 800320c:	4632      	mov	r2, r6
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	f04f 0400 	mov.w	r4, #0
 8003216:	0154      	lsls	r4, r2, #5
 8003218:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800321c:	014b      	lsls	r3, r1, #5
 800321e:	4619      	mov	r1, r3
 8003220:	4622      	mov	r2, r4
 8003222:	1b49      	subs	r1, r1, r5
 8003224:	eb62 0206 	sbc.w	r2, r2, r6
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	f04f 0400 	mov.w	r4, #0
 8003230:	0194      	lsls	r4, r2, #6
 8003232:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003236:	018b      	lsls	r3, r1, #6
 8003238:	1a5b      	subs	r3, r3, r1
 800323a:	eb64 0402 	sbc.w	r4, r4, r2
 800323e:	f04f 0100 	mov.w	r1, #0
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	00e2      	lsls	r2, r4, #3
 8003248:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800324c:	00d9      	lsls	r1, r3, #3
 800324e:	460b      	mov	r3, r1
 8003250:	4614      	mov	r4, r2
 8003252:	195b      	adds	r3, r3, r5
 8003254:	eb44 0406 	adc.w	r4, r4, r6
 8003258:	f04f 0100 	mov.w	r1, #0
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	02a2      	lsls	r2, r4, #10
 8003262:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003266:	0299      	lsls	r1, r3, #10
 8003268:	460b      	mov	r3, r1
 800326a:	4614      	mov	r4, r2
 800326c:	4618      	mov	r0, r3
 800326e:	4621      	mov	r1, r4
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f04f 0400 	mov.w	r4, #0
 8003276:	461a      	mov	r2, r3
 8003278:	4623      	mov	r3, r4
 800327a:	f7fd f821 	bl	80002c0 <__aeabi_uldivmod>
 800327e:	4603      	mov	r3, r0
 8003280:	460c      	mov	r4, r1
 8003282:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003284:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	0c1b      	lsrs	r3, r3, #16
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	3301      	adds	r3, #1
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	fbb2 f3f3 	udiv	r3, r2, r3
 800329c:	60bb      	str	r3, [r7, #8]
      break;
 800329e:	e002      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80032a2:	60bb      	str	r3, [r7, #8]
      break;
 80032a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032a6:	68bb      	ldr	r3, [r7, #8]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032b0:	40023800 	.word	0x40023800
 80032b4:	00f42400 	.word	0x00f42400
 80032b8:	007a1200 	.word	0x007a1200

080032bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000068 	.word	0x20000068

080032d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032d8:	f7ff fff0 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 80032dc:	4601      	mov	r1, r0
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	0a9b      	lsrs	r3, r3, #10
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4a03      	ldr	r2, [pc, #12]	; (80032f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ea:	5cd3      	ldrb	r3, [r2, r3]
 80032ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	080129d4 	.word	0x080129d4

080032fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003300:	f7ff ffdc 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 8003304:	4601      	mov	r1, r0
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	0b5b      	lsrs	r3, r3, #13
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4a03      	ldr	r2, [pc, #12]	; (8003320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003312:	5cd3      	ldrb	r3, [r2, r3]
 8003314:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	080129d4 	.word	0x080129d4

08003324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d012      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800334c:	4b69      	ldr	r3, [pc, #420]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	4a68      	ldr	r2, [pc, #416]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003356:	6093      	str	r3, [r2, #8]
 8003358:	4b66      	ldr	r3, [pc, #408]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003360:	4964      	ldr	r1, [pc, #400]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800336e:	2301      	movs	r3, #1
 8003370:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d017      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800337e:	4b5d      	ldr	r3, [pc, #372]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003384:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	4959      	ldr	r1, [pc, #356]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800339c:	d101      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800339e:	2301      	movs	r3, #1
 80033a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033aa:	2301      	movs	r3, #1
 80033ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d017      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ba:	4b4e      	ldr	r3, [pc, #312]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	494a      	ldr	r1, [pc, #296]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033d8:	d101      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033da:	2301      	movs	r3, #1
 80033dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 808b 	beq.w	800351e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	4b3a      	ldr	r3, [pc, #232]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	4a39      	ldr	r2, [pc, #228]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003412:	6413      	str	r3, [r2, #64]	; 0x40
 8003414:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003420:	4b35      	ldr	r3, [pc, #212]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a34      	ldr	r2, [pc, #208]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800342c:	f7fd fe72 	bl	8001114 <HAL_GetTick>
 8003430:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003434:	f7fd fe6e 	bl	8001114 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e355      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003446:	4b2c      	ldr	r3, [pc, #176]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003452:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d035      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	429a      	cmp	r2, r3
 800346e:	d02e      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003470:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003478:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800347a:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003484:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	4a1a      	ldr	r2, [pc, #104]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003490:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003492:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003498:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d114      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd fe36 	bl	8001114 <HAL_GetTick>
 80034a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034aa:	e00a      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fd fe32 	bl	8001114 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e317      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ee      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034da:	d111      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034ea:	400b      	ands	r3, r1
 80034ec:	4901      	ldr	r1, [pc, #4]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
 80034f2:	e00b      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40007000 	.word	0x40007000
 80034fc:	0ffffcff 	.word	0x0ffffcff
 8003500:	4bb0      	ldr	r3, [pc, #704]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4aaf      	ldr	r2, [pc, #700]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003506:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800350a:	6093      	str	r3, [r2, #8]
 800350c:	4bad      	ldr	r3, [pc, #692]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800350e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003518:	49aa      	ldr	r1, [pc, #680]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800351a:	4313      	orrs	r3, r2
 800351c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	d010      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800352a:	4ba6      	ldr	r3, [pc, #664]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800352c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003530:	4aa4      	ldr	r2, [pc, #656]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003536:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800353a:	4ba2      	ldr	r3, [pc, #648]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800353c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	499f      	ldr	r1, [pc, #636]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003558:	4b9a      	ldr	r3, [pc, #616]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003566:	4997      	ldr	r1, [pc, #604]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800357a:	4b92      	ldr	r3, [pc, #584]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003580:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003588:	498e      	ldr	r1, [pc, #568]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800359c:	4b89      	ldr	r3, [pc, #548]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035aa:	4986      	ldr	r1, [pc, #536]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035be:	4b81      	ldr	r3, [pc, #516]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	497d      	ldr	r1, [pc, #500]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035e0:	4b78      	ldr	r3, [pc, #480]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e6:	f023 0203 	bic.w	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	4975      	ldr	r1, [pc, #468]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003602:	4b70      	ldr	r3, [pc, #448]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003608:	f023 020c 	bic.w	r2, r3, #12
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003610:	496c      	ldr	r1, [pc, #432]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003624:	4b67      	ldr	r3, [pc, #412]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003632:	4964      	ldr	r1, [pc, #400]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003646:	4b5f      	ldr	r3, [pc, #380]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003654:	495b      	ldr	r1, [pc, #364]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003668:	4b56      	ldr	r3, [pc, #344]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	4953      	ldr	r1, [pc, #332]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800368a:	4b4e      	ldr	r3, [pc, #312]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800368c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003690:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	494a      	ldr	r1, [pc, #296]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036ac:	4b45      	ldr	r3, [pc, #276]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	4942      	ldr	r1, [pc, #264]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036ce:	4b3d      	ldr	r3, [pc, #244]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036dc:	4939      	ldr	r1, [pc, #228]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036f0:	4b34      	ldr	r3, [pc, #208]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036fe:	4931      	ldr	r1, [pc, #196]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d011      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003712:	4b2c      	ldr	r3, [pc, #176]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003720:	4928      	ldr	r1, [pc, #160]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800372c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003730:	d101      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003732:	2301      	movs	r3, #1
 8003734:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003742:	2301      	movs	r3, #1
 8003744:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003752:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003758:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003760:	4918      	ldr	r1, [pc, #96]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00b      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003774:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003784:	490f      	ldr	r1, [pc, #60]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d005      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800379a:	f040 80d8 	bne.w	800394e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800379e:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a08      	ldr	r2, [pc, #32]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037aa:	f7fd fcb3 	bl	8001114 <HAL_GetTick>
 80037ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037b0:	e00a      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037b2:	f7fd fcaf 	bl	8001114 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b64      	cmp	r3, #100	; 0x64
 80037be:	d903      	bls.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e196      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80037c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037c8:	4b6c      	ldr	r3, [pc, #432]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ee      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d021      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d11d      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037e8:	4b64      	ldr	r3, [pc, #400]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ee:	0c1b      	lsrs	r3, r3, #16
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037f6:	4b61      	ldr	r3, [pc, #388]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fc:	0e1b      	lsrs	r3, r3, #24
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	019a      	lsls	r2, r3, #6
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	041b      	lsls	r3, r3, #16
 800380e:	431a      	orrs	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	061b      	lsls	r3, r3, #24
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	071b      	lsls	r3, r3, #28
 800381c:	4957      	ldr	r1, [pc, #348]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d004      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003842:	2b00      	cmp	r3, #0
 8003844:	d02e      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800384e:	d129      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003850:	4b4a      	ldr	r3, [pc, #296]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003856:	0c1b      	lsrs	r3, r3, #16
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800385e:	4b47      	ldr	r3, [pc, #284]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003864:	0f1b      	lsrs	r3, r3, #28
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	019a      	lsls	r2, r3, #6
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	041b      	lsls	r3, r3, #16
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	061b      	lsls	r3, r3, #24
 800387e:	431a      	orrs	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	071b      	lsls	r3, r3, #28
 8003884:	493d      	ldr	r1, [pc, #244]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800388c:	4b3b      	ldr	r3, [pc, #236]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800388e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003892:	f023 021f 	bic.w	r2, r3, #31
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	3b01      	subs	r3, #1
 800389c:	4937      	ldr	r1, [pc, #220]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d01d      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038b0:	4b32      	ldr	r3, [pc, #200]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b6:	0e1b      	lsrs	r3, r3, #24
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038be:	4b2f      	ldr	r3, [pc, #188]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c4:	0f1b      	lsrs	r3, r3, #28
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	019a      	lsls	r2, r3, #6
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	431a      	orrs	r2, r3
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	431a      	orrs	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	071b      	lsls	r3, r3, #28
 80038e4:	4925      	ldr	r1, [pc, #148]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d011      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	019a      	lsls	r2, r3, #6
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	041b      	lsls	r3, r3, #16
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	061b      	lsls	r3, r3, #24
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	071b      	lsls	r3, r3, #28
 8003914:	4919      	ldr	r1, [pc, #100]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800391c:	4b17      	ldr	r3, [pc, #92]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a16      	ldr	r2, [pc, #88]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003922:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003928:	f7fd fbf4 	bl	8001114 <HAL_GetTick>
 800392c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003930:	f7fd fbf0 	bl	8001114 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	; 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e0d7      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003942:	4b0e      	ldr	r3, [pc, #56]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0f0      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2b01      	cmp	r3, #1
 8003952:	f040 80cd 	bne.w	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a08      	ldr	r2, [pc, #32]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800395c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003962:	f7fd fbd7 	bl	8001114 <HAL_GetTick>
 8003966:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003968:	e00a      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800396a:	f7fd fbd3 	bl	8001114 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b64      	cmp	r3, #100	; 0x64
 8003976:	d903      	bls.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e0ba      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800397c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003980:	4b5e      	ldr	r3, [pc, #376]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800398c:	d0ed      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d02e      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d12a      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039b6:	4b51      	ldr	r3, [pc, #324]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039bc:	0c1b      	lsrs	r3, r3, #16
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039c4:	4b4d      	ldr	r3, [pc, #308]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ca:	0f1b      	lsrs	r3, r3, #28
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	019a      	lsls	r2, r3, #6
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	041b      	lsls	r3, r3, #16
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	061b      	lsls	r3, r3, #24
 80039e4:	431a      	orrs	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	071b      	lsls	r3, r3, #28
 80039ea:	4944      	ldr	r1, [pc, #272]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039f2:	4b42      	ldr	r3, [pc, #264]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	3b01      	subs	r3, #1
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	493d      	ldr	r1, [pc, #244]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d022      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a20:	d11d      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a22:	4b36      	ldr	r3, [pc, #216]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a28:	0e1b      	lsrs	r3, r3, #24
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a30:	4b32      	ldr	r3, [pc, #200]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a36:	0f1b      	lsrs	r3, r3, #28
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	019a      	lsls	r2, r3, #6
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	041b      	lsls	r3, r3, #16
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	061b      	lsls	r3, r3, #24
 8003a50:	431a      	orrs	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	071b      	lsls	r3, r3, #28
 8003a56:	4929      	ldr	r1, [pc, #164]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d028      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a6a:	4b24      	ldr	r3, [pc, #144]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a70:	0e1b      	lsrs	r3, r3, #24
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a78:	4b20      	ldr	r3, [pc, #128]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	0c1b      	lsrs	r3, r3, #16
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	019a      	lsls	r2, r3, #6
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	041b      	lsls	r3, r3, #16
 8003a90:	431a      	orrs	r2, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	061b      	lsls	r3, r3, #24
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	071b      	lsls	r3, r3, #28
 8003a9e:	4917      	ldr	r1, [pc, #92]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003aa6:	4b15      	ldr	r3, [pc, #84]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	4911      	ldr	r1, [pc, #68]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003abc:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0e      	ldr	r2, [pc, #56]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac8:	f7fd fb24 	bl	8001114 <HAL_GetTick>
 8003acc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ad0:	f7fd fb20 	bl	8001114 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e007      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aee:	d1ef      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3720      	adds	r7, #32
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40023800 	.word	0x40023800

08003b00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e040      	b.n	8003b94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fd f8ea 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2224      	movs	r2, #36	; 0x24
 8003b2c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0201 	bic.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f82c 	bl	8003b9c <UART_SetConfig>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d101      	bne.n	8003b4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e022      	b.n	8003b94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 faca 	bl	80040f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fb51 	bl	8004234 <UART_CheckIdleState>
 8003b92:	4603      	mov	r3, r0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	4bb1      	ldr	r3, [pc, #708]	; (8003e90 <UART_SetConfig+0x2f4>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	6939      	ldr	r1, [r7, #16]
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a9f      	ldr	r2, [pc, #636]	; (8003e94 <UART_SetConfig+0x2f8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d121      	bne.n	8003c60 <UART_SetConfig+0xc4>
 8003c1c:	4b9e      	ldr	r3, [pc, #632]	; (8003e98 <UART_SetConfig+0x2fc>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d816      	bhi.n	8003c58 <UART_SetConfig+0xbc>
 8003c2a:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <UART_SetConfig+0x94>)
 8003c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c30:	08003c41 	.word	0x08003c41
 8003c34:	08003c4d 	.word	0x08003c4d
 8003c38:	08003c47 	.word	0x08003c47
 8003c3c:	08003c53 	.word	0x08003c53
 8003c40:	2301      	movs	r3, #1
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e151      	b.n	8003eea <UART_SetConfig+0x34e>
 8003c46:	2302      	movs	r3, #2
 8003c48:	77fb      	strb	r3, [r7, #31]
 8003c4a:	e14e      	b.n	8003eea <UART_SetConfig+0x34e>
 8003c4c:	2304      	movs	r3, #4
 8003c4e:	77fb      	strb	r3, [r7, #31]
 8003c50:	e14b      	b.n	8003eea <UART_SetConfig+0x34e>
 8003c52:	2308      	movs	r3, #8
 8003c54:	77fb      	strb	r3, [r7, #31]
 8003c56:	e148      	b.n	8003eea <UART_SetConfig+0x34e>
 8003c58:	2310      	movs	r3, #16
 8003c5a:	77fb      	strb	r3, [r7, #31]
 8003c5c:	bf00      	nop
 8003c5e:	e144      	b.n	8003eea <UART_SetConfig+0x34e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a8d      	ldr	r2, [pc, #564]	; (8003e9c <UART_SetConfig+0x300>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d134      	bne.n	8003cd4 <UART_SetConfig+0x138>
 8003c6a:	4b8b      	ldr	r3, [pc, #556]	; (8003e98 <UART_SetConfig+0x2fc>)
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c70:	f003 030c 	and.w	r3, r3, #12
 8003c74:	2b0c      	cmp	r3, #12
 8003c76:	d829      	bhi.n	8003ccc <UART_SetConfig+0x130>
 8003c78:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <UART_SetConfig+0xe4>)
 8003c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7e:	bf00      	nop
 8003c80:	08003cb5 	.word	0x08003cb5
 8003c84:	08003ccd 	.word	0x08003ccd
 8003c88:	08003ccd 	.word	0x08003ccd
 8003c8c:	08003ccd 	.word	0x08003ccd
 8003c90:	08003cc1 	.word	0x08003cc1
 8003c94:	08003ccd 	.word	0x08003ccd
 8003c98:	08003ccd 	.word	0x08003ccd
 8003c9c:	08003ccd 	.word	0x08003ccd
 8003ca0:	08003cbb 	.word	0x08003cbb
 8003ca4:	08003ccd 	.word	0x08003ccd
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003ccd 	.word	0x08003ccd
 8003cb0:	08003cc7 	.word	0x08003cc7
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	77fb      	strb	r3, [r7, #31]
 8003cb8:	e117      	b.n	8003eea <UART_SetConfig+0x34e>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	77fb      	strb	r3, [r7, #31]
 8003cbe:	e114      	b.n	8003eea <UART_SetConfig+0x34e>
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	e111      	b.n	8003eea <UART_SetConfig+0x34e>
 8003cc6:	2308      	movs	r3, #8
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e10e      	b.n	8003eea <UART_SetConfig+0x34e>
 8003ccc:	2310      	movs	r3, #16
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	bf00      	nop
 8003cd2:	e10a      	b.n	8003eea <UART_SetConfig+0x34e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a71      	ldr	r2, [pc, #452]	; (8003ea0 <UART_SetConfig+0x304>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d120      	bne.n	8003d20 <UART_SetConfig+0x184>
 8003cde:	4b6e      	ldr	r3, [pc, #440]	; (8003e98 <UART_SetConfig+0x2fc>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d00f      	beq.n	8003d0c <UART_SetConfig+0x170>
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d802      	bhi.n	8003cf6 <UART_SetConfig+0x15a>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <UART_SetConfig+0x164>
 8003cf4:	e010      	b.n	8003d18 <UART_SetConfig+0x17c>
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d005      	beq.n	8003d06 <UART_SetConfig+0x16a>
 8003cfa:	2b30      	cmp	r3, #48	; 0x30
 8003cfc:	d009      	beq.n	8003d12 <UART_SetConfig+0x176>
 8003cfe:	e00b      	b.n	8003d18 <UART_SetConfig+0x17c>
 8003d00:	2300      	movs	r3, #0
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e0f1      	b.n	8003eea <UART_SetConfig+0x34e>
 8003d06:	2302      	movs	r3, #2
 8003d08:	77fb      	strb	r3, [r7, #31]
 8003d0a:	e0ee      	b.n	8003eea <UART_SetConfig+0x34e>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	77fb      	strb	r3, [r7, #31]
 8003d10:	e0eb      	b.n	8003eea <UART_SetConfig+0x34e>
 8003d12:	2308      	movs	r3, #8
 8003d14:	77fb      	strb	r3, [r7, #31]
 8003d16:	e0e8      	b.n	8003eea <UART_SetConfig+0x34e>
 8003d18:	2310      	movs	r3, #16
 8003d1a:	77fb      	strb	r3, [r7, #31]
 8003d1c:	bf00      	nop
 8003d1e:	e0e4      	b.n	8003eea <UART_SetConfig+0x34e>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a5f      	ldr	r2, [pc, #380]	; (8003ea4 <UART_SetConfig+0x308>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d120      	bne.n	8003d6c <UART_SetConfig+0x1d0>
 8003d2a:	4b5b      	ldr	r3, [pc, #364]	; (8003e98 <UART_SetConfig+0x2fc>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d34:	2b40      	cmp	r3, #64	; 0x40
 8003d36:	d00f      	beq.n	8003d58 <UART_SetConfig+0x1bc>
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	d802      	bhi.n	8003d42 <UART_SetConfig+0x1a6>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <UART_SetConfig+0x1b0>
 8003d40:	e010      	b.n	8003d64 <UART_SetConfig+0x1c8>
 8003d42:	2b80      	cmp	r3, #128	; 0x80
 8003d44:	d005      	beq.n	8003d52 <UART_SetConfig+0x1b6>
 8003d46:	2bc0      	cmp	r3, #192	; 0xc0
 8003d48:	d009      	beq.n	8003d5e <UART_SetConfig+0x1c2>
 8003d4a:	e00b      	b.n	8003d64 <UART_SetConfig+0x1c8>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e0cb      	b.n	8003eea <UART_SetConfig+0x34e>
 8003d52:	2302      	movs	r3, #2
 8003d54:	77fb      	strb	r3, [r7, #31]
 8003d56:	e0c8      	b.n	8003eea <UART_SetConfig+0x34e>
 8003d58:	2304      	movs	r3, #4
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	e0c5      	b.n	8003eea <UART_SetConfig+0x34e>
 8003d5e:	2308      	movs	r3, #8
 8003d60:	77fb      	strb	r3, [r7, #31]
 8003d62:	e0c2      	b.n	8003eea <UART_SetConfig+0x34e>
 8003d64:	2310      	movs	r3, #16
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	bf00      	nop
 8003d6a:	e0be      	b.n	8003eea <UART_SetConfig+0x34e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a4d      	ldr	r2, [pc, #308]	; (8003ea8 <UART_SetConfig+0x30c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d124      	bne.n	8003dc0 <UART_SetConfig+0x224>
 8003d76:	4b48      	ldr	r3, [pc, #288]	; (8003e98 <UART_SetConfig+0x2fc>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d84:	d012      	beq.n	8003dac <UART_SetConfig+0x210>
 8003d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8a:	d802      	bhi.n	8003d92 <UART_SetConfig+0x1f6>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d007      	beq.n	8003da0 <UART_SetConfig+0x204>
 8003d90:	e012      	b.n	8003db8 <UART_SetConfig+0x21c>
 8003d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d96:	d006      	beq.n	8003da6 <UART_SetConfig+0x20a>
 8003d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d9c:	d009      	beq.n	8003db2 <UART_SetConfig+0x216>
 8003d9e:	e00b      	b.n	8003db8 <UART_SetConfig+0x21c>
 8003da0:	2300      	movs	r3, #0
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e0a1      	b.n	8003eea <UART_SetConfig+0x34e>
 8003da6:	2302      	movs	r3, #2
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	e09e      	b.n	8003eea <UART_SetConfig+0x34e>
 8003dac:	2304      	movs	r3, #4
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e09b      	b.n	8003eea <UART_SetConfig+0x34e>
 8003db2:	2308      	movs	r3, #8
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e098      	b.n	8003eea <UART_SetConfig+0x34e>
 8003db8:	2310      	movs	r3, #16
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	bf00      	nop
 8003dbe:	e094      	b.n	8003eea <UART_SetConfig+0x34e>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a39      	ldr	r2, [pc, #228]	; (8003eac <UART_SetConfig+0x310>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d124      	bne.n	8003e14 <UART_SetConfig+0x278>
 8003dca:	4b33      	ldr	r3, [pc, #204]	; (8003e98 <UART_SetConfig+0x2fc>)
 8003dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd8:	d012      	beq.n	8003e00 <UART_SetConfig+0x264>
 8003dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dde:	d802      	bhi.n	8003de6 <UART_SetConfig+0x24a>
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <UART_SetConfig+0x258>
 8003de4:	e012      	b.n	8003e0c <UART_SetConfig+0x270>
 8003de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dea:	d006      	beq.n	8003dfa <UART_SetConfig+0x25e>
 8003dec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df0:	d009      	beq.n	8003e06 <UART_SetConfig+0x26a>
 8003df2:	e00b      	b.n	8003e0c <UART_SetConfig+0x270>
 8003df4:	2301      	movs	r3, #1
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	e077      	b.n	8003eea <UART_SetConfig+0x34e>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	77fb      	strb	r3, [r7, #31]
 8003dfe:	e074      	b.n	8003eea <UART_SetConfig+0x34e>
 8003e00:	2304      	movs	r3, #4
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	e071      	b.n	8003eea <UART_SetConfig+0x34e>
 8003e06:	2308      	movs	r3, #8
 8003e08:	77fb      	strb	r3, [r7, #31]
 8003e0a:	e06e      	b.n	8003eea <UART_SetConfig+0x34e>
 8003e0c:	2310      	movs	r3, #16
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	bf00      	nop
 8003e12:	e06a      	b.n	8003eea <UART_SetConfig+0x34e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a25      	ldr	r2, [pc, #148]	; (8003eb0 <UART_SetConfig+0x314>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d124      	bne.n	8003e68 <UART_SetConfig+0x2cc>
 8003e1e:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <UART_SetConfig+0x2fc>)
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e24:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2c:	d012      	beq.n	8003e54 <UART_SetConfig+0x2b8>
 8003e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e32:	d802      	bhi.n	8003e3a <UART_SetConfig+0x29e>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d007      	beq.n	8003e48 <UART_SetConfig+0x2ac>
 8003e38:	e012      	b.n	8003e60 <UART_SetConfig+0x2c4>
 8003e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3e:	d006      	beq.n	8003e4e <UART_SetConfig+0x2b2>
 8003e40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e44:	d009      	beq.n	8003e5a <UART_SetConfig+0x2be>
 8003e46:	e00b      	b.n	8003e60 <UART_SetConfig+0x2c4>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e04d      	b.n	8003eea <UART_SetConfig+0x34e>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	77fb      	strb	r3, [r7, #31]
 8003e52:	e04a      	b.n	8003eea <UART_SetConfig+0x34e>
 8003e54:	2304      	movs	r3, #4
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	e047      	b.n	8003eea <UART_SetConfig+0x34e>
 8003e5a:	2308      	movs	r3, #8
 8003e5c:	77fb      	strb	r3, [r7, #31]
 8003e5e:	e044      	b.n	8003eea <UART_SetConfig+0x34e>
 8003e60:	2310      	movs	r3, #16
 8003e62:	77fb      	strb	r3, [r7, #31]
 8003e64:	bf00      	nop
 8003e66:	e040      	b.n	8003eea <UART_SetConfig+0x34e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a11      	ldr	r2, [pc, #68]	; (8003eb4 <UART_SetConfig+0x318>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d139      	bne.n	8003ee6 <UART_SetConfig+0x34a>
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <UART_SetConfig+0x2fc>)
 8003e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e80:	d027      	beq.n	8003ed2 <UART_SetConfig+0x336>
 8003e82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e86:	d817      	bhi.n	8003eb8 <UART_SetConfig+0x31c>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01c      	beq.n	8003ec6 <UART_SetConfig+0x32a>
 8003e8c:	e027      	b.n	8003ede <UART_SetConfig+0x342>
 8003e8e:	bf00      	nop
 8003e90:	efff69f3 	.word	0xefff69f3
 8003e94:	40011000 	.word	0x40011000
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	40004400 	.word	0x40004400
 8003ea0:	40004800 	.word	0x40004800
 8003ea4:	40004c00 	.word	0x40004c00
 8003ea8:	40005000 	.word	0x40005000
 8003eac:	40011400 	.word	0x40011400
 8003eb0:	40007800 	.word	0x40007800
 8003eb4:	40007c00 	.word	0x40007c00
 8003eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ebc:	d006      	beq.n	8003ecc <UART_SetConfig+0x330>
 8003ebe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ec2:	d009      	beq.n	8003ed8 <UART_SetConfig+0x33c>
 8003ec4:	e00b      	b.n	8003ede <UART_SetConfig+0x342>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	77fb      	strb	r3, [r7, #31]
 8003eca:	e00e      	b.n	8003eea <UART_SetConfig+0x34e>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	77fb      	strb	r3, [r7, #31]
 8003ed0:	e00b      	b.n	8003eea <UART_SetConfig+0x34e>
 8003ed2:	2304      	movs	r3, #4
 8003ed4:	77fb      	strb	r3, [r7, #31]
 8003ed6:	e008      	b.n	8003eea <UART_SetConfig+0x34e>
 8003ed8:	2308      	movs	r3, #8
 8003eda:	77fb      	strb	r3, [r7, #31]
 8003edc:	e005      	b.n	8003eea <UART_SetConfig+0x34e>
 8003ede:	2310      	movs	r3, #16
 8003ee0:	77fb      	strb	r3, [r7, #31]
 8003ee2:	bf00      	nop
 8003ee4:	e001      	b.n	8003eea <UART_SetConfig+0x34e>
 8003ee6:	2310      	movs	r3, #16
 8003ee8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef2:	d17f      	bne.n	8003ff4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003ef4:	7ffb      	ldrb	r3, [r7, #31]
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d85c      	bhi.n	8003fb4 <UART_SetConfig+0x418>
 8003efa:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <UART_SetConfig+0x364>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f25 	.word	0x08003f25
 8003f04:	08003f45 	.word	0x08003f45
 8003f08:	08003f65 	.word	0x08003f65
 8003f0c:	08003fb5 	.word	0x08003fb5
 8003f10:	08003f7d 	.word	0x08003f7d
 8003f14:	08003fb5 	.word	0x08003fb5
 8003f18:	08003fb5 	.word	0x08003fb5
 8003f1c:	08003fb5 	.word	0x08003fb5
 8003f20:	08003f9d 	.word	0x08003f9d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f24:	f7ff f9d6 	bl	80032d4 <HAL_RCC_GetPCLK1Freq>
 8003f28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	005a      	lsls	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	085b      	lsrs	r3, r3, #1
 8003f34:	441a      	add	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	61bb      	str	r3, [r7, #24]
        break;
 8003f42:	e03a      	b.n	8003fba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f44:	f7ff f9da 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 8003f48:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	005a      	lsls	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	085b      	lsrs	r3, r3, #1
 8003f54:	441a      	add	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	61bb      	str	r3, [r7, #24]
        break;
 8003f62:	e02a      	b.n	8003fba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	085a      	lsrs	r2, r3, #1
 8003f6a:	4b5f      	ldr	r3, [pc, #380]	; (80040e8 <UART_SetConfig+0x54c>)
 8003f6c:	4413      	add	r3, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6852      	ldr	r2, [r2, #4]
 8003f72:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	61bb      	str	r3, [r7, #24]
        break;
 8003f7a:	e01e      	b.n	8003fba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f7c:	f7ff f8c6 	bl	800310c <HAL_RCC_GetSysClockFreq>
 8003f80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	005a      	lsls	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	441a      	add	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	61bb      	str	r3, [r7, #24]
        break;
 8003f9a:	e00e      	b.n	8003fba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	61bb      	str	r3, [r7, #24]
        break;
 8003fb2:	e002      	b.n	8003fba <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	75fb      	strb	r3, [r7, #23]
        break;
 8003fb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b0f      	cmp	r3, #15
 8003fbe:	d916      	bls.n	8003fee <UART_SetConfig+0x452>
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc6:	d212      	bcs.n	8003fee <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	f023 030f 	bic.w	r3, r3, #15
 8003fd0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	085b      	lsrs	r3, r3, #1
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	897b      	ldrh	r3, [r7, #10]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	897a      	ldrh	r2, [r7, #10]
 8003fea:	60da      	str	r2, [r3, #12]
 8003fec:	e070      	b.n	80040d0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	75fb      	strb	r3, [r7, #23]
 8003ff2:	e06d      	b.n	80040d0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003ff4:	7ffb      	ldrb	r3, [r7, #31]
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d859      	bhi.n	80040ae <UART_SetConfig+0x512>
 8003ffa:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <UART_SetConfig+0x464>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	08004025 	.word	0x08004025
 8004004:	08004043 	.word	0x08004043
 8004008:	08004061 	.word	0x08004061
 800400c:	080040af 	.word	0x080040af
 8004010:	08004079 	.word	0x08004079
 8004014:	080040af 	.word	0x080040af
 8004018:	080040af 	.word	0x080040af
 800401c:	080040af 	.word	0x080040af
 8004020:	08004097 	.word	0x08004097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004024:	f7ff f956 	bl	80032d4 <HAL_RCC_GetPCLK1Freq>
 8004028:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	085a      	lsrs	r2, r3, #1
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	441a      	add	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	fbb2 f3f3 	udiv	r3, r2, r3
 800403c:	b29b      	uxth	r3, r3
 800403e:	61bb      	str	r3, [r7, #24]
        break;
 8004040:	e038      	b.n	80040b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004042:	f7ff f95b 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 8004046:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	085a      	lsrs	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	441a      	add	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	fbb2 f3f3 	udiv	r3, r2, r3
 800405a:	b29b      	uxth	r3, r3
 800405c:	61bb      	str	r3, [r7, #24]
        break;
 800405e:	e029      	b.n	80040b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	085a      	lsrs	r2, r3, #1
 8004066:	4b21      	ldr	r3, [pc, #132]	; (80040ec <UART_SetConfig+0x550>)
 8004068:	4413      	add	r3, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6852      	ldr	r2, [r2, #4]
 800406e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004072:	b29b      	uxth	r3, r3
 8004074:	61bb      	str	r3, [r7, #24]
        break;
 8004076:	e01d      	b.n	80040b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004078:	f7ff f848 	bl	800310c <HAL_RCC_GetSysClockFreq>
 800407c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	085a      	lsrs	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	441a      	add	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	b29b      	uxth	r3, r3
 8004092:	61bb      	str	r3, [r7, #24]
        break;
 8004094:	e00e      	b.n	80040b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	085b      	lsrs	r3, r3, #1
 800409c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	61bb      	str	r3, [r7, #24]
        break;
 80040ac:	e002      	b.n	80040b4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	75fb      	strb	r3, [r7, #23]
        break;
 80040b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b0f      	cmp	r3, #15
 80040b8:	d908      	bls.n	80040cc <UART_SetConfig+0x530>
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c0:	d204      	bcs.n	80040cc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	e001      	b.n	80040d0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3720      	adds	r7, #32
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	01e84800 	.word	0x01e84800
 80040ec:	00f42400 	.word	0x00f42400

080040f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01a      	beq.n	8004206 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ee:	d10a      	bne.n	8004206 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	605a      	str	r2, [r3, #4]
  }
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af02      	add	r7, sp, #8
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004242:	f7fc ff67 	bl	8001114 <HAL_GetTick>
 8004246:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b08      	cmp	r3, #8
 8004254:	d10e      	bne.n	8004274 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004256:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f814 	bl	8004292 <UART_WaitOnFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e00a      	b.n	800428a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	603b      	str	r3, [r7, #0]
 800429e:	4613      	mov	r3, r2
 80042a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a2:	e05d      	b.n	8004360 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042aa:	d059      	beq.n	8004360 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ac:	f7fc ff32 	bl	8001114 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d302      	bcc.n	80042c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d11b      	bne.n	80042fa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e042      	b.n	8004380 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d02b      	beq.n	8004360 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004316:	d123      	bne.n	8004360 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004320:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004330:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0201 	bic.w	r2, r2, #1
 8004340:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2220      	movs	r2, #32
 800434c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e00f      	b.n	8004380 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69da      	ldr	r2, [r3, #28]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	4013      	ands	r3, r2
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	429a      	cmp	r2, r3
 800436e:	bf0c      	ite	eq
 8004370:	2301      	moveq	r3, #1
 8004372:	2300      	movne	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	429a      	cmp	r2, r3
 800437c:	d092      	beq.n	80042a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004388:	b084      	sub	sp, #16
 800438a:	b580      	push	{r7, lr}
 800438c:	b084      	sub	sp, #16
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	f107 001c 	add.w	r0, r7, #28
 8004396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	2b01      	cmp	r3, #1
 800439e:	d120      	bne.n	80043e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	4b20      	ldr	r3, [pc, #128]	; (8004434 <USB_CoreInit+0xac>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d105      	bne.n	80043d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fa52 	bl	8004880 <USB_CoreReset>
 80043dc:	4603      	mov	r3, r0
 80043de:	73fb      	strb	r3, [r7, #15]
 80043e0:	e010      	b.n	8004404 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fa46 	bl	8004880 <USB_CoreReset>
 80043f4:	4603      	mov	r3, r0
 80043f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004406:	2b01      	cmp	r3, #1
 8004408:	d10b      	bne.n	8004422 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f043 0206 	orr.w	r2, r3, #6
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f043 0220 	orr.w	r2, r3, #32
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004422:	7bfb      	ldrb	r3, [r7, #15]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800442e:	b004      	add	sp, #16
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	ffbdffbf 	.word	0xffbdffbf

08004438 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f023 0201 	bic.w	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b082      	sub	sp, #8
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	460b      	mov	r3, r1
 8004464:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004472:	78fb      	ldrb	r3, [r7, #3]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d106      	bne.n	8004486 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	60da      	str	r2, [r3, #12]
 8004484:	e00b      	b.n	800449e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d106      	bne.n	800449a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60da      	str	r2, [r3, #12]
 8004498:	e001      	b.n	800449e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e003      	b.n	80044a6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800449e:	2032      	movs	r0, #50	; 0x32
 80044a0:	f7fc fe44 	bl	800112c <HAL_Delay>

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044b0:	b084      	sub	sp, #16
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044ca:	2300      	movs	r3, #0
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	e009      	b.n	80044e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	3340      	adds	r3, #64	; 0x40
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	2200      	movs	r2, #0
 80044dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	3301      	adds	r3, #1
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b0e      	cmp	r3, #14
 80044e8:	d9f2      	bls.n	80044d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d11c      	bne.n	800452a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044fe:	f043 0302 	orr.w	r3, r3, #2
 8004502:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	e005      	b.n	8004536 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800453c:	461a      	mov	r2, r3
 800453e:	2300      	movs	r3, #0
 8004540:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004548:	4619      	mov	r1, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004550:	461a      	mov	r2, r3
 8004552:	680b      	ldr	r3, [r1, #0]
 8004554:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004558:	2b01      	cmp	r3, #1
 800455a:	d10c      	bne.n	8004576 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800455c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004562:	2100      	movs	r1, #0
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f959 	bl	800481c <USB_SetDevSpeed>
 800456a:	e018      	b.n	800459e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800456c:	2101      	movs	r1, #1
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f954 	bl	800481c <USB_SetDevSpeed>
 8004574:	e013      	b.n	800459e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004578:	2b03      	cmp	r3, #3
 800457a:	d10c      	bne.n	8004596 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d104      	bne.n	800458c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004582:	2100      	movs	r1, #0
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f949 	bl	800481c <USB_SetDevSpeed>
 800458a:	e008      	b.n	800459e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800458c:	2101      	movs	r1, #1
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f944 	bl	800481c <USB_SetDevSpeed>
 8004594:	e003      	b.n	800459e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004596:	2103      	movs	r1, #3
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f93f 	bl	800481c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800459e:	2110      	movs	r1, #16
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f8f3 	bl	800478c <USB_FlushTxFifo>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f911 	bl	80047d8 <USB_FlushRxFifo>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c6:	461a      	mov	r2, r3
 80045c8:	2300      	movs	r3, #0
 80045ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d2:	461a      	mov	r2, r3
 80045d4:	2300      	movs	r3, #0
 80045d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045de:	461a      	mov	r2, r3
 80045e0:	2300      	movs	r3, #0
 80045e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045e4:	2300      	movs	r3, #0
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	e043      	b.n	8004672 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004600:	d118      	bne.n	8004634 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004614:	461a      	mov	r2, r3
 8004616:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	e013      	b.n	8004646 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462a:	461a      	mov	r2, r3
 800462c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	e008      	b.n	8004646 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004640:	461a      	mov	r2, r3
 8004642:	2300      	movs	r3, #0
 8004644:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004652:	461a      	mov	r2, r3
 8004654:	2300      	movs	r3, #0
 8004656:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004664:	461a      	mov	r2, r3
 8004666:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800466a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	3301      	adds	r3, #1
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	429a      	cmp	r2, r3
 8004678:	d3b7      	bcc.n	80045ea <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800467a:	2300      	movs	r3, #0
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	e043      	b.n	8004708 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004692:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004696:	d118      	bne.n	80046ca <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046aa:	461a      	mov	r2, r3
 80046ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e013      	b.n	80046dc <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c0:	461a      	mov	r2, r3
 80046c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	e008      	b.n	80046dc <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d6:	461a      	mov	r2, r3
 80046d8:	2300      	movs	r3, #0
 80046da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e8:	461a      	mov	r2, r3
 80046ea:	2300      	movs	r3, #0
 80046ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fa:	461a      	mov	r2, r3
 80046fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004700:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	3301      	adds	r3, #1
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	429a      	cmp	r2, r3
 800470e:	d3b7      	bcc.n	8004680 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800471e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004722:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004730:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	2b00      	cmp	r3, #0
 8004736:	d105      	bne.n	8004744 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f043 0210 	orr.w	r2, r3, #16
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699a      	ldr	r2, [r3, #24]
 8004748:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <USB_DevInit+0x2d4>)
 800474a:	4313      	orrs	r3, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	f043 0208 	orr.w	r2, r3, #8
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d105      	bne.n	8004774 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699a      	ldr	r2, [r3, #24]
 800476c:	4b06      	ldr	r3, [pc, #24]	; (8004788 <USB_DevInit+0x2d8>)
 800476e:	4313      	orrs	r3, r2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004774:	7dfb      	ldrb	r3, [r7, #23]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004780:	b004      	add	sp, #16
 8004782:	4770      	bx	lr
 8004784:	803c3800 	.word	0x803c3800
 8004788:	40000004 	.word	0x40000004

0800478c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	019b      	lsls	r3, r3, #6
 800479e:	f043 0220 	orr.w	r2, r3, #32
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3301      	adds	r3, #1
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4a09      	ldr	r2, [pc, #36]	; (80047d4 <USB_FlushTxFifo+0x48>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d901      	bls.n	80047b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e006      	b.n	80047c6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d0f0      	beq.n	80047a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	00030d40 	.word	0x00030d40

080047d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2210      	movs	r2, #16
 80047e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3301      	adds	r3, #1
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4a09      	ldr	r2, [pc, #36]	; (8004818 <USB_FlushRxFifo+0x40>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e006      	b.n	800480a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b10      	cmp	r3, #16
 8004806:	d0f0      	beq.n	80047ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	00030d40 	.word	0x00030d40

0800481c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	68f9      	ldr	r1, [r7, #12]
 8004838:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800483c:	4313      	orrs	r3, r2
 800483e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004868:	f043 0302 	orr.w	r3, r3, #2
 800486c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800486e:	2003      	movs	r0, #3
 8004870:	f7fc fc5c 	bl	800112c <HAL_Delay>

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3301      	adds	r3, #1
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4a13      	ldr	r2, [pc, #76]	; (80048e4 <USB_CoreReset+0x64>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e01b      	b.n	80048d6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	daf2      	bge.n	800488c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f043 0201 	orr.w	r2, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3301      	adds	r3, #1
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <USB_CoreReset+0x64>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d901      	bls.n	80048c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e006      	b.n	80048d6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d0f0      	beq.n	80048b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	00030d40 	.word	0x00030d40

080048e8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
	 IP_ADDRESS[0] = IP_ADDR0;
 80048ee:	4b8b      	ldr	r3, [pc, #556]	; (8004b1c <MX_LWIP_Init+0x234>)
 80048f0:	22c0      	movs	r2, #192	; 0xc0
 80048f2:	701a      	strb	r2, [r3, #0]
	  IP_ADDRESS[1] = IP_ADDR1;
 80048f4:	4b89      	ldr	r3, [pc, #548]	; (8004b1c <MX_LWIP_Init+0x234>)
 80048f6:	22a8      	movs	r2, #168	; 0xa8
 80048f8:	705a      	strb	r2, [r3, #1]
	  IP_ADDRESS[2] = IP_ADDR2;
 80048fa:	4b88      	ldr	r3, [pc, #544]	; (8004b1c <MX_LWIP_Init+0x234>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	709a      	strb	r2, [r3, #2]
	  IP_ADDRESS[3] = IP_ADDR3;
 8004900:	4b86      	ldr	r3, [pc, #536]	; (8004b1c <MX_LWIP_Init+0x234>)
 8004902:	2206      	movs	r2, #6
 8004904:	70da      	strb	r2, [r3, #3]
	  NETMASK_ADDRESS[0] = NETMASK_ADDR0;
 8004906:	4b86      	ldr	r3, [pc, #536]	; (8004b20 <MX_LWIP_Init+0x238>)
 8004908:	22ff      	movs	r2, #255	; 0xff
 800490a:	701a      	strb	r2, [r3, #0]
	  NETMASK_ADDRESS[1] = NETMASK_ADDR1;
 800490c:	4b84      	ldr	r3, [pc, #528]	; (8004b20 <MX_LWIP_Init+0x238>)
 800490e:	22ff      	movs	r2, #255	; 0xff
 8004910:	705a      	strb	r2, [r3, #1]
	  NETMASK_ADDRESS[2] = NETMASK_ADDR2;
 8004912:	4b83      	ldr	r3, [pc, #524]	; (8004b20 <MX_LWIP_Init+0x238>)
 8004914:	22ff      	movs	r2, #255	; 0xff
 8004916:	709a      	strb	r2, [r3, #2]
	  NETMASK_ADDRESS[3] = NETMASK_ADDR3;
 8004918:	4b81      	ldr	r3, [pc, #516]	; (8004b20 <MX_LWIP_Init+0x238>)
 800491a:	2200      	movs	r2, #0
 800491c:	70da      	strb	r2, [r3, #3]
	  GATEWAY_ADDRESS[0] = GW_ADDR0;
 800491e:	4b81      	ldr	r3, [pc, #516]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004920:	22c0      	movs	r2, #192	; 0xc0
 8004922:	701a      	strb	r2, [r3, #0]
	  GATEWAY_ADDRESS[1] = GW_ADDR1;
 8004924:	4b7f      	ldr	r3, [pc, #508]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004926:	22a8      	movs	r2, #168	; 0xa8
 8004928:	705a      	strb	r2, [r3, #1]
	  GATEWAY_ADDRESS[2] = GW_ADDR2;
 800492a:	4b7e      	ldr	r3, [pc, #504]	; (8004b24 <MX_LWIP_Init+0x23c>)
 800492c:	2200      	movs	r2, #0
 800492e:	709a      	strb	r2, [r3, #2]
	  GATEWAY_ADDRESS[3] = GW_ADDR3;
 8004930:	4b7c      	ldr	r3, [pc, #496]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004932:	2201      	movs	r2, #1
 8004934:	70da      	strb	r2, [r3, #3]
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004936:	f000 fc3e 	bl	80051b6 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800493a:	4b78      	ldr	r3, [pc, #480]	; (8004b1c <MX_LWIP_Init+0x234>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	061a      	lsls	r2, r3, #24
 8004940:	4b76      	ldr	r3, [pc, #472]	; (8004b1c <MX_LWIP_Init+0x234>)
 8004942:	785b      	ldrb	r3, [r3, #1]
 8004944:	041b      	lsls	r3, r3, #16
 8004946:	431a      	orrs	r2, r3
 8004948:	4b74      	ldr	r3, [pc, #464]	; (8004b1c <MX_LWIP_Init+0x234>)
 800494a:	789b      	ldrb	r3, [r3, #2]
 800494c:	021b      	lsls	r3, r3, #8
 800494e:	4313      	orrs	r3, r2
 8004950:	4a72      	ldr	r2, [pc, #456]	; (8004b1c <MX_LWIP_Init+0x234>)
 8004952:	78d2      	ldrb	r2, [r2, #3]
 8004954:	4313      	orrs	r3, r2
 8004956:	061a      	lsls	r2, r3, #24
 8004958:	4b70      	ldr	r3, [pc, #448]	; (8004b1c <MX_LWIP_Init+0x234>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	0619      	lsls	r1, r3, #24
 800495e:	4b6f      	ldr	r3, [pc, #444]	; (8004b1c <MX_LWIP_Init+0x234>)
 8004960:	785b      	ldrb	r3, [r3, #1]
 8004962:	041b      	lsls	r3, r3, #16
 8004964:	4319      	orrs	r1, r3
 8004966:	4b6d      	ldr	r3, [pc, #436]	; (8004b1c <MX_LWIP_Init+0x234>)
 8004968:	789b      	ldrb	r3, [r3, #2]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	430b      	orrs	r3, r1
 800496e:	496b      	ldr	r1, [pc, #428]	; (8004b1c <MX_LWIP_Init+0x234>)
 8004970:	78c9      	ldrb	r1, [r1, #3]
 8004972:	430b      	orrs	r3, r1
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800497a:	431a      	orrs	r2, r3
 800497c:	4b67      	ldr	r3, [pc, #412]	; (8004b1c <MX_LWIP_Init+0x234>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	0619      	lsls	r1, r3, #24
 8004982:	4b66      	ldr	r3, [pc, #408]	; (8004b1c <MX_LWIP_Init+0x234>)
 8004984:	785b      	ldrb	r3, [r3, #1]
 8004986:	041b      	lsls	r3, r3, #16
 8004988:	4319      	orrs	r1, r3
 800498a:	4b64      	ldr	r3, [pc, #400]	; (8004b1c <MX_LWIP_Init+0x234>)
 800498c:	789b      	ldrb	r3, [r3, #2]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	430b      	orrs	r3, r1
 8004992:	4962      	ldr	r1, [pc, #392]	; (8004b1c <MX_LWIP_Init+0x234>)
 8004994:	78c9      	ldrb	r1, [r1, #3]
 8004996:	430b      	orrs	r3, r1
 8004998:	0a1b      	lsrs	r3, r3, #8
 800499a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800499e:	431a      	orrs	r2, r3
 80049a0:	4b5e      	ldr	r3, [pc, #376]	; (8004b1c <MX_LWIP_Init+0x234>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	0619      	lsls	r1, r3, #24
 80049a6:	4b5d      	ldr	r3, [pc, #372]	; (8004b1c <MX_LWIP_Init+0x234>)
 80049a8:	785b      	ldrb	r3, [r3, #1]
 80049aa:	041b      	lsls	r3, r3, #16
 80049ac:	4319      	orrs	r1, r3
 80049ae:	4b5b      	ldr	r3, [pc, #364]	; (8004b1c <MX_LWIP_Init+0x234>)
 80049b0:	789b      	ldrb	r3, [r3, #2]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	430b      	orrs	r3, r1
 80049b6:	4959      	ldr	r1, [pc, #356]	; (8004b1c <MX_LWIP_Init+0x234>)
 80049b8:	78c9      	ldrb	r1, [r1, #3]
 80049ba:	430b      	orrs	r3, r1
 80049bc:	0e1b      	lsrs	r3, r3, #24
 80049be:	4313      	orrs	r3, r2
 80049c0:	4a59      	ldr	r2, [pc, #356]	; (8004b28 <MX_LWIP_Init+0x240>)
 80049c2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80049c4:	4b56      	ldr	r3, [pc, #344]	; (8004b20 <MX_LWIP_Init+0x238>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	061a      	lsls	r2, r3, #24
 80049ca:	4b55      	ldr	r3, [pc, #340]	; (8004b20 <MX_LWIP_Init+0x238>)
 80049cc:	785b      	ldrb	r3, [r3, #1]
 80049ce:	041b      	lsls	r3, r3, #16
 80049d0:	431a      	orrs	r2, r3
 80049d2:	4b53      	ldr	r3, [pc, #332]	; (8004b20 <MX_LWIP_Init+0x238>)
 80049d4:	789b      	ldrb	r3, [r3, #2]
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	4313      	orrs	r3, r2
 80049da:	4a51      	ldr	r2, [pc, #324]	; (8004b20 <MX_LWIP_Init+0x238>)
 80049dc:	78d2      	ldrb	r2, [r2, #3]
 80049de:	4313      	orrs	r3, r2
 80049e0:	061a      	lsls	r2, r3, #24
 80049e2:	4b4f      	ldr	r3, [pc, #316]	; (8004b20 <MX_LWIP_Init+0x238>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	0619      	lsls	r1, r3, #24
 80049e8:	4b4d      	ldr	r3, [pc, #308]	; (8004b20 <MX_LWIP_Init+0x238>)
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	041b      	lsls	r3, r3, #16
 80049ee:	4319      	orrs	r1, r3
 80049f0:	4b4b      	ldr	r3, [pc, #300]	; (8004b20 <MX_LWIP_Init+0x238>)
 80049f2:	789b      	ldrb	r3, [r3, #2]
 80049f4:	021b      	lsls	r3, r3, #8
 80049f6:	430b      	orrs	r3, r1
 80049f8:	4949      	ldr	r1, [pc, #292]	; (8004b20 <MX_LWIP_Init+0x238>)
 80049fa:	78c9      	ldrb	r1, [r1, #3]
 80049fc:	430b      	orrs	r3, r1
 80049fe:	021b      	lsls	r3, r3, #8
 8004a00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a04:	431a      	orrs	r2, r3
 8004a06:	4b46      	ldr	r3, [pc, #280]	; (8004b20 <MX_LWIP_Init+0x238>)
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	0619      	lsls	r1, r3, #24
 8004a0c:	4b44      	ldr	r3, [pc, #272]	; (8004b20 <MX_LWIP_Init+0x238>)
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	041b      	lsls	r3, r3, #16
 8004a12:	4319      	orrs	r1, r3
 8004a14:	4b42      	ldr	r3, [pc, #264]	; (8004b20 <MX_LWIP_Init+0x238>)
 8004a16:	789b      	ldrb	r3, [r3, #2]
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	430b      	orrs	r3, r1
 8004a1c:	4940      	ldr	r1, [pc, #256]	; (8004b20 <MX_LWIP_Init+0x238>)
 8004a1e:	78c9      	ldrb	r1, [r1, #3]
 8004a20:	430b      	orrs	r3, r1
 8004a22:	0a1b      	lsrs	r3, r3, #8
 8004a24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	4b3d      	ldr	r3, [pc, #244]	; (8004b20 <MX_LWIP_Init+0x238>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	0619      	lsls	r1, r3, #24
 8004a30:	4b3b      	ldr	r3, [pc, #236]	; (8004b20 <MX_LWIP_Init+0x238>)
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	041b      	lsls	r3, r3, #16
 8004a36:	4319      	orrs	r1, r3
 8004a38:	4b39      	ldr	r3, [pc, #228]	; (8004b20 <MX_LWIP_Init+0x238>)
 8004a3a:	789b      	ldrb	r3, [r3, #2]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	4937      	ldr	r1, [pc, #220]	; (8004b20 <MX_LWIP_Init+0x238>)
 8004a42:	78c9      	ldrb	r1, [r1, #3]
 8004a44:	430b      	orrs	r3, r1
 8004a46:	0e1b      	lsrs	r3, r3, #24
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	4a38      	ldr	r2, [pc, #224]	; (8004b2c <MX_LWIP_Init+0x244>)
 8004a4c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004a4e:	4b35      	ldr	r3, [pc, #212]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	061a      	lsls	r2, r3, #24
 8004a54:	4b33      	ldr	r3, [pc, #204]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004a56:	785b      	ldrb	r3, [r3, #1]
 8004a58:	041b      	lsls	r3, r3, #16
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	4b31      	ldr	r3, [pc, #196]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004a5e:	789b      	ldrb	r3, [r3, #2]
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	4313      	orrs	r3, r2
 8004a64:	4a2f      	ldr	r2, [pc, #188]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004a66:	78d2      	ldrb	r2, [r2, #3]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	061a      	lsls	r2, r3, #24
 8004a6c:	4b2d      	ldr	r3, [pc, #180]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	0619      	lsls	r1, r3, #24
 8004a72:	4b2c      	ldr	r3, [pc, #176]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004a74:	785b      	ldrb	r3, [r3, #1]
 8004a76:	041b      	lsls	r3, r3, #16
 8004a78:	4319      	orrs	r1, r3
 8004a7a:	4b2a      	ldr	r3, [pc, #168]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004a7c:	789b      	ldrb	r3, [r3, #2]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	430b      	orrs	r3, r1
 8004a82:	4928      	ldr	r1, [pc, #160]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004a84:	78c9      	ldrb	r1, [r1, #3]
 8004a86:	430b      	orrs	r3, r1
 8004a88:	021b      	lsls	r3, r3, #8
 8004a8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	0619      	lsls	r1, r3, #24
 8004a96:	4b23      	ldr	r3, [pc, #140]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004a98:	785b      	ldrb	r3, [r3, #1]
 8004a9a:	041b      	lsls	r3, r3, #16
 8004a9c:	4319      	orrs	r1, r3
 8004a9e:	4b21      	ldr	r3, [pc, #132]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004aa0:	789b      	ldrb	r3, [r3, #2]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	491f      	ldr	r1, [pc, #124]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004aa8:	78c9      	ldrb	r1, [r1, #3]
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	0a1b      	lsrs	r3, r3, #8
 8004aae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	0619      	lsls	r1, r3, #24
 8004aba:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004abc:	785b      	ldrb	r3, [r3, #1]
 8004abe:	041b      	lsls	r3, r3, #16
 8004ac0:	4319      	orrs	r1, r3
 8004ac2:	4b18      	ldr	r3, [pc, #96]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004ac4:	789b      	ldrb	r3, [r3, #2]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	4916      	ldr	r1, [pc, #88]	; (8004b24 <MX_LWIP_Init+0x23c>)
 8004acc:	78c9      	ldrb	r1, [r1, #3]
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	0e1b      	lsrs	r3, r3, #24
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	4a16      	ldr	r2, [pc, #88]	; (8004b30 <MX_LWIP_Init+0x248>)
 8004ad6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004ad8:	4b16      	ldr	r3, [pc, #88]	; (8004b34 <MX_LWIP_Init+0x24c>)
 8004ada:	9302      	str	r3, [sp, #8]
 8004adc:	4b16      	ldr	r3, [pc, #88]	; (8004b38 <MX_LWIP_Init+0x250>)
 8004ade:	9301      	str	r3, [sp, #4]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	4b12      	ldr	r3, [pc, #72]	; (8004b30 <MX_LWIP_Init+0x248>)
 8004ae6:	4a11      	ldr	r2, [pc, #68]	; (8004b2c <MX_LWIP_Init+0x244>)
 8004ae8:	490f      	ldr	r1, [pc, #60]	; (8004b28 <MX_LWIP_Init+0x240>)
 8004aea:	4814      	ldr	r0, [pc, #80]	; (8004b3c <MX_LWIP_Init+0x254>)
 8004aec:	f001 f808 	bl	8005b00 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004af0:	4812      	ldr	r0, [pc, #72]	; (8004b3c <MX_LWIP_Init+0x254>)
 8004af2:	f001 f9b5 	bl	8005e60 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004af6:	4b11      	ldr	r3, [pc, #68]	; (8004b3c <MX_LWIP_Init+0x254>)
 8004af8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004afc:	089b      	lsrs	r3, r3, #2
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004b08:	480c      	ldr	r0, [pc, #48]	; (8004b3c <MX_LWIP_Init+0x254>)
 8004b0a:	f001 f9b9 	bl	8005e80 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004b0e:	e002      	b.n	8004b16 <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 8004b10:	480a      	ldr	r0, [pc, #40]	; (8004b3c <MX_LWIP_Init+0x254>)
 8004b12:	f001 fa21 	bl	8005f58 <netif_set_down>
}
 8004b16:	bf00      	nop
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	2000088c 	.word	0x2000088c
 8004b20:	20000888 	.word	0x20000888
 8004b24:	20000850 	.word	0x20000850
 8004b28:	20000884 	.word	0x20000884
 8004b2c:	20000890 	.word	0x20000890
 8004b30:	20000894 	.word	0x20000894
 8004b34:	0800ef55 	.word	0x0800ef55
 8004b38:	080050f1 	.word	0x080050f1
 8004b3c:	20000854 	.word	0x20000854

08004b40 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08e      	sub	sp, #56	; 0x38
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	605a      	str	r2, [r3, #4]
 8004b52:	609a      	str	r2, [r3, #8]
 8004b54:	60da      	str	r2, [r3, #12]
 8004b56:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a52      	ldr	r2, [pc, #328]	; (8004ca8 <HAL_ETH_MspInit+0x168>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	f040 809e 	bne.w	8004ca0 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004b64:	4b51      	ldr	r3, [pc, #324]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	4a50      	ldr	r2, [pc, #320]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004b6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b70:	4b4e      	ldr	r3, [pc, #312]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b78:	623b      	str	r3, [r7, #32]
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	4b4b      	ldr	r3, [pc, #300]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	4a4a      	ldr	r2, [pc, #296]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004b82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b86:	6313      	str	r3, [r2, #48]	; 0x30
 8004b88:	4b48      	ldr	r3, [pc, #288]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b90:	61fb      	str	r3, [r7, #28]
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4b45      	ldr	r3, [pc, #276]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	4a44      	ldr	r2, [pc, #272]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004b9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba0:	4b42      	ldr	r3, [pc, #264]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bac:	4b3f      	ldr	r3, [pc, #252]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	4a3e      	ldr	r2, [pc, #248]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004bb2:	f043 0304 	orr.w	r3, r3, #4
 8004bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb8:	4b3c      	ldr	r3, [pc, #240]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bc4:	4b39      	ldr	r3, [pc, #228]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	4a38      	ldr	r2, [pc, #224]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd0:	4b36      	ldr	r3, [pc, #216]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	613b      	str	r3, [r7, #16]
 8004bda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bdc:	4b33      	ldr	r3, [pc, #204]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	4a32      	ldr	r2, [pc, #200]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004be2:	f043 0302 	orr.w	r3, r3, #2
 8004be6:	6313      	str	r3, [r2, #48]	; 0x30
 8004be8:	4b30      	ldr	r3, [pc, #192]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004bf4:	4b2d      	ldr	r3, [pc, #180]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	4a2c      	ldr	r2, [pc, #176]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8004c00:	4b2a      	ldr	r3, [pc, #168]	; (8004cac <HAL_ETH_MspInit+0x16c>)
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004c0c:	2332      	movs	r3, #50	; 0x32
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c10:	2302      	movs	r3, #2
 8004c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c1c:	230b      	movs	r3, #11
 8004c1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c24:	4619      	mov	r1, r3
 8004c26:	4822      	ldr	r0, [pc, #136]	; (8004cb0 <HAL_ETH_MspInit+0x170>)
 8004c28:	f7fd fbac 	bl	8002384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004c2c:	2386      	movs	r3, #134	; 0x86
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c30:	2302      	movs	r3, #2
 8004c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c3c:	230b      	movs	r3, #11
 8004c3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c44:	4619      	mov	r1, r3
 8004c46:	481b      	ldr	r0, [pc, #108]	; (8004cb4 <HAL_ETH_MspInit+0x174>)
 8004c48:	f7fd fb9c 	bl	8002384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c52:	2302      	movs	r3, #2
 8004c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c5e:	230b      	movs	r3, #11
 8004c60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c66:	4619      	mov	r1, r3
 8004c68:	4813      	ldr	r0, [pc, #76]	; (8004cb8 <HAL_ETH_MspInit+0x178>)
 8004c6a:	f7fd fb8b 	bl	8002384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004c6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c74:	2302      	movs	r3, #2
 8004c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c80:	230b      	movs	r3, #11
 8004c82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c88:	4619      	mov	r1, r3
 8004c8a:	480c      	ldr	r0, [pc, #48]	; (8004cbc <HAL_ETH_MspInit+0x17c>)
 8004c8c:	f7fd fb7a 	bl	8002384 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8004c90:	2200      	movs	r2, #0
 8004c92:	2100      	movs	r1, #0
 8004c94:	203d      	movs	r0, #61	; 0x3d
 8004c96:	f7fc fb46 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004c9a:	203d      	movs	r0, #61	; 0x3d
 8004c9c:	f7fc fb5f 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004ca0:	bf00      	nop
 8004ca2:	3738      	adds	r7, #56	; 0x38
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40028000 	.word	0x40028000
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	40020800 	.word	0x40020800
 8004cb4:	40020000 	.word	0x40020000
 8004cb8:	40020400 	.word	0x40020400
 8004cbc:	40021800 	.word	0x40021800

08004cc0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004ccc:	4b49      	ldr	r3, [pc, #292]	; (8004df4 <low_level_init+0x134>)
 8004cce:	4a4a      	ldr	r2, [pc, #296]	; (8004df8 <low_level_init+0x138>)
 8004cd0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004cd2:	4b48      	ldr	r3, [pc, #288]	; (8004df4 <low_level_init+0x134>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004cd8:	4b46      	ldr	r3, [pc, #280]	; (8004df4 <low_level_init+0x134>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004ce2:	2380      	movs	r3, #128	; 0x80
 8004ce4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004ce6:	23e1      	movs	r3, #225	; 0xe1
 8004ce8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004cea:	2300      	movs	r3, #0
 8004cec:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004cf6:	4a3f      	ldr	r2, [pc, #252]	; (8004df4 <low_level_init+0x134>)
 8004cf8:	f107 0308 	add.w	r3, r7, #8
 8004cfc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004cfe:	4b3d      	ldr	r3, [pc, #244]	; (8004df4 <low_level_init+0x134>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004d04:	4b3b      	ldr	r3, [pc, #236]	; (8004df4 <low_level_init+0x134>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004d0a:	4b3a      	ldr	r3, [pc, #232]	; (8004df4 <low_level_init+0x134>)
 8004d0c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004d10:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004d12:	4838      	ldr	r0, [pc, #224]	; (8004df4 <low_level_init+0x134>)
 8004d14:	f7fc fb3e 	bl	8001394 <HAL_ETH_Init>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004d1c:	7dfb      	ldrb	r3, [r7, #23]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d108      	bne.n	8004d34 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004d28:	f043 0304 	orr.w	r3, r3, #4
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004d34:	2304      	movs	r3, #4
 8004d36:	4a31      	ldr	r2, [pc, #196]	; (8004dfc <low_level_init+0x13c>)
 8004d38:	4931      	ldr	r1, [pc, #196]	; (8004e00 <low_level_init+0x140>)
 8004d3a:	482e      	ldr	r0, [pc, #184]	; (8004df4 <low_level_init+0x134>)
 8004d3c:	f7fc fcc6 	bl	80016cc <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004d40:	2304      	movs	r3, #4
 8004d42:	4a30      	ldr	r2, [pc, #192]	; (8004e04 <low_level_init+0x144>)
 8004d44:	4930      	ldr	r1, [pc, #192]	; (8004e08 <low_level_init+0x148>)
 8004d46:	482b      	ldr	r0, [pc, #172]	; (8004df4 <low_level_init+0x134>)
 8004d48:	f7fc fd29 	bl	800179e <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2206      	movs	r2, #6
 8004d50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004d54:	4b27      	ldr	r3, [pc, #156]	; (8004df4 <low_level_init+0x134>)
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	781a      	ldrb	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004d60:	4b24      	ldr	r3, [pc, #144]	; (8004df4 <low_level_init+0x134>)
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	785a      	ldrb	r2, [r3, #1]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004d6c:	4b21      	ldr	r3, [pc, #132]	; (8004df4 <low_level_init+0x134>)
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	789a      	ldrb	r2, [r3, #2]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004d78:	4b1e      	ldr	r3, [pc, #120]	; (8004df4 <low_level_init+0x134>)
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	78da      	ldrb	r2, [r3, #3]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004d84:	4b1b      	ldr	r3, [pc, #108]	; (8004df4 <low_level_init+0x134>)
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	791a      	ldrb	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004d90:	4b18      	ldr	r3, [pc, #96]	; (8004df4 <low_level_init+0x134>)
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	795a      	ldrb	r2, [r3, #5]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004da2:	841a      	strh	r2, [r3, #32]
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004daa:	f043 030a 	orr.w	r3, r3, #10
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004db6:	480f      	ldr	r0, [pc, #60]	; (8004df4 <low_level_init+0x134>)
 8004db8:	f7fd f81f 	bl	8001dfa <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004dbc:	f107 0310 	add.w	r3, r7, #16
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	211d      	movs	r1, #29
 8004dc4:	480b      	ldr	r0, [pc, #44]	; (8004df4 <low_level_init+0x134>)
 8004dc6:	f7fc ff4a 	bl	8001c5e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f043 030b 	orr.w	r3, r3, #11
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	211d      	movs	r1, #29
 8004dd8:	4806      	ldr	r0, [pc, #24]	; (8004df4 <low_level_init+0x134>)
 8004dda:	f7fc ffa8 	bl	8001d2e <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004dde:	f107 0310 	add.w	r3, r7, #16
 8004de2:	461a      	mov	r2, r3
 8004de4:	211d      	movs	r1, #29
 8004de6:	4803      	ldr	r0, [pc, #12]	; (8004df4 <low_level_init+0x134>)
 8004de8:	f7fc ff39 	bl	8001c5e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8004dec:	bf00      	nop
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	20002168 	.word	0x20002168
 8004df8:	40028000 	.word	0x40028000
 8004dfc:	200021b0 	.word	0x200021b0
 8004e00:	20000898 	.word	0x20000898
 8004e04:	20000918 	.word	0x20000918
 8004e08:	200020e8 	.word	0x200020e8

08004e0c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08a      	sub	sp, #40	; 0x28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004e16:	4b4b      	ldr	r3, [pc, #300]	; (8004f44 <low_level_output+0x138>)
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004e2e:	4b45      	ldr	r3, [pc, #276]	; (8004f44 <low_level_output+0x138>)
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	623b      	str	r3, [r7, #32]
 8004e3c:	e05a      	b.n	8004ef4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	da03      	bge.n	8004e4e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004e46:	23f8      	movs	r3, #248	; 0xf8
 8004e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004e4c:	e05c      	b.n	8004f08 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	895b      	ldrh	r3, [r3, #10]
 8004e52:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004e58:	e02f      	b.n	8004eba <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	18d0      	adds	r0, r2, r3
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	18d1      	adds	r1, r2, r3
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004e6e:	1a9b      	subs	r3, r3, r2
 8004e70:	461a      	mov	r2, r3
 8004e72:	f00a f978 	bl	800f166 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	da03      	bge.n	8004e8c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004e84:	23f8      	movs	r3, #248	; 0xf8
 8004e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004e8a:	e03d      	b.n	8004f08 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004e9c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004ea8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004eb4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d8c8      	bhi.n	8004e5a <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	18d0      	adds	r0, r2, r3
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	f00a f944 	bl	800f166 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4413      	add	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	623b      	str	r3, [r7, #32]
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1a1      	bne.n	8004e3e <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004efa:	6979      	ldr	r1, [r7, #20]
 8004efc:	4811      	ldr	r0, [pc, #68]	; (8004f44 <low_level_output+0x138>)
 8004efe:	f7fc fcbb 	bl	8001878 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004f08:	4b0e      	ldr	r3, [pc, #56]	; (8004f44 <low_level_output+0x138>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	f241 0314 	movw	r3, #4116	; 0x1014
 8004f10:	4413      	add	r3, r2
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00d      	beq.n	8004f38 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004f1c:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <low_level_output+0x138>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	f241 0314 	movw	r3, #4116	; 0x1014
 8004f24:	4413      	add	r3, r2
 8004f26:	2220      	movs	r2, #32
 8004f28:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004f2a:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <low_level_output+0x138>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	f241 0304 	movw	r3, #4100	; 0x1004
 8004f32:	4413      	add	r3, r2
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004f38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3728      	adds	r7, #40	; 0x28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20002168 	.word	0x20002168

08004f48 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08c      	sub	sp, #48	; 0x30
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004f54:	2300      	movs	r3, #0
 8004f56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004f60:	2300      	movs	r3, #0
 8004f62:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004f6c:	484f      	ldr	r0, [pc, #316]	; (80050ac <low_level_input+0x164>)
 8004f6e:	f7fc fd6d 	bl	8001a4c <HAL_ETH_GetReceivedFrame>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <low_level_input+0x34>
  
    return NULL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	e092      	b.n	80050a2 <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004f7c:	4b4b      	ldr	r3, [pc, #300]	; (80050ac <low_level_input+0x164>)
 8004f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f80:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004f82:	4b4a      	ldr	r3, [pc, #296]	; (80050ac <low_level_input+0x164>)
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8004f88:	89fb      	ldrh	r3, [r7, #14]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d007      	beq.n	8004f9e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004f8e:	89fb      	ldrh	r3, [r7, #14]
 8004f90:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004f94:	4619      	mov	r1, r3
 8004f96:	2000      	movs	r0, #0
 8004f98:	f001 f89a 	bl	80060d0 <pbuf_alloc>
 8004f9c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d04b      	beq.n	800503c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004fa4:	4b41      	ldr	r3, [pc, #260]	; (80050ac <low_level_input+0x164>)
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb2:	e040      	b.n	8005036 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	895b      	ldrh	r3, [r3, #10]
 8004fb8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004fbe:	e021      	b.n	8005004 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	18d0      	adds	r0, r2, r3
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	18d1      	adds	r1, r2, r3
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004fd4:	1a9b      	subs	r3, r3, r2
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f00a f8c5 	bl	800f166 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	4413      	add	r3, r2
 8004fee:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004ff2:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004ffe:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	4413      	add	r3, r2
 800500a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800500e:	4293      	cmp	r3, r2
 8005010:	d8d6      	bhi.n	8004fc0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	18d0      	adds	r0, r2, r3
 800501a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	4413      	add	r3, r2
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4619      	mov	r1, r3
 8005024:	f00a f89f 	bl	800f166 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	4413      	add	r3, r2
 800502e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	62bb      	str	r3, [r7, #40]	; 0x28
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1bb      	bne.n	8004fb4 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800503c:	4b1b      	ldr	r3, [pc, #108]	; (80050ac <low_level_input+0x164>)
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005042:	2300      	movs	r3, #0
 8005044:	613b      	str	r3, [r7, #16]
 8005046:	e00b      	b.n	8005060 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	3301      	adds	r3, #1
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	4b12      	ldr	r3, [pc, #72]	; (80050ac <low_level_input+0x164>)
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	429a      	cmp	r2, r3
 8005068:	d3ee      	bcc.n	8005048 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800506a:	4b10      	ldr	r3, [pc, #64]	; (80050ac <low_level_input+0x164>)
 800506c:	2200      	movs	r2, #0
 800506e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8005070:	4b0e      	ldr	r3, [pc, #56]	; (80050ac <low_level_input+0x164>)
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	f241 0314 	movw	r3, #4116	; 0x1014
 8005078:	4413      	add	r3, r2
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00d      	beq.n	80050a0 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005084:	4b09      	ldr	r3, [pc, #36]	; (80050ac <low_level_input+0x164>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	f241 0314 	movw	r3, #4116	; 0x1014
 800508c:	4413      	add	r3, r2
 800508e:	2280      	movs	r2, #128	; 0x80
 8005090:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005092:	4b06      	ldr	r3, [pc, #24]	; (80050ac <low_level_input+0x164>)
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	f241 0308 	movw	r3, #4104	; 0x1008
 800509a:	4413      	add	r3, r2
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]
  }
  return p;
 80050a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3730      	adds	r7, #48	; 0x30
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20002168 	.word	0x20002168

080050b0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff ff45 	bl	8004f48 <low_level_input>
 80050be:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d010      	beq.n	80050e8 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	4798      	blx	r3
 80050d0:	4603      	mov	r3, r0
 80050d2:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 80050d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d006      	beq.n	80050ea <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f001 fad7 	bl	8006690 <pbuf_free>
    p = NULL;    
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	e000      	b.n	80050ea <ethernetif_input+0x3a>
  if (p == NULL) return;
 80050e8:	bf00      	nop
  }
}
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <ethernetif_init+0x1c>
 80050fe:	4b0e      	ldr	r3, [pc, #56]	; (8005138 <ethernetif_init+0x48>)
 8005100:	f240 2217 	movw	r2, #535	; 0x217
 8005104:	490d      	ldr	r1, [pc, #52]	; (800513c <ethernetif_init+0x4c>)
 8005106:	480e      	ldr	r0, [pc, #56]	; (8005140 <ethernetif_init+0x50>)
 8005108:	f00a f840 	bl	800f18c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2273      	movs	r2, #115	; 0x73
 8005110:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2274      	movs	r2, #116	; 0x74
 8005118:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a09      	ldr	r2, [pc, #36]	; (8005144 <ethernetif_init+0x54>)
 8005120:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a08      	ldr	r2, [pc, #32]	; (8005148 <ethernetif_init+0x58>)
 8005126:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff fdc9 	bl	8004cc0 <low_level_init>

  return ERR_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	0800ffe4 	.word	0x0800ffe4
 800513c:	08010000 	.word	0x08010000
 8005140:	08010010 	.word	0x08010010
 8005144:	0800d425 	.word	0x0800d425
 8005148:	08004e0d 	.word	0x08004e0d

0800514c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005150:	f7fb ffe0 	bl	8001114 <HAL_GetTick>
 8005154:	4603      	mov	r3, r0
}
 8005156:	4618      	mov	r0, r3
 8005158:	bd80      	pop	{r7, pc}

0800515a <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	4603      	mov	r3, r0
 8005162:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	b21a      	sxth	r2, r3
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	0a1b      	lsrs	r3, r3, #8
 800516e:	b29b      	uxth	r3, r3
 8005170:	b21b      	sxth	r3, r3
 8005172:	4313      	orrs	r3, r2
 8005174:	b21b      	sxth	r3, r3
 8005176:	b29b      	uxth	r3, r3
}
 8005178:	4618      	mov	r0, r3
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	061a      	lsls	r2, r3, #24
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	0a1b      	lsrs	r3, r3, #8
 800519e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	0e1b      	lsrs	r3, r3, #24
 80051a8:	4313      	orrs	r3, r2
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80051bc:	2300      	movs	r3, #0
 80051be:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80051c0:	f000 f8d4 	bl	800536c <mem_init>
  memp_init();
 80051c4:	f000 fbda 	bl	800597c <memp_init>
  pbuf_init();
  netif_init();
 80051c8:	f000 fc92 	bl	8005af0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80051cc:	f007 f834 	bl	800c238 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80051d0:	f001 fd8e 	bl	8006cf0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80051d4:	f006 ffa8 	bl	800c128 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80051d8:	bf00      	nop
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80051ea:	4b05      	ldr	r3, [pc, #20]	; (8005200 <ptr_to_mem+0x20>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	4413      	add	r3, r2
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	20000234 	.word	0x20000234

08005204 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a05      	ldr	r2, [pc, #20]	; (8005224 <mem_to_ptr+0x20>)
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	1a9b      	subs	r3, r3, r2
 8005214:	b29b      	uxth	r3, r3
}
 8005216:	4618      	mov	r0, r3
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20000234 	.word	0x20000234

08005228 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005228:	b590      	push	{r4, r7, lr}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005230:	4b45      	ldr	r3, [pc, #276]	; (8005348 <plug_holes+0x120>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	429a      	cmp	r2, r3
 8005238:	d206      	bcs.n	8005248 <plug_holes+0x20>
 800523a:	4b44      	ldr	r3, [pc, #272]	; (800534c <plug_holes+0x124>)
 800523c:	f240 12df 	movw	r2, #479	; 0x1df
 8005240:	4943      	ldr	r1, [pc, #268]	; (8005350 <plug_holes+0x128>)
 8005242:	4844      	ldr	r0, [pc, #272]	; (8005354 <plug_holes+0x12c>)
 8005244:	f009 ffa2 	bl	800f18c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005248:	4b43      	ldr	r3, [pc, #268]	; (8005358 <plug_holes+0x130>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	429a      	cmp	r2, r3
 8005250:	d306      	bcc.n	8005260 <plug_holes+0x38>
 8005252:	4b3e      	ldr	r3, [pc, #248]	; (800534c <plug_holes+0x124>)
 8005254:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005258:	4940      	ldr	r1, [pc, #256]	; (800535c <plug_holes+0x134>)
 800525a:	483e      	ldr	r0, [pc, #248]	; (8005354 <plug_holes+0x12c>)
 800525c:	f009 ff96 	bl	800f18c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	791b      	ldrb	r3, [r3, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d006      	beq.n	8005276 <plug_holes+0x4e>
 8005268:	4b38      	ldr	r3, [pc, #224]	; (800534c <plug_holes+0x124>)
 800526a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800526e:	493c      	ldr	r1, [pc, #240]	; (8005360 <plug_holes+0x138>)
 8005270:	4838      	ldr	r0, [pc, #224]	; (8005354 <plug_holes+0x12c>)
 8005272:	f009 ff8b 	bl	800f18c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800527e:	d906      	bls.n	800528e <plug_holes+0x66>
 8005280:	4b32      	ldr	r3, [pc, #200]	; (800534c <plug_holes+0x124>)
 8005282:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005286:	4937      	ldr	r1, [pc, #220]	; (8005364 <plug_holes+0x13c>)
 8005288:	4832      	ldr	r0, [pc, #200]	; (8005354 <plug_holes+0x12c>)
 800528a:	f009 ff7f 	bl	800f18c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff ffa4 	bl	80051e0 <ptr_to_mem>
 8005298:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d024      	beq.n	80052ec <plug_holes+0xc4>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	791b      	ldrb	r3, [r3, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d120      	bne.n	80052ec <plug_holes+0xc4>
 80052aa:	4b2b      	ldr	r3, [pc, #172]	; (8005358 <plug_holes+0x130>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d01b      	beq.n	80052ec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80052b4:	4b2c      	ldr	r3, [pc, #176]	; (8005368 <plug_holes+0x140>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d102      	bne.n	80052c4 <plug_holes+0x9c>
      lfree = mem;
 80052be:	4a2a      	ldr	r2, [pc, #168]	; (8005368 <plug_holes+0x140>)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	881a      	ldrh	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80052d4:	d00a      	beq.n	80052ec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff ff80 	bl	80051e0 <ptr_to_mem>
 80052e0:	4604      	mov	r4, r0
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff ff8e 	bl	8005204 <mem_to_ptr>
 80052e8:	4603      	mov	r3, r0
 80052ea:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	885b      	ldrh	r3, [r3, #2]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff ff75 	bl	80051e0 <ptr_to_mem>
 80052f6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d01f      	beq.n	8005340 <plug_holes+0x118>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	791b      	ldrb	r3, [r3, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d11b      	bne.n	8005340 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005308:	4b17      	ldr	r3, [pc, #92]	; (8005368 <plug_holes+0x140>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	429a      	cmp	r2, r3
 8005310:	d102      	bne.n	8005318 <plug_holes+0xf0>
      lfree = pmem;
 8005312:	4a15      	ldr	r2, [pc, #84]	; (8005368 <plug_holes+0x140>)
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	881a      	ldrh	r2, [r3, #0]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005328:	d00a      	beq.n	8005340 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff ff56 	bl	80051e0 <ptr_to_mem>
 8005334:	4604      	mov	r4, r0
 8005336:	68b8      	ldr	r0, [r7, #8]
 8005338:	f7ff ff64 	bl	8005204 <mem_to_ptr>
 800533c:	4603      	mov	r3, r0
 800533e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	bd90      	pop	{r4, r7, pc}
 8005348:	20000234 	.word	0x20000234
 800534c:	08010038 	.word	0x08010038
 8005350:	08010068 	.word	0x08010068
 8005354:	08010080 	.word	0x08010080
 8005358:	20000238 	.word	0x20000238
 800535c:	080100a8 	.word	0x080100a8
 8005360:	080100c4 	.word	0x080100c4
 8005364:	080100e0 	.word	0x080100e0
 8005368:	2000023c 	.word	0x2000023c

0800536c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005372:	4b18      	ldr	r3, [pc, #96]	; (80053d4 <mem_init+0x68>)
 8005374:	3303      	adds	r3, #3
 8005376:	f023 0303 	bic.w	r3, r3, #3
 800537a:	461a      	mov	r2, r3
 800537c:	4b16      	ldr	r3, [pc, #88]	; (80053d8 <mem_init+0x6c>)
 800537e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005380:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <mem_init+0x6c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800538c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800539a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800539e:	f7ff ff1f 	bl	80051e0 <ptr_to_mem>
 80053a2:	4602      	mov	r2, r0
 80053a4:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <mem_init+0x70>)
 80053a6:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80053a8:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <mem_init+0x70>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2201      	movs	r2, #1
 80053ae:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <mem_init+0x70>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80053b8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80053ba:	4b08      	ldr	r3, [pc, #32]	; (80053dc <mem_init+0x70>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80053c2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <mem_init+0x6c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a05      	ldr	r2, [pc, #20]	; (80053e0 <mem_init+0x74>)
 80053ca:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	20003998 	.word	0x20003998
 80053d8:	20000234 	.word	0x20000234
 80053dc:	20000238 	.word	0x20000238
 80053e0:	2000023c 	.word	0x2000023c

080053e4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff ff09 	bl	8005204 <mem_to_ptr>
 80053f2:	4603      	mov	r3, r0
 80053f4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff fef0 	bl	80051e0 <ptr_to_mem>
 8005400:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	885b      	ldrh	r3, [r3, #2]
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff feea 	bl	80051e0 <ptr_to_mem>
 800540c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005416:	d818      	bhi.n	800544a <mem_link_valid+0x66>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	885b      	ldrh	r3, [r3, #2]
 800541c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005420:	d813      	bhi.n	800544a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005426:	8afa      	ldrh	r2, [r7, #22]
 8005428:	429a      	cmp	r2, r3
 800542a:	d004      	beq.n	8005436 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	8afa      	ldrh	r2, [r7, #22]
 8005432:	429a      	cmp	r2, r3
 8005434:	d109      	bne.n	800544a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005436:	4b08      	ldr	r3, [pc, #32]	; (8005458 <mem_link_valid+0x74>)
 8005438:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	429a      	cmp	r2, r3
 800543e:	d006      	beq.n	800544e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	885b      	ldrh	r3, [r3, #2]
 8005444:	8afa      	ldrh	r2, [r7, #22]
 8005446:	429a      	cmp	r2, r3
 8005448:	d001      	beq.n	800544e <mem_link_valid+0x6a>
    return 0;
 800544a:	2300      	movs	r3, #0
 800544c:	e000      	b.n	8005450 <mem_link_valid+0x6c>
  }
  return 1;
 800544e:	2301      	movs	r3, #1
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20000238 	.word	0x20000238

0800545c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d04c      	beq.n	8005504 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d007      	beq.n	8005484 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005474:	4b25      	ldr	r3, [pc, #148]	; (800550c <mem_free+0xb0>)
 8005476:	f240 2273 	movw	r2, #627	; 0x273
 800547a:	4925      	ldr	r1, [pc, #148]	; (8005510 <mem_free+0xb4>)
 800547c:	4825      	ldr	r0, [pc, #148]	; (8005514 <mem_free+0xb8>)
 800547e:	f009 fe85 	bl	800f18c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005482:	e040      	b.n	8005506 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3b08      	subs	r3, #8
 8005488:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800548a:	4b23      	ldr	r3, [pc, #140]	; (8005518 <mem_free+0xbc>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	429a      	cmp	r2, r3
 8005492:	d306      	bcc.n	80054a2 <mem_free+0x46>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f103 020c 	add.w	r2, r3, #12
 800549a:	4b20      	ldr	r3, [pc, #128]	; (800551c <mem_free+0xc0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d907      	bls.n	80054b2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80054a2:	4b1a      	ldr	r3, [pc, #104]	; (800550c <mem_free+0xb0>)
 80054a4:	f240 227f 	movw	r2, #639	; 0x27f
 80054a8:	491d      	ldr	r1, [pc, #116]	; (8005520 <mem_free+0xc4>)
 80054aa:	481a      	ldr	r0, [pc, #104]	; (8005514 <mem_free+0xb8>)
 80054ac:	f009 fe6e 	bl	800f18c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80054b0:	e029      	b.n	8005506 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	791b      	ldrb	r3, [r3, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d107      	bne.n	80054ca <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80054ba:	4b14      	ldr	r3, [pc, #80]	; (800550c <mem_free+0xb0>)
 80054bc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80054c0:	4918      	ldr	r1, [pc, #96]	; (8005524 <mem_free+0xc8>)
 80054c2:	4814      	ldr	r0, [pc, #80]	; (8005514 <mem_free+0xb8>)
 80054c4:	f009 fe62 	bl	800f18c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80054c8:	e01d      	b.n	8005506 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f7ff ff8a 	bl	80053e4 <mem_link_valid>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d107      	bne.n	80054e6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80054d6:	4b0d      	ldr	r3, [pc, #52]	; (800550c <mem_free+0xb0>)
 80054d8:	f240 2295 	movw	r2, #661	; 0x295
 80054dc:	4912      	ldr	r1, [pc, #72]	; (8005528 <mem_free+0xcc>)
 80054de:	480d      	ldr	r0, [pc, #52]	; (8005514 <mem_free+0xb8>)
 80054e0:	f009 fe54 	bl	800f18c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80054e4:	e00f      	b.n	8005506 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80054ec:	4b0f      	ldr	r3, [pc, #60]	; (800552c <mem_free+0xd0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d202      	bcs.n	80054fc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80054f6:	4a0d      	ldr	r2, [pc, #52]	; (800552c <mem_free+0xd0>)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7ff fe93 	bl	8005228 <plug_holes>
 8005502:	e000      	b.n	8005506 <mem_free+0xaa>
    return;
 8005504:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	08010038 	.word	0x08010038
 8005510:	0801010c 	.word	0x0801010c
 8005514:	08010080 	.word	0x08010080
 8005518:	20000234 	.word	0x20000234
 800551c:	20000238 	.word	0x20000238
 8005520:	08010130 	.word	0x08010130
 8005524:	0801014c 	.word	0x0801014c
 8005528:	08010174 	.word	0x08010174
 800552c:	2000023c 	.word	0x2000023c

08005530 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800553c:	887b      	ldrh	r3, [r7, #2]
 800553e:	3303      	adds	r3, #3
 8005540:	b29b      	uxth	r3, r3
 8005542:	f023 0303 	bic.w	r3, r3, #3
 8005546:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005548:	8bfb      	ldrh	r3, [r7, #30]
 800554a:	2b0b      	cmp	r3, #11
 800554c:	d801      	bhi.n	8005552 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800554e:	230c      	movs	r3, #12
 8005550:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005552:	8bfb      	ldrh	r3, [r7, #30]
 8005554:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005558:	d803      	bhi.n	8005562 <mem_trim+0x32>
 800555a:	8bfa      	ldrh	r2, [r7, #30]
 800555c:	887b      	ldrh	r3, [r7, #2]
 800555e:	429a      	cmp	r2, r3
 8005560:	d201      	bcs.n	8005566 <mem_trim+0x36>
    return NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	e0cc      	b.n	8005700 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005566:	4b68      	ldr	r3, [pc, #416]	; (8005708 <mem_trim+0x1d8>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	429a      	cmp	r2, r3
 800556e:	d304      	bcc.n	800557a <mem_trim+0x4a>
 8005570:	4b66      	ldr	r3, [pc, #408]	; (800570c <mem_trim+0x1dc>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	429a      	cmp	r2, r3
 8005578:	d306      	bcc.n	8005588 <mem_trim+0x58>
 800557a:	4b65      	ldr	r3, [pc, #404]	; (8005710 <mem_trim+0x1e0>)
 800557c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8005580:	4964      	ldr	r1, [pc, #400]	; (8005714 <mem_trim+0x1e4>)
 8005582:	4865      	ldr	r0, [pc, #404]	; (8005718 <mem_trim+0x1e8>)
 8005584:	f009 fe02 	bl	800f18c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005588:	4b5f      	ldr	r3, [pc, #380]	; (8005708 <mem_trim+0x1d8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	429a      	cmp	r2, r3
 8005590:	d304      	bcc.n	800559c <mem_trim+0x6c>
 8005592:	4b5e      	ldr	r3, [pc, #376]	; (800570c <mem_trim+0x1dc>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	429a      	cmp	r2, r3
 800559a:	d301      	bcc.n	80055a0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	e0af      	b.n	8005700 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3b08      	subs	r3, #8
 80055a4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80055a6:	69b8      	ldr	r0, [r7, #24]
 80055a8:	f7ff fe2c 	bl	8005204 <mem_to_ptr>
 80055ac:	4603      	mov	r3, r0
 80055ae:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	881a      	ldrh	r2, [r3, #0]
 80055b4:	8afb      	ldrh	r3, [r7, #22]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b08      	subs	r3, #8
 80055bc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80055be:	8bfa      	ldrh	r2, [r7, #30]
 80055c0:	8abb      	ldrh	r3, [r7, #20]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d906      	bls.n	80055d4 <mem_trim+0xa4>
 80055c6:	4b52      	ldr	r3, [pc, #328]	; (8005710 <mem_trim+0x1e0>)
 80055c8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80055cc:	4953      	ldr	r1, [pc, #332]	; (800571c <mem_trim+0x1ec>)
 80055ce:	4852      	ldr	r0, [pc, #328]	; (8005718 <mem_trim+0x1e8>)
 80055d0:	f009 fddc 	bl	800f18c <iprintf>
  if (newsize > size) {
 80055d4:	8bfa      	ldrh	r2, [r7, #30]
 80055d6:	8abb      	ldrh	r3, [r7, #20]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d901      	bls.n	80055e0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80055dc:	2300      	movs	r3, #0
 80055de:	e08f      	b.n	8005700 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80055e0:	8bfa      	ldrh	r2, [r7, #30]
 80055e2:	8abb      	ldrh	r3, [r7, #20]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d101      	bne.n	80055ec <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	e089      	b.n	8005700 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7ff fdf5 	bl	80051e0 <ptr_to_mem>
 80055f6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	791b      	ldrb	r3, [r3, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d13f      	bne.n	8005680 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005608:	d106      	bne.n	8005618 <mem_trim+0xe8>
 800560a:	4b41      	ldr	r3, [pc, #260]	; (8005710 <mem_trim+0x1e0>)
 800560c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005610:	4943      	ldr	r1, [pc, #268]	; (8005720 <mem_trim+0x1f0>)
 8005612:	4841      	ldr	r0, [pc, #260]	; (8005718 <mem_trim+0x1e8>)
 8005614:	f009 fdba 	bl	800f18c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800561e:	8afa      	ldrh	r2, [r7, #22]
 8005620:	8bfb      	ldrh	r3, [r7, #30]
 8005622:	4413      	add	r3, r2
 8005624:	b29b      	uxth	r3, r3
 8005626:	3308      	adds	r3, #8
 8005628:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800562a:	4b3e      	ldr	r3, [pc, #248]	; (8005724 <mem_trim+0x1f4>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	429a      	cmp	r2, r3
 8005632:	d106      	bne.n	8005642 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005634:	89fb      	ldrh	r3, [r7, #14]
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff fdd2 	bl	80051e0 <ptr_to_mem>
 800563c:	4602      	mov	r2, r0
 800563e:	4b39      	ldr	r3, [pc, #228]	; (8005724 <mem_trim+0x1f4>)
 8005640:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005642:	89fb      	ldrh	r3, [r7, #14]
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff fdcb 	bl	80051e0 <ptr_to_mem>
 800564a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	2200      	movs	r2, #0
 8005650:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	89ba      	ldrh	r2, [r7, #12]
 8005656:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	8afa      	ldrh	r2, [r7, #22]
 800565c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	89fa      	ldrh	r2, [r7, #14]
 8005662:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800566c:	d047      	beq.n	80056fe <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff fdb4 	bl	80051e0 <ptr_to_mem>
 8005678:	4602      	mov	r2, r0
 800567a:	89fb      	ldrh	r3, [r7, #14]
 800567c:	8053      	strh	r3, [r2, #2]
 800567e:	e03e      	b.n	80056fe <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005680:	8bfb      	ldrh	r3, [r7, #30]
 8005682:	f103 0214 	add.w	r2, r3, #20
 8005686:	8abb      	ldrh	r3, [r7, #20]
 8005688:	429a      	cmp	r2, r3
 800568a:	d838      	bhi.n	80056fe <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800568c:	8afa      	ldrh	r2, [r7, #22]
 800568e:	8bfb      	ldrh	r3, [r7, #30]
 8005690:	4413      	add	r3, r2
 8005692:	b29b      	uxth	r3, r3
 8005694:	3308      	adds	r3, #8
 8005696:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80056a0:	d106      	bne.n	80056b0 <mem_trim+0x180>
 80056a2:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <mem_trim+0x1e0>)
 80056a4:	f240 3216 	movw	r2, #790	; 0x316
 80056a8:	491d      	ldr	r1, [pc, #116]	; (8005720 <mem_trim+0x1f0>)
 80056aa:	481b      	ldr	r0, [pc, #108]	; (8005718 <mem_trim+0x1e8>)
 80056ac:	f009 fd6e 	bl	800f18c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80056b0:	89fb      	ldrh	r3, [r7, #14]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff fd94 	bl	80051e0 <ptr_to_mem>
 80056b8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80056ba:	4b1a      	ldr	r3, [pc, #104]	; (8005724 <mem_trim+0x1f4>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d202      	bcs.n	80056ca <mem_trim+0x19a>
      lfree = mem2;
 80056c4:	4a17      	ldr	r2, [pc, #92]	; (8005724 <mem_trim+0x1f4>)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2200      	movs	r2, #0
 80056ce:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	881a      	ldrh	r2, [r3, #0]
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	8afa      	ldrh	r2, [r7, #22]
 80056dc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	89fa      	ldrh	r2, [r7, #14]
 80056e2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80056ec:	d007      	beq.n	80056fe <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff fd74 	bl	80051e0 <ptr_to_mem>
 80056f8:	4602      	mov	r2, r0
 80056fa:	89fb      	ldrh	r3, [r7, #14]
 80056fc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80056fe:	687b      	ldr	r3, [r7, #4]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3720      	adds	r7, #32
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	20000234 	.word	0x20000234
 800570c:	20000238 	.word	0x20000238
 8005710:	08010038 	.word	0x08010038
 8005714:	080101a8 	.word	0x080101a8
 8005718:	08010080 	.word	0x08010080
 800571c:	080101c0 	.word	0x080101c0
 8005720:	080101e0 	.word	0x080101e0
 8005724:	2000023c 	.word	0x2000023c

08005728 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <mem_malloc+0x14>
    return NULL;
 8005738:	2300      	movs	r3, #0
 800573a:	e0d9      	b.n	80058f0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800573c:	88fb      	ldrh	r3, [r7, #6]
 800573e:	3303      	adds	r3, #3
 8005740:	b29b      	uxth	r3, r3
 8005742:	f023 0303 	bic.w	r3, r3, #3
 8005746:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005748:	8bbb      	ldrh	r3, [r7, #28]
 800574a:	2b0b      	cmp	r3, #11
 800574c:	d801      	bhi.n	8005752 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800574e:	230c      	movs	r3, #12
 8005750:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005752:	8bbb      	ldrh	r3, [r7, #28]
 8005754:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005758:	d803      	bhi.n	8005762 <mem_malloc+0x3a>
 800575a:	8bba      	ldrh	r2, [r7, #28]
 800575c:	88fb      	ldrh	r3, [r7, #6]
 800575e:	429a      	cmp	r2, r3
 8005760:	d201      	bcs.n	8005766 <mem_malloc+0x3e>
    return NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	e0c4      	b.n	80058f0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005766:	4b64      	ldr	r3, [pc, #400]	; (80058f8 <mem_malloc+0x1d0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fd4a 	bl	8005204 <mem_to_ptr>
 8005770:	4603      	mov	r3, r0
 8005772:	83fb      	strh	r3, [r7, #30]
 8005774:	e0b4      	b.n	80058e0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005776:	8bfb      	ldrh	r3, [r7, #30]
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff fd31 	bl	80051e0 <ptr_to_mem>
 800577e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	791b      	ldrb	r3, [r3, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	f040 80a4 	bne.w	80058d2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	8bfb      	ldrh	r3, [r7, #30]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	f1a3 0208 	sub.w	r2, r3, #8
 8005798:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800579a:	429a      	cmp	r2, r3
 800579c:	f0c0 8099 	bcc.w	80058d2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	8bfb      	ldrh	r3, [r7, #30]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	f1a3 0208 	sub.w	r2, r3, #8
 80057ae:	8bbb      	ldrh	r3, [r7, #28]
 80057b0:	3314      	adds	r3, #20
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d333      	bcc.n	800581e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80057b6:	8bfa      	ldrh	r2, [r7, #30]
 80057b8:	8bbb      	ldrh	r3, [r7, #28]
 80057ba:	4413      	add	r3, r2
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3308      	adds	r3, #8
 80057c0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80057c2:	8a7b      	ldrh	r3, [r7, #18]
 80057c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80057c8:	d106      	bne.n	80057d8 <mem_malloc+0xb0>
 80057ca:	4b4c      	ldr	r3, [pc, #304]	; (80058fc <mem_malloc+0x1d4>)
 80057cc:	f240 3287 	movw	r2, #903	; 0x387
 80057d0:	494b      	ldr	r1, [pc, #300]	; (8005900 <mem_malloc+0x1d8>)
 80057d2:	484c      	ldr	r0, [pc, #304]	; (8005904 <mem_malloc+0x1dc>)
 80057d4:	f009 fcda 	bl	800f18c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80057d8:	8a7b      	ldrh	r3, [r7, #18]
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff fd00 	bl	80051e0 <ptr_to_mem>
 80057e0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	881a      	ldrh	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8bfa      	ldrh	r2, [r7, #30]
 80057f4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	8a7a      	ldrh	r2, [r7, #18]
 80057fa:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	2201      	movs	r2, #1
 8005800:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800580a:	d00b      	beq.n	8005824 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff fce5 	bl	80051e0 <ptr_to_mem>
 8005816:	4602      	mov	r2, r0
 8005818:	8a7b      	ldrh	r3, [r7, #18]
 800581a:	8053      	strh	r3, [r2, #2]
 800581c:	e002      	b.n	8005824 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2201      	movs	r2, #1
 8005822:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005824:	4b34      	ldr	r3, [pc, #208]	; (80058f8 <mem_malloc+0x1d0>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	429a      	cmp	r2, r3
 800582c:	d127      	bne.n	800587e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800582e:	4b32      	ldr	r3, [pc, #200]	; (80058f8 <mem_malloc+0x1d0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005834:	e005      	b.n	8005842 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff fcd0 	bl	80051e0 <ptr_to_mem>
 8005840:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	791b      	ldrb	r3, [r3, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d004      	beq.n	8005854 <mem_malloc+0x12c>
 800584a:	4b2f      	ldr	r3, [pc, #188]	; (8005908 <mem_malloc+0x1e0>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	429a      	cmp	r2, r3
 8005852:	d1f0      	bne.n	8005836 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005854:	4a28      	ldr	r2, [pc, #160]	; (80058f8 <mem_malloc+0x1d0>)
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800585a:	4b27      	ldr	r3, [pc, #156]	; (80058f8 <mem_malloc+0x1d0>)
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	4b2a      	ldr	r3, [pc, #168]	; (8005908 <mem_malloc+0x1e0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d00b      	beq.n	800587e <mem_malloc+0x156>
 8005866:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <mem_malloc+0x1d0>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	791b      	ldrb	r3, [r3, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d006      	beq.n	800587e <mem_malloc+0x156>
 8005870:	4b22      	ldr	r3, [pc, #136]	; (80058fc <mem_malloc+0x1d4>)
 8005872:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005876:	4925      	ldr	r1, [pc, #148]	; (800590c <mem_malloc+0x1e4>)
 8005878:	4822      	ldr	r0, [pc, #136]	; (8005904 <mem_malloc+0x1dc>)
 800587a:	f009 fc87 	bl	800f18c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800587e:	8bba      	ldrh	r2, [r7, #28]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	4413      	add	r3, r2
 8005884:	3308      	adds	r3, #8
 8005886:	4a20      	ldr	r2, [pc, #128]	; (8005908 <mem_malloc+0x1e0>)
 8005888:	6812      	ldr	r2, [r2, #0]
 800588a:	4293      	cmp	r3, r2
 800588c:	d906      	bls.n	800589c <mem_malloc+0x174>
 800588e:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <mem_malloc+0x1d4>)
 8005890:	f240 32ba 	movw	r2, #954	; 0x3ba
 8005894:	491e      	ldr	r1, [pc, #120]	; (8005910 <mem_malloc+0x1e8>)
 8005896:	481b      	ldr	r0, [pc, #108]	; (8005904 <mem_malloc+0x1dc>)
 8005898:	f009 fc78 	bl	800f18c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d006      	beq.n	80058b4 <mem_malloc+0x18c>
 80058a6:	4b15      	ldr	r3, [pc, #84]	; (80058fc <mem_malloc+0x1d4>)
 80058a8:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 80058ac:	4919      	ldr	r1, [pc, #100]	; (8005914 <mem_malloc+0x1ec>)
 80058ae:	4815      	ldr	r0, [pc, #84]	; (8005904 <mem_malloc+0x1dc>)
 80058b0:	f009 fc6c 	bl	800f18c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d006      	beq.n	80058cc <mem_malloc+0x1a4>
 80058be:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <mem_malloc+0x1d4>)
 80058c0:	f240 32be 	movw	r2, #958	; 0x3be
 80058c4:	4914      	ldr	r1, [pc, #80]	; (8005918 <mem_malloc+0x1f0>)
 80058c6:	480f      	ldr	r0, [pc, #60]	; (8005904 <mem_malloc+0x1dc>)
 80058c8:	f009 fc60 	bl	800f18c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	3308      	adds	r3, #8
 80058d0:	e00e      	b.n	80058f0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80058d2:	8bfb      	ldrh	r3, [r7, #30]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff fc83 	bl	80051e0 <ptr_to_mem>
 80058da:	4603      	mov	r3, r0
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80058e0:	8bfa      	ldrh	r2, [r7, #30]
 80058e2:	8bbb      	ldrh	r3, [r7, #28]
 80058e4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80058e8:	429a      	cmp	r2, r3
 80058ea:	f4ff af44 	bcc.w	8005776 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3720      	adds	r7, #32
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	2000023c 	.word	0x2000023c
 80058fc:	08010038 	.word	0x08010038
 8005900:	080101e0 	.word	0x080101e0
 8005904:	08010080 	.word	0x08010080
 8005908:	20000238 	.word	0x20000238
 800590c:	080101f4 	.word	0x080101f4
 8005910:	08010210 	.word	0x08010210
 8005914:	08010240 	.word	0x08010240
 8005918:	08010270 	.word	0x08010270

0800591c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	3303      	adds	r3, #3
 8005932:	f023 0303 	bic.w	r3, r3, #3
 8005936:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	e011      	b.n	8005962 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	461a      	mov	r2, r3
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4413      	add	r3, r2
 800595a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3301      	adds	r3, #1
 8005960:	60fb      	str	r3, [r7, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	885b      	ldrh	r3, [r3, #2]
 8005966:	461a      	mov	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4293      	cmp	r3, r2
 800596c:	dbe7      	blt.n	800593e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800596e:	bf00      	nop
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
	...

0800597c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005982:	2300      	movs	r3, #0
 8005984:	80fb      	strh	r3, [r7, #6]
 8005986:	e009      	b.n	800599c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	4a08      	ldr	r2, [pc, #32]	; (80059ac <memp_init+0x30>)
 800598c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005990:	4618      	mov	r0, r3
 8005992:	f7ff ffc3 	bl	800591c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005996:	88fb      	ldrh	r3, [r7, #6]
 8005998:	3301      	adds	r3, #1
 800599a:	80fb      	strh	r3, [r7, #6]
 800599c:	88fb      	ldrh	r3, [r7, #6]
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d9f2      	bls.n	8005988 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80059a2:	bf00      	nop
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	08012a48 	.word	0x08012a48

080059b0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d012      	beq.n	80059ec <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d006      	beq.n	80059e8 <do_memp_malloc_pool+0x38>
 80059da:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <do_memp_malloc_pool+0x48>)
 80059dc:	f240 1219 	movw	r2, #281	; 0x119
 80059e0:	4906      	ldr	r1, [pc, #24]	; (80059fc <do_memp_malloc_pool+0x4c>)
 80059e2:	4807      	ldr	r0, [pc, #28]	; (8005a00 <do_memp_malloc_pool+0x50>)
 80059e4:	f009 fbd2 	bl	800f18c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	e000      	b.n	80059ee <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	08010294 	.word	0x08010294
 80059fc:	080102c4 	.word	0x080102c4
 8005a00:	080102e8 	.word	0x080102e8

08005a04 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d908      	bls.n	8005a26 <memp_malloc+0x22>
 8005a14:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <memp_malloc+0x3c>)
 8005a16:	f240 1257 	movw	r2, #343	; 0x157
 8005a1a:	490a      	ldr	r1, [pc, #40]	; (8005a44 <memp_malloc+0x40>)
 8005a1c:	480a      	ldr	r0, [pc, #40]	; (8005a48 <memp_malloc+0x44>)
 8005a1e:	f009 fbb5 	bl	800f18c <iprintf>
 8005a22:	2300      	movs	r3, #0
 8005a24:	e008      	b.n	8005a38 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	4a08      	ldr	r2, [pc, #32]	; (8005a4c <memp_malloc+0x48>)
 8005a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff ffbe 	bl	80059b0 <do_memp_malloc_pool>
 8005a34:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005a36:	68fb      	ldr	r3, [r7, #12]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	08010294 	.word	0x08010294
 8005a44:	08010324 	.word	0x08010324
 8005a48:	080102e8 	.word	0x080102e8
 8005a4c:	08012a48 	.word	0x08012a48

08005a50 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	f003 0303 	and.w	r3, r3, #3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d006      	beq.n	8005a72 <do_memp_free_pool+0x22>
 8005a64:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <do_memp_free_pool+0x40>)
 8005a66:	f240 126d 	movw	r2, #365	; 0x16d
 8005a6a:	490a      	ldr	r1, [pc, #40]	; (8005a94 <do_memp_free_pool+0x44>)
 8005a6c:	480a      	ldr	r0, [pc, #40]	; (8005a98 <do_memp_free_pool+0x48>)
 8005a6e:	f009 fb8d 	bl	800f18c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	08010294 	.word	0x08010294
 8005a94:	08010344 	.word	0x08010344
 8005a98:	080102e8 	.word	0x080102e8

08005a9c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	6039      	str	r1, [r7, #0]
 8005aa6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005aa8:	79fb      	ldrb	r3, [r7, #7]
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d907      	bls.n	8005abe <memp_free+0x22>
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <memp_free+0x44>)
 8005ab0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005ab4:	490b      	ldr	r1, [pc, #44]	; (8005ae4 <memp_free+0x48>)
 8005ab6:	480c      	ldr	r0, [pc, #48]	; (8005ae8 <memp_free+0x4c>)
 8005ab8:	f009 fb68 	bl	800f18c <iprintf>
 8005abc:	e00c      	b.n	8005ad8 <memp_free+0x3c>

  if (mem == NULL) {
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	4a09      	ldr	r2, [pc, #36]	; (8005aec <memp_free+0x50>)
 8005ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005acc:	6839      	ldr	r1, [r7, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff ffbe 	bl	8005a50 <do_memp_free_pool>
 8005ad4:	e000      	b.n	8005ad8 <memp_free+0x3c>
    return;
 8005ad6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	08010294 	.word	0x08010294
 8005ae4:	08010364 	.word	0x08010364
 8005ae8:	080102e8 	.word	0x080102e8
 8005aec:	08012a48 	.word	0x08012a48

08005af0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005af4:	bf00      	nop
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
	...

08005b00 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d108      	bne.n	8005b26 <netif_add+0x26>
 8005b14:	4b56      	ldr	r3, [pc, #344]	; (8005c70 <netif_add+0x170>)
 8005b16:	f240 1227 	movw	r2, #295	; 0x127
 8005b1a:	4956      	ldr	r1, [pc, #344]	; (8005c74 <netif_add+0x174>)
 8005b1c:	4856      	ldr	r0, [pc, #344]	; (8005c78 <netif_add+0x178>)
 8005b1e:	f009 fb35 	bl	800f18c <iprintf>
 8005b22:	2300      	movs	r3, #0
 8005b24:	e09f      	b.n	8005c66 <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d108      	bne.n	8005b3e <netif_add+0x3e>
 8005b2c:	4b50      	ldr	r3, [pc, #320]	; (8005c70 <netif_add+0x170>)
 8005b2e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005b32:	4952      	ldr	r1, [pc, #328]	; (8005c7c <netif_add+0x17c>)
 8005b34:	4850      	ldr	r0, [pc, #320]	; (8005c78 <netif_add+0x178>)
 8005b36:	f009 fb29 	bl	800f18c <iprintf>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e093      	b.n	8005c66 <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005b44:	4b4e      	ldr	r3, [pc, #312]	; (8005c80 <netif_add+0x180>)
 8005b46:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005b4e:	4b4c      	ldr	r3, [pc, #304]	; (8005c80 <netif_add+0x180>)
 8005b50:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005b58:	4b49      	ldr	r3, [pc, #292]	; (8005c80 <netif_add+0x180>)
 8005b5a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4a44      	ldr	r2, [pc, #272]	; (8005c84 <netif_add+0x184>)
 8005b72:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a3a      	ldr	r2, [r7, #32]
 8005b86:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8005b88:	4b3f      	ldr	r3, [pc, #252]	; (8005c88 <netif_add+0x188>)
 8005b8a:	781a      	ldrb	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b96:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	68b9      	ldr	r1, [r7, #8]
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 f914 	bl	8005dcc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	4798      	blx	r3
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <netif_add+0xb4>
    return NULL;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	e058      	b.n	8005c66 <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005bba:	2bff      	cmp	r3, #255	; 0xff
 8005bbc:	d103      	bne.n	8005bc6 <netif_add+0xc6>
        netif->num = 0;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005bca:	4b30      	ldr	r3, [pc, #192]	; (8005c8c <netif_add+0x18c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	e02b      	b.n	8005c2a <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d106      	bne.n	8005be8 <netif_add+0xe8>
 8005bda:	4b25      	ldr	r3, [pc, #148]	; (8005c70 <netif_add+0x170>)
 8005bdc:	f240 128b 	movw	r2, #395	; 0x18b
 8005be0:	492b      	ldr	r1, [pc, #172]	; (8005c90 <netif_add+0x190>)
 8005be2:	4825      	ldr	r0, [pc, #148]	; (8005c78 <netif_add+0x178>)
 8005be4:	f009 fad2 	bl	800f18c <iprintf>
        num_netifs++;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	3301      	adds	r3, #1
 8005bec:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	2bff      	cmp	r3, #255	; 0xff
 8005bf2:	dd06      	ble.n	8005c02 <netif_add+0x102>
 8005bf4:	4b1e      	ldr	r3, [pc, #120]	; (8005c70 <netif_add+0x170>)
 8005bf6:	f240 128d 	movw	r2, #397	; 0x18d
 8005bfa:	4926      	ldr	r1, [pc, #152]	; (8005c94 <netif_add+0x194>)
 8005bfc:	481e      	ldr	r0, [pc, #120]	; (8005c78 <netif_add+0x178>)
 8005bfe:	f009 fac5 	bl	800f18c <iprintf>
        if (netif2->num == netif->num) {
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d108      	bne.n	8005c24 <netif_add+0x124>
          netif->num++;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c18:	3301      	adds	r3, #1
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 8005c22:	e005      	b.n	8005c30 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1d0      	bne.n	8005bd2 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1be      	bne.n	8005bb4 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c3c:	2bfe      	cmp	r3, #254	; 0xfe
 8005c3e:	d103      	bne.n	8005c48 <netif_add+0x148>
    netif_num = 0;
 8005c40:	4b11      	ldr	r3, [pc, #68]	; (8005c88 <netif_add+0x188>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	e006      	b.n	8005c56 <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c4e:	3301      	adds	r3, #1
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	4b0d      	ldr	r3, [pc, #52]	; (8005c88 <netif_add+0x188>)
 8005c54:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005c56:	4b0d      	ldr	r3, [pc, #52]	; (8005c8c <netif_add+0x18c>)
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005c5e:	4a0b      	ldr	r2, [pc, #44]	; (8005c8c <netif_add+0x18c>)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005c64:	68fb      	ldr	r3, [r7, #12]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	08010380 	.word	0x08010380
 8005c74:	08010414 	.word	0x08010414
 8005c78:	080103d0 	.word	0x080103d0
 8005c7c:	08010430 	.word	0x08010430
 8005c80:	08012aac 	.word	0x08012aac
 8005c84:	08005fbd 	.word	0x08005fbd
 8005c88:	20000264 	.word	0x20000264
 8005c8c:	20006eb4 	.word	0x20006eb4
 8005c90:	08010454 	.word	0x08010454
 8005c94:	08010468 	.word	0x08010468

08005c98 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f002 fb5f 	bl	8008368 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f006 ff3d 	bl	800cb2c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005cb2:	bf00      	nop
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <netif_do_set_ipaddr+0x20>
 8005cce:	4b1d      	ldr	r3, [pc, #116]	; (8005d44 <netif_do_set_ipaddr+0x88>)
 8005cd0:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005cd4:	491c      	ldr	r1, [pc, #112]	; (8005d48 <netif_do_set_ipaddr+0x8c>)
 8005cd6:	481d      	ldr	r0, [pc, #116]	; (8005d4c <netif_do_set_ipaddr+0x90>)
 8005cd8:	f009 fa58 	bl	800f18c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <netif_do_set_ipaddr+0x34>
 8005ce2:	4b18      	ldr	r3, [pc, #96]	; (8005d44 <netif_do_set_ipaddr+0x88>)
 8005ce4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005ce8:	4917      	ldr	r1, [pc, #92]	; (8005d48 <netif_do_set_ipaddr+0x8c>)
 8005cea:	4818      	ldr	r0, [pc, #96]	; (8005d4c <netif_do_set_ipaddr+0x90>)
 8005cec:	f009 fa4e 	bl	800f18c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d01c      	beq.n	8005d38 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3304      	adds	r3, #4
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005d0e:	f107 0314 	add.w	r3, r7, #20
 8005d12:	4619      	mov	r1, r3
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff ffbf 	bl	8005c98 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <netif_do_set_ipaddr+0x6a>
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	e000      	b.n	8005d28 <netif_do_set_ipaddr+0x6c>
 8005d26:	2300      	movs	r3, #0
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 f8d2 	bl	8005ed8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005d34:	2301      	movs	r3, #1
 8005d36:	e000      	b.n	8005d3a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	08010380 	.word	0x08010380
 8005d48:	08010498 	.word	0x08010498
 8005d4c:	080103d0 	.word	0x080103d0

08005d50 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3308      	adds	r3, #8
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d00a      	beq.n	8005d80 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <netif_do_set_netmask+0x26>
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	e000      	b.n	8005d78 <netif_do_set_netmask+0x28>
 8005d76:	2300      	movs	r3, #0
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b085      	sub	sp, #20
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	330c      	adds	r3, #12
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d00a      	beq.n	8005dbe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <netif_do_set_gw+0x26>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	e000      	b.n	8005db6 <netif_do_set_gw+0x28>
 8005db4:	2300      	movs	r3, #0
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005dde:	2300      	movs	r3, #0
 8005de0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005de8:	4b1c      	ldr	r3, [pc, #112]	; (8005e5c <netif_set_addr+0x90>)
 8005dea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005df2:	4b1a      	ldr	r3, [pc, #104]	; (8005e5c <netif_set_addr+0x90>)
 8005df4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005dfc:	4b17      	ldr	r3, [pc, #92]	; (8005e5c <netif_set_addr+0x90>)
 8005dfe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <netif_set_addr+0x42>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <netif_set_addr+0x46>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <netif_set_addr+0x48>
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d006      	beq.n	8005e2a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005e1c:	f107 0310 	add.w	r3, r7, #16
 8005e20:	461a      	mov	r2, r3
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f7ff ff49 	bl	8005cbc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7ff ff8e 	bl	8005d50 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f7ff ffa8 	bl	8005d8e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d106      	bne.n	8005e52 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005e44:	f107 0310 	add.w	r3, r7, #16
 8005e48:	461a      	mov	r2, r3
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7ff ff35 	bl	8005cbc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005e52:	bf00      	nop
 8005e54:	3720      	adds	r7, #32
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	08012aac 	.word	0x08012aac

08005e60 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005e68:	4a04      	ldr	r2, [pc, #16]	; (8005e7c <netif_set_default+0x1c>)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	20006eb8 	.word	0x20006eb8

08005e80 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d107      	bne.n	8005e9e <netif_set_up+0x1e>
 8005e8e:	4b0f      	ldr	r3, [pc, #60]	; (8005ecc <netif_set_up+0x4c>)
 8005e90:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005e94:	490e      	ldr	r1, [pc, #56]	; (8005ed0 <netif_set_up+0x50>)
 8005e96:	480f      	ldr	r0, [pc, #60]	; (8005ed4 <netif_set_up+0x54>)
 8005e98:	f009 f978 	bl	800f18c <iprintf>
 8005e9c:	e013      	b.n	8005ec6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10c      	bne.n	8005ec6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005eb2:	f043 0301 	orr.w	r3, r3, #1
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005ebe:	2103      	movs	r1, #3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f809 	bl	8005ed8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	08010380 	.word	0x08010380
 8005ed0:	08010508 	.word	0x08010508
 8005ed4:	080103d0 	.word	0x080103d0

08005ed8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <netif_issue_reports+0x20>
 8005eea:	4b18      	ldr	r3, [pc, #96]	; (8005f4c <netif_issue_reports+0x74>)
 8005eec:	f240 326d 	movw	r2, #877	; 0x36d
 8005ef0:	4917      	ldr	r1, [pc, #92]	; (8005f50 <netif_issue_reports+0x78>)
 8005ef2:	4818      	ldr	r0, [pc, #96]	; (8005f54 <netif_issue_reports+0x7c>)
 8005ef4:	f009 f94a 	bl	800f18c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d01e      	beq.n	8005f44 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005f0c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d017      	beq.n	8005f44 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005f14:	78fb      	ldrb	r3, [r7, #3]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d013      	beq.n	8005f46 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3304      	adds	r3, #4
 8005f22:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00e      	beq.n	8005f46 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f007 fd5f 	bl	800da00 <etharp_request>
 8005f42:	e000      	b.n	8005f46 <netif_issue_reports+0x6e>
    return;
 8005f44:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	08010380 	.word	0x08010380
 8005f50:	08010524 	.word	0x08010524
 8005f54:	080103d0 	.word	0x080103d0

08005f58 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d107      	bne.n	8005f76 <netif_set_down+0x1e>
 8005f66:	4b12      	ldr	r3, [pc, #72]	; (8005fb0 <netif_set_down+0x58>)
 8005f68:	f240 329b 	movw	r2, #923	; 0x39b
 8005f6c:	4911      	ldr	r1, [pc, #68]	; (8005fb4 <netif_set_down+0x5c>)
 8005f6e:	4812      	ldr	r0, [pc, #72]	; (8005fb8 <netif_set_down+0x60>)
 8005f70:	f009 f90c 	bl	800f18c <iprintf>
 8005f74:	e019      	b.n	8005faa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d012      	beq.n	8005faa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005f8a:	f023 0301 	bic.w	r3, r3, #1
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f007 f8e9 	bl	800d17c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	08010380 	.word	0x08010380
 8005fb4:	08010548 	.word	0x08010548
 8005fb8:	080103d0 	.word	0x080103d0

08005fbc <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005fc8:	f06f 030b 	mvn.w	r3, #11
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005fe2:	79fb      	ldrb	r3, [r7, #7]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d013      	beq.n	8006010 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005fe8:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <netif_get_by_index+0x48>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	e00c      	b.n	800600a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	79fa      	ldrb	r2, [r7, #7]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d101      	bne.n	8006004 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	e006      	b.n	8006012 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1ef      	bne.n	8005ff0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	20006eb4 	.word	0x20006eb4

08006024 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800602a:	4b0c      	ldr	r3, [pc, #48]	; (800605c <pbuf_free_ooseq+0x38>)
 800602c:	2200      	movs	r2, #0
 800602e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006030:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <pbuf_free_ooseq+0x3c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	607b      	str	r3, [r7, #4]
 8006036:	e00a      	b.n	800604e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f002 f9cf 	bl	80083e4 <tcp_free_ooseq>
      return;
 8006046:	e005      	b.n	8006054 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	607b      	str	r3, [r7, #4]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1f1      	bne.n	8006038 <pbuf_free_ooseq+0x14>
    }
  }
}
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20006ebc 	.word	0x20006ebc
 8006060:	20006ec4 	.word	0x20006ec4

08006064 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006068:	4b03      	ldr	r3, [pc, #12]	; (8006078 <pbuf_pool_is_empty+0x14>)
 800606a:	2201      	movs	r2, #1
 800606c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800606e:	bf00      	nop
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	20006ebc 	.word	0x20006ebc

0800607c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	4611      	mov	r1, r2
 8006088:	461a      	mov	r2, r3
 800608a:	460b      	mov	r3, r1
 800608c:	80fb      	strh	r3, [r7, #6]
 800608e:	4613      	mov	r3, r2
 8006090:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	88fa      	ldrh	r2, [r7, #6]
 80060a2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	88ba      	ldrh	r2, [r7, #4]
 80060a8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80060aa:	8b3b      	ldrh	r3, [r7, #24]
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	7f3a      	ldrb	r2, [r7, #28]
 80060b6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	73da      	strb	r2, [r3, #15]
}
 80060c4:	bf00      	nop
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08c      	sub	sp, #48	; 0x30
 80060d4:	af02      	add	r7, sp, #8
 80060d6:	4603      	mov	r3, r0
 80060d8:	71fb      	strb	r3, [r7, #7]
 80060da:	460b      	mov	r3, r1
 80060dc:	80bb      	strh	r3, [r7, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80060e6:	887b      	ldrh	r3, [r7, #2]
 80060e8:	2b41      	cmp	r3, #65	; 0x41
 80060ea:	d00b      	beq.n	8006104 <pbuf_alloc+0x34>
 80060ec:	2b41      	cmp	r3, #65	; 0x41
 80060ee:	dc02      	bgt.n	80060f6 <pbuf_alloc+0x26>
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d007      	beq.n	8006104 <pbuf_alloc+0x34>
 80060f4:	e0c2      	b.n	800627c <pbuf_alloc+0x1ac>
 80060f6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80060fa:	d00b      	beq.n	8006114 <pbuf_alloc+0x44>
 80060fc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006100:	d070      	beq.n	80061e4 <pbuf_alloc+0x114>
 8006102:	e0bb      	b.n	800627c <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006104:	887a      	ldrh	r2, [r7, #2]
 8006106:	88bb      	ldrh	r3, [r7, #4]
 8006108:	4619      	mov	r1, r3
 800610a:	2000      	movs	r0, #0
 800610c:	f000 f8d2 	bl	80062b4 <pbuf_alloc_reference>
 8006110:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8006112:	e0bd      	b.n	8006290 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006114:	2300      	movs	r3, #0
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006118:	2300      	movs	r3, #0
 800611a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800611c:	88bb      	ldrh	r3, [r7, #4]
 800611e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006120:	2008      	movs	r0, #8
 8006122:	f7ff fc6f 	bl	8005a04 <memp_malloc>
 8006126:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800612e:	f7ff ff99 	bl	8006064 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <pbuf_alloc+0x6e>
            pbuf_free(p);
 8006138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800613a:	f000 faa9 	bl	8006690 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800613e:	2300      	movs	r3, #0
 8006140:	e0a7      	b.n	8006292 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006142:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006144:	3303      	adds	r3, #3
 8006146:	b29b      	uxth	r3, r3
 8006148:	f023 0303 	bic.w	r3, r3, #3
 800614c:	b29b      	uxth	r3, r3
 800614e:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006152:	b29b      	uxth	r3, r3
 8006154:	8b7a      	ldrh	r2, [r7, #26]
 8006156:	4293      	cmp	r3, r2
 8006158:	bf28      	it	cs
 800615a:	4613      	movcs	r3, r2
 800615c:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800615e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006160:	3310      	adds	r3, #16
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4413      	add	r3, r2
 8006166:	3303      	adds	r3, #3
 8006168:	f023 0303 	bic.w	r3, r3, #3
 800616c:	4618      	mov	r0, r3
 800616e:	89f9      	ldrh	r1, [r7, #14]
 8006170:	8b7a      	ldrh	r2, [r7, #26]
 8006172:	2300      	movs	r3, #0
 8006174:	9301      	str	r3, [sp, #4]
 8006176:	887b      	ldrh	r3, [r7, #2]
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	460b      	mov	r3, r1
 800617c:	4601      	mov	r1, r0
 800617e:	6938      	ldr	r0, [r7, #16]
 8006180:	f7ff ff7c 	bl	800607c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f003 0303 	and.w	r3, r3, #3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d006      	beq.n	800619e <pbuf_alloc+0xce>
 8006190:	4b42      	ldr	r3, [pc, #264]	; (800629c <pbuf_alloc+0x1cc>)
 8006192:	f240 1201 	movw	r2, #257	; 0x101
 8006196:	4942      	ldr	r1, [pc, #264]	; (80062a0 <pbuf_alloc+0x1d0>)
 8006198:	4842      	ldr	r0, [pc, #264]	; (80062a4 <pbuf_alloc+0x1d4>)
 800619a:	f008 fff7 	bl	800f18c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800619e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061a0:	3303      	adds	r3, #3
 80061a2:	f023 0303 	bic.w	r3, r3, #3
 80061a6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80061aa:	d106      	bne.n	80061ba <pbuf_alloc+0xea>
 80061ac:	4b3b      	ldr	r3, [pc, #236]	; (800629c <pbuf_alloc+0x1cc>)
 80061ae:	f240 1203 	movw	r2, #259	; 0x103
 80061b2:	493d      	ldr	r1, [pc, #244]	; (80062a8 <pbuf_alloc+0x1d8>)
 80061b4:	483b      	ldr	r0, [pc, #236]	; (80062a4 <pbuf_alloc+0x1d4>)
 80061b6:	f008 ffe9 	bl	800f18c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d102      	bne.n	80061c6 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
 80061c4:	e002      	b.n	80061cc <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80061d0:	8b7a      	ldrh	r2, [r7, #26]
 80061d2:	89fb      	ldrh	r3, [r7, #14]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80061dc:	8b7b      	ldrh	r3, [r7, #26]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d19e      	bne.n	8006120 <pbuf_alloc+0x50>
      break;
 80061e2:	e055      	b.n	8006290 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80061e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061e6:	3303      	adds	r3, #3
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	f023 0303 	bic.w	r3, r3, #3
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	88bb      	ldrh	r3, [r7, #4]
 80061f2:	3303      	adds	r3, #3
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f023 0303 	bic.w	r3, r3, #3
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	4413      	add	r3, r2
 80061fe:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006200:	8b3b      	ldrh	r3, [r7, #24]
 8006202:	3310      	adds	r3, #16
 8006204:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006206:	8b3a      	ldrh	r2, [r7, #24]
 8006208:	88bb      	ldrh	r3, [r7, #4]
 800620a:	3303      	adds	r3, #3
 800620c:	f023 0303 	bic.w	r3, r3, #3
 8006210:	429a      	cmp	r2, r3
 8006212:	d306      	bcc.n	8006222 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006214:	8afa      	ldrh	r2, [r7, #22]
 8006216:	88bb      	ldrh	r3, [r7, #4]
 8006218:	3303      	adds	r3, #3
 800621a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800621e:	429a      	cmp	r2, r3
 8006220:	d201      	bcs.n	8006226 <pbuf_alloc+0x156>
        return NULL;
 8006222:	2300      	movs	r3, #0
 8006224:	e035      	b.n	8006292 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006226:	8afb      	ldrh	r3, [r7, #22]
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff fa7d 	bl	8005728 <mem_malloc>
 800622e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <pbuf_alloc+0x16a>
        return NULL;
 8006236:	2300      	movs	r3, #0
 8006238:	e02b      	b.n	8006292 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800623a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800623c:	3310      	adds	r3, #16
 800623e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006240:	4413      	add	r3, r2
 8006242:	3303      	adds	r3, #3
 8006244:	f023 0303 	bic.w	r3, r3, #3
 8006248:	4618      	mov	r0, r3
 800624a:	88b9      	ldrh	r1, [r7, #4]
 800624c:	88ba      	ldrh	r2, [r7, #4]
 800624e:	2300      	movs	r3, #0
 8006250:	9301      	str	r3, [sp, #4]
 8006252:	887b      	ldrh	r3, [r7, #2]
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	460b      	mov	r3, r1
 8006258:	4601      	mov	r1, r0
 800625a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800625c:	f7ff ff0e 	bl	800607c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f003 0303 	and.w	r3, r3, #3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d010      	beq.n	800628e <pbuf_alloc+0x1be>
 800626c:	4b0b      	ldr	r3, [pc, #44]	; (800629c <pbuf_alloc+0x1cc>)
 800626e:	f240 1223 	movw	r2, #291	; 0x123
 8006272:	490e      	ldr	r1, [pc, #56]	; (80062ac <pbuf_alloc+0x1dc>)
 8006274:	480b      	ldr	r0, [pc, #44]	; (80062a4 <pbuf_alloc+0x1d4>)
 8006276:	f008 ff89 	bl	800f18c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800627a:	e008      	b.n	800628e <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800627c:	4b07      	ldr	r3, [pc, #28]	; (800629c <pbuf_alloc+0x1cc>)
 800627e:	f240 1227 	movw	r2, #295	; 0x127
 8006282:	490b      	ldr	r1, [pc, #44]	; (80062b0 <pbuf_alloc+0x1e0>)
 8006284:	4807      	ldr	r0, [pc, #28]	; (80062a4 <pbuf_alloc+0x1d4>)
 8006286:	f008 ff81 	bl	800f18c <iprintf>
      return NULL;
 800628a:	2300      	movs	r3, #0
 800628c:	e001      	b.n	8006292 <pbuf_alloc+0x1c2>
      break;
 800628e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006292:	4618      	mov	r0, r3
 8006294:	3728      	adds	r7, #40	; 0x28
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	080105b0 	.word	0x080105b0
 80062a0:	080105e0 	.word	0x080105e0
 80062a4:	08010610 	.word	0x08010610
 80062a8:	08010638 	.word	0x08010638
 80062ac:	0801066c 	.word	0x0801066c
 80062b0:	08010698 	.word	0x08010698

080062b4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af02      	add	r7, sp, #8
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	807b      	strh	r3, [r7, #2]
 80062c0:	4613      	mov	r3, r2
 80062c2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80062c4:	883b      	ldrh	r3, [r7, #0]
 80062c6:	2b41      	cmp	r3, #65	; 0x41
 80062c8:	d009      	beq.n	80062de <pbuf_alloc_reference+0x2a>
 80062ca:	883b      	ldrh	r3, [r7, #0]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d006      	beq.n	80062de <pbuf_alloc_reference+0x2a>
 80062d0:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <pbuf_alloc_reference+0x5c>)
 80062d2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80062d6:	490f      	ldr	r1, [pc, #60]	; (8006314 <pbuf_alloc_reference+0x60>)
 80062d8:	480f      	ldr	r0, [pc, #60]	; (8006318 <pbuf_alloc_reference+0x64>)
 80062da:	f008 ff57 	bl	800f18c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80062de:	2007      	movs	r0, #7
 80062e0:	f7ff fb90 	bl	8005a04 <memp_malloc>
 80062e4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	e00b      	b.n	8006308 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80062f0:	8879      	ldrh	r1, [r7, #2]
 80062f2:	887a      	ldrh	r2, [r7, #2]
 80062f4:	2300      	movs	r3, #0
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	883b      	ldrh	r3, [r7, #0]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	460b      	mov	r3, r1
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f7ff febb 	bl	800607c <pbuf_init_alloced_pbuf>
  return p;
 8006306:	68fb      	ldr	r3, [r7, #12]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	080105b0 	.word	0x080105b0
 8006314:	080106b4 	.word	0x080106b4
 8006318:	08010610 	.word	0x08010610

0800631c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af02      	add	r7, sp, #8
 8006322:	607b      	str	r3, [r7, #4]
 8006324:	4603      	mov	r3, r0
 8006326:	73fb      	strb	r3, [r7, #15]
 8006328:	460b      	mov	r3, r1
 800632a:	81bb      	strh	r3, [r7, #12]
 800632c:	4613      	mov	r3, r2
 800632e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006334:	8a7b      	ldrh	r3, [r7, #18]
 8006336:	3303      	adds	r3, #3
 8006338:	f023 0203 	bic.w	r2, r3, #3
 800633c:	89bb      	ldrh	r3, [r7, #12]
 800633e:	441a      	add	r2, r3
 8006340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006342:	429a      	cmp	r2, r3
 8006344:	d901      	bls.n	800634a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006346:	2300      	movs	r3, #0
 8006348:	e018      	b.n	800637c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006350:	8a7b      	ldrh	r3, [r7, #18]
 8006352:	3303      	adds	r3, #3
 8006354:	f023 0303 	bic.w	r3, r3, #3
 8006358:	6a3a      	ldr	r2, [r7, #32]
 800635a:	4413      	add	r3, r2
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	e001      	b.n	8006364 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006360:	2300      	movs	r3, #0
 8006362:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	89b9      	ldrh	r1, [r7, #12]
 8006368:	89ba      	ldrh	r2, [r7, #12]
 800636a:	2302      	movs	r3, #2
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	897b      	ldrh	r3, [r7, #10]
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	460b      	mov	r3, r1
 8006374:	6979      	ldr	r1, [r7, #20]
 8006376:	f7ff fe81 	bl	800607c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800637a:	687b      	ldr	r3, [r7, #4]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d106      	bne.n	80063a4 <pbuf_realloc+0x20>
 8006396:	4b3a      	ldr	r3, [pc, #232]	; (8006480 <pbuf_realloc+0xfc>)
 8006398:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800639c:	4939      	ldr	r1, [pc, #228]	; (8006484 <pbuf_realloc+0x100>)
 800639e:	483a      	ldr	r0, [pc, #232]	; (8006488 <pbuf_realloc+0x104>)
 80063a0:	f008 fef4 	bl	800f18c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	891b      	ldrh	r3, [r3, #8]
 80063a8:	887a      	ldrh	r2, [r7, #2]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d264      	bcs.n	8006478 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	891a      	ldrh	r2, [r3, #8]
 80063b2:	887b      	ldrh	r3, [r7, #2]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80063b8:	887b      	ldrh	r3, [r7, #2]
 80063ba:	817b      	strh	r3, [r7, #10]
  q = p;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80063c0:	e018      	b.n	80063f4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	895b      	ldrh	r3, [r3, #10]
 80063c6:	897a      	ldrh	r2, [r7, #10]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	891a      	ldrh	r2, [r3, #8]
 80063d0:	893b      	ldrh	r3, [r7, #8]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <pbuf_realloc+0x70>
 80063e6:	4b26      	ldr	r3, [pc, #152]	; (8006480 <pbuf_realloc+0xfc>)
 80063e8:	f240 12af 	movw	r2, #431	; 0x1af
 80063ec:	4927      	ldr	r1, [pc, #156]	; (800648c <pbuf_realloc+0x108>)
 80063ee:	4826      	ldr	r0, [pc, #152]	; (8006488 <pbuf_realloc+0x104>)
 80063f0:	f008 fecc 	bl	800f18c <iprintf>
  while (rem_len > q->len) {
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	895b      	ldrh	r3, [r3, #10]
 80063f8:	897a      	ldrh	r2, [r7, #10]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d8e1      	bhi.n	80063c2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	7b1b      	ldrb	r3, [r3, #12]
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	2b00      	cmp	r3, #0
 8006408:	d122      	bne.n	8006450 <pbuf_realloc+0xcc>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	895b      	ldrh	r3, [r3, #10]
 800640e:	897a      	ldrh	r2, [r7, #10]
 8006410:	429a      	cmp	r2, r3
 8006412:	d01d      	beq.n	8006450 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	7b5b      	ldrb	r3, [r3, #13]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d117      	bne.n	8006450 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	461a      	mov	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	b29a      	uxth	r2, r3
 800642c:	897b      	ldrh	r3, [r7, #10]
 800642e:	4413      	add	r3, r2
 8006430:	b29b      	uxth	r3, r3
 8006432:	4619      	mov	r1, r3
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f7ff f87b 	bl	8005530 <mem_trim>
 800643a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <pbuf_realloc+0xcc>
 8006442:	4b0f      	ldr	r3, [pc, #60]	; (8006480 <pbuf_realloc+0xfc>)
 8006444:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006448:	4911      	ldr	r1, [pc, #68]	; (8006490 <pbuf_realloc+0x10c>)
 800644a:	480f      	ldr	r0, [pc, #60]	; (8006488 <pbuf_realloc+0x104>)
 800644c:	f008 fe9e 	bl	800f18c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	897a      	ldrh	r2, [r7, #10]
 8006454:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	895a      	ldrh	r2, [r3, #10]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d004      	beq.n	8006470 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4618      	mov	r0, r3
 800646c:	f000 f910 	bl	8006690 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	e000      	b.n	800647a <pbuf_realloc+0xf6>
    return;
 8006478:	bf00      	nop

}
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	080105b0 	.word	0x080105b0
 8006484:	080106c8 	.word	0x080106c8
 8006488:	08010610 	.word	0x08010610
 800648c:	080106e0 	.word	0x080106e0
 8006490:	080106f8 	.word	0x080106f8

08006494 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	4613      	mov	r3, r2
 80064a0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d106      	bne.n	80064b6 <pbuf_add_header_impl+0x22>
 80064a8:	4b2b      	ldr	r3, [pc, #172]	; (8006558 <pbuf_add_header_impl+0xc4>)
 80064aa:	f240 12df 	movw	r2, #479	; 0x1df
 80064ae:	492b      	ldr	r1, [pc, #172]	; (800655c <pbuf_add_header_impl+0xc8>)
 80064b0:	482b      	ldr	r0, [pc, #172]	; (8006560 <pbuf_add_header_impl+0xcc>)
 80064b2:	f008 fe6b 	bl	800f18c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <pbuf_add_header_impl+0x30>
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c2:	d301      	bcc.n	80064c8 <pbuf_add_header_impl+0x34>
    return 1;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e043      	b.n	8006550 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <pbuf_add_header_impl+0x3e>
    return 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	e03e      	b.n	8006550 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	891a      	ldrh	r2, [r3, #8]
 80064da:	8a7b      	ldrh	r3, [r7, #18]
 80064dc:	4413      	add	r3, r2
 80064de:	b29b      	uxth	r3, r3
 80064e0:	8a7a      	ldrh	r2, [r7, #18]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d901      	bls.n	80064ea <pbuf_add_header_impl+0x56>
    return 1;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e032      	b.n	8006550 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	7b1b      	ldrb	r3, [r3, #12]
 80064ee:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80064f0:	8a3b      	ldrh	r3, [r7, #16]
 80064f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00c      	beq.n	8006514 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	425b      	negs	r3, r3
 8006502:	4413      	add	r3, r2
 8006504:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3310      	adds	r3, #16
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	429a      	cmp	r2, r3
 800650e:	d20d      	bcs.n	800652c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006510:	2301      	movs	r3, #1
 8006512:	e01d      	b.n	8006550 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d006      	beq.n	8006528 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	425b      	negs	r3, r3
 8006522:	4413      	add	r3, r2
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	e001      	b.n	800652c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006528:	2301      	movs	r3, #1
 800652a:	e011      	b.n	8006550 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	895a      	ldrh	r2, [r3, #10]
 8006536:	8a7b      	ldrh	r3, [r7, #18]
 8006538:	4413      	add	r3, r2
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	891a      	ldrh	r2, [r3, #8]
 8006544:	8a7b      	ldrh	r3, [r7, #18]
 8006546:	4413      	add	r3, r2
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	811a      	strh	r2, [r3, #8]


  return 0;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	080105b0 	.word	0x080105b0
 800655c:	08010714 	.word	0x08010714
 8006560:	08010610 	.word	0x08010610

08006564 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800656e:	2200      	movs	r2, #0
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff ff8e 	bl	8006494 <pbuf_add_header_impl>
 8006578:	4603      	mov	r3, r0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d106      	bne.n	80065a2 <pbuf_remove_header+0x1e>
 8006594:	4b20      	ldr	r3, [pc, #128]	; (8006618 <pbuf_remove_header+0x94>)
 8006596:	f240 224b 	movw	r2, #587	; 0x24b
 800659a:	4920      	ldr	r1, [pc, #128]	; (800661c <pbuf_remove_header+0x98>)
 800659c:	4820      	ldr	r0, [pc, #128]	; (8006620 <pbuf_remove_header+0x9c>)
 800659e:	f008 fdf5 	bl	800f18c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <pbuf_remove_header+0x2c>
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ae:	d301      	bcc.n	80065b4 <pbuf_remove_header+0x30>
    return 1;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e02c      	b.n	800660e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <pbuf_remove_header+0x3a>
    return 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	e027      	b.n	800660e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	895b      	ldrh	r3, [r3, #10]
 80065c6:	89fa      	ldrh	r2, [r7, #14]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d908      	bls.n	80065de <pbuf_remove_header+0x5a>
 80065cc:	4b12      	ldr	r3, [pc, #72]	; (8006618 <pbuf_remove_header+0x94>)
 80065ce:	f240 2255 	movw	r2, #597	; 0x255
 80065d2:	4914      	ldr	r1, [pc, #80]	; (8006624 <pbuf_remove_header+0xa0>)
 80065d4:	4812      	ldr	r0, [pc, #72]	; (8006620 <pbuf_remove_header+0x9c>)
 80065d6:	f008 fdd9 	bl	800f18c <iprintf>
 80065da:	2301      	movs	r3, #1
 80065dc:	e017      	b.n	800660e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	441a      	add	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	895a      	ldrh	r2, [r3, #10]
 80065f4:	89fb      	ldrh	r3, [r7, #14]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	891a      	ldrh	r2, [r3, #8]
 8006602:	89fb      	ldrh	r3, [r7, #14]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	b29a      	uxth	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	080105b0 	.word	0x080105b0
 800661c:	08010714 	.word	0x08010714
 8006620:	08010610 	.word	0x08010610
 8006624:	08010720 	.word	0x08010720

08006628 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	807b      	strh	r3, [r7, #2]
 8006634:	4613      	mov	r3, r2
 8006636:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006638:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800663c:	2b00      	cmp	r3, #0
 800663e:	da08      	bge.n	8006652 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006640:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006644:	425b      	negs	r3, r3
 8006646:	4619      	mov	r1, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7ff ff9b 	bl	8006584 <pbuf_remove_header>
 800664e:	4603      	mov	r3, r0
 8006650:	e007      	b.n	8006662 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006652:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006656:	787a      	ldrb	r2, [r7, #1]
 8006658:	4619      	mov	r1, r3
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7ff ff1a 	bl	8006494 <pbuf_add_header_impl>
 8006660:	4603      	mov	r3, r0
  }
}
 8006662:	4618      	mov	r0, r3
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006676:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800667a:	2201      	movs	r2, #1
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff ffd2 	bl	8006628 <pbuf_header_impl>
 8006684:	4603      	mov	r3, r0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10b      	bne.n	80066b6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d106      	bne.n	80066b2 <pbuf_free+0x22>
 80066a4:	4b38      	ldr	r3, [pc, #224]	; (8006788 <pbuf_free+0xf8>)
 80066a6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80066aa:	4938      	ldr	r1, [pc, #224]	; (800678c <pbuf_free+0xfc>)
 80066ac:	4838      	ldr	r0, [pc, #224]	; (8006790 <pbuf_free+0x100>)
 80066ae:	f008 fd6d 	bl	800f18c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80066b2:	2300      	movs	r3, #0
 80066b4:	e063      	b.n	800677e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80066ba:	e05c      	b.n	8006776 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	7b9b      	ldrb	r3, [r3, #14]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d106      	bne.n	80066d2 <pbuf_free+0x42>
 80066c4:	4b30      	ldr	r3, [pc, #192]	; (8006788 <pbuf_free+0xf8>)
 80066c6:	f240 22f1 	movw	r2, #753	; 0x2f1
 80066ca:	4932      	ldr	r1, [pc, #200]	; (8006794 <pbuf_free+0x104>)
 80066cc:	4830      	ldr	r0, [pc, #192]	; (8006790 <pbuf_free+0x100>)
 80066ce:	f008 fd5d 	bl	800f18c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	7b9b      	ldrb	r3, [r3, #14]
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	739a      	strb	r2, [r3, #14]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	7b9b      	ldrb	r3, [r3, #14]
 80066e2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80066e4:	7dbb      	ldrb	r3, [r7, #22]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d143      	bne.n	8006772 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	7b1b      	ldrb	r3, [r3, #12]
 80066f4:	f003 030f 	and.w	r3, r3, #15
 80066f8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	7b5b      	ldrb	r3, [r3, #13]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d011      	beq.n	800672a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <pbuf_free+0x90>
 8006712:	4b1d      	ldr	r3, [pc, #116]	; (8006788 <pbuf_free+0xf8>)
 8006714:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006718:	491f      	ldr	r1, [pc, #124]	; (8006798 <pbuf_free+0x108>)
 800671a:	481d      	ldr	r0, [pc, #116]	; (8006790 <pbuf_free+0x100>)
 800671c:	f008 fd36 	bl	800f18c <iprintf>
        pc->custom_free_function(p);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
 8006728:	e01d      	b.n	8006766 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800672a:	7bfb      	ldrb	r3, [r7, #15]
 800672c:	2b02      	cmp	r3, #2
 800672e:	d104      	bne.n	800673a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	2008      	movs	r0, #8
 8006734:	f7ff f9b2 	bl	8005a9c <memp_free>
 8006738:	e015      	b.n	8006766 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800673a:	7bfb      	ldrb	r3, [r7, #15]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d104      	bne.n	800674a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	2007      	movs	r0, #7
 8006744:	f7ff f9aa 	bl	8005a9c <memp_free>
 8006748:	e00d      	b.n	8006766 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d103      	bne.n	8006758 <pbuf_free+0xc8>
          mem_free(p);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7fe fe83 	bl	800545c <mem_free>
 8006756:	e006      	b.n	8006766 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006758:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <pbuf_free+0xf8>)
 800675a:	f240 320f 	movw	r2, #783	; 0x30f
 800675e:	490f      	ldr	r1, [pc, #60]	; (800679c <pbuf_free+0x10c>)
 8006760:	480b      	ldr	r0, [pc, #44]	; (8006790 <pbuf_free+0x100>)
 8006762:	f008 fd13 	bl	800f18c <iprintf>
        }
      }
      count++;
 8006766:	7dfb      	ldrb	r3, [r7, #23]
 8006768:	3301      	adds	r3, #1
 800676a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	607b      	str	r3, [r7, #4]
 8006770:	e001      	b.n	8006776 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006772:	2300      	movs	r3, #0
 8006774:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d19f      	bne.n	80066bc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800677c:	7dfb      	ldrb	r3, [r7, #23]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	080105b0 	.word	0x080105b0
 800678c:	08010714 	.word	0x08010714
 8006790:	08010610 	.word	0x08010610
 8006794:	08010740 	.word	0x08010740
 8006798:	08010758 	.word	0x08010758
 800679c:	0801077c 	.word	0x0801077c

080067a0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80067a8:	2300      	movs	r3, #0
 80067aa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80067ac:	e005      	b.n	80067ba <pbuf_clen+0x1a>
    ++len;
 80067ae:	89fb      	ldrh	r3, [r7, #14]
 80067b0:	3301      	adds	r3, #1
 80067b2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1f6      	bne.n	80067ae <pbuf_clen+0xe>
  }
  return len;
 80067c0:	89fb      	ldrh	r3, [r7, #14]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
	...

080067d0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d010      	beq.n	8006800 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	7b9b      	ldrb	r3, [r3, #14]
 80067e2:	3301      	adds	r3, #1
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	7b9b      	ldrb	r3, [r3, #14]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d106      	bne.n	8006800 <pbuf_ref+0x30>
 80067f2:	4b05      	ldr	r3, [pc, #20]	; (8006808 <pbuf_ref+0x38>)
 80067f4:	f240 3242 	movw	r2, #834	; 0x342
 80067f8:	4904      	ldr	r1, [pc, #16]	; (800680c <pbuf_ref+0x3c>)
 80067fa:	4805      	ldr	r0, [pc, #20]	; (8006810 <pbuf_ref+0x40>)
 80067fc:	f008 fcc6 	bl	800f18c <iprintf>
  }
}
 8006800:	bf00      	nop
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	080105b0 	.word	0x080105b0
 800680c:	08010790 	.word	0x08010790
 8006810:	08010610 	.word	0x08010610

08006814 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <pbuf_cat+0x16>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d107      	bne.n	800683a <pbuf_cat+0x26>
 800682a:	4b20      	ldr	r3, [pc, #128]	; (80068ac <pbuf_cat+0x98>)
 800682c:	f240 325a 	movw	r2, #858	; 0x35a
 8006830:	491f      	ldr	r1, [pc, #124]	; (80068b0 <pbuf_cat+0x9c>)
 8006832:	4820      	ldr	r0, [pc, #128]	; (80068b4 <pbuf_cat+0xa0>)
 8006834:	f008 fcaa 	bl	800f18c <iprintf>
 8006838:	e034      	b.n	80068a4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	e00a      	b.n	8006856 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	891a      	ldrh	r2, [r3, #8]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	891b      	ldrh	r3, [r3, #8]
 8006848:	4413      	add	r3, r2
 800684a:	b29a      	uxth	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f0      	bne.n	8006840 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	891a      	ldrh	r2, [r3, #8]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	895b      	ldrh	r3, [r3, #10]
 8006866:	429a      	cmp	r2, r3
 8006868:	d006      	beq.n	8006878 <pbuf_cat+0x64>
 800686a:	4b10      	ldr	r3, [pc, #64]	; (80068ac <pbuf_cat+0x98>)
 800686c:	f240 3262 	movw	r2, #866	; 0x362
 8006870:	4911      	ldr	r1, [pc, #68]	; (80068b8 <pbuf_cat+0xa4>)
 8006872:	4810      	ldr	r0, [pc, #64]	; (80068b4 <pbuf_cat+0xa0>)
 8006874:	f008 fc8a 	bl	800f18c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d006      	beq.n	800688e <pbuf_cat+0x7a>
 8006880:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <pbuf_cat+0x98>)
 8006882:	f240 3263 	movw	r2, #867	; 0x363
 8006886:	490d      	ldr	r1, [pc, #52]	; (80068bc <pbuf_cat+0xa8>)
 8006888:	480a      	ldr	r0, [pc, #40]	; (80068b4 <pbuf_cat+0xa0>)
 800688a:	f008 fc7f 	bl	800f18c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	891a      	ldrh	r2, [r3, #8]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	891b      	ldrh	r3, [r3, #8]
 8006896:	4413      	add	r3, r2
 8006898:	b29a      	uxth	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	080105b0 	.word	0x080105b0
 80068b0:	080107a4 	.word	0x080107a4
 80068b4:	08010610 	.word	0x08010610
 80068b8:	080107dc 	.word	0x080107dc
 80068bc:	0801080c 	.word	0x0801080c

080068c0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80068ca:	6839      	ldr	r1, [r7, #0]
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff ffa1 	bl	8006814 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80068d2:	6838      	ldr	r0, [r7, #0]
 80068d4:	f7ff ff7c 	bl	80067d0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80068ea:	2300      	movs	r3, #0
 80068ec:	617b      	str	r3, [r7, #20]
 80068ee:	2300      	movs	r3, #0
 80068f0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d008      	beq.n	800690a <pbuf_copy+0x2a>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <pbuf_copy+0x2a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	891a      	ldrh	r2, [r3, #8]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	891b      	ldrh	r3, [r3, #8]
 8006906:	429a      	cmp	r2, r3
 8006908:	d209      	bcs.n	800691e <pbuf_copy+0x3e>
 800690a:	4b57      	ldr	r3, [pc, #348]	; (8006a68 <pbuf_copy+0x188>)
 800690c:	f240 32ca 	movw	r2, #970	; 0x3ca
 8006910:	4956      	ldr	r1, [pc, #344]	; (8006a6c <pbuf_copy+0x18c>)
 8006912:	4857      	ldr	r0, [pc, #348]	; (8006a70 <pbuf_copy+0x190>)
 8006914:	f008 fc3a 	bl	800f18c <iprintf>
 8006918:	f06f 030f 	mvn.w	r3, #15
 800691c:	e09f      	b.n	8006a5e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	895b      	ldrh	r3, [r3, #10]
 8006922:	461a      	mov	r2, r3
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	1ad2      	subs	r2, r2, r3
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	895b      	ldrh	r3, [r3, #10]
 800692c:	4619      	mov	r1, r3
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1acb      	subs	r3, r1, r3
 8006932:	429a      	cmp	r2, r3
 8006934:	d306      	bcc.n	8006944 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	895b      	ldrh	r3, [r3, #10]
 800693a:	461a      	mov	r2, r3
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	e005      	b.n	8006950 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	895b      	ldrh	r3, [r3, #10]
 8006948:	461a      	mov	r2, r3
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	18d0      	adds	r0, r2, r3
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	4413      	add	r3, r2
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4619      	mov	r1, r3
 8006964:	f008 fbff 	bl	800f166 <memcpy>
    offset_to += len;
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4413      	add	r3, r2
 800696e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	895b      	ldrh	r3, [r3, #10]
 800697c:	461a      	mov	r2, r3
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	4293      	cmp	r3, r2
 8006982:	d906      	bls.n	8006992 <pbuf_copy+0xb2>
 8006984:	4b38      	ldr	r3, [pc, #224]	; (8006a68 <pbuf_copy+0x188>)
 8006986:	f240 32d9 	movw	r2, #985	; 0x3d9
 800698a:	493a      	ldr	r1, [pc, #232]	; (8006a74 <pbuf_copy+0x194>)
 800698c:	4838      	ldr	r0, [pc, #224]	; (8006a70 <pbuf_copy+0x190>)
 800698e:	f008 fbfd 	bl	800f18c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	895b      	ldrh	r3, [r3, #10]
 8006996:	461a      	mov	r2, r3
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	4293      	cmp	r3, r2
 800699c:	d906      	bls.n	80069ac <pbuf_copy+0xcc>
 800699e:	4b32      	ldr	r3, [pc, #200]	; (8006a68 <pbuf_copy+0x188>)
 80069a0:	f240 32da 	movw	r2, #986	; 0x3da
 80069a4:	4934      	ldr	r1, [pc, #208]	; (8006a78 <pbuf_copy+0x198>)
 80069a6:	4832      	ldr	r0, [pc, #200]	; (8006a70 <pbuf_copy+0x190>)
 80069a8:	f008 fbf0 	bl	800f18c <iprintf>
    if (offset_from >= p_from->len) {
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	895b      	ldrh	r3, [r3, #10]
 80069b0:	461a      	mov	r2, r3
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d304      	bcc.n	80069c2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	895b      	ldrh	r3, [r3, #10]
 80069c6:	461a      	mov	r2, r3
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d114      	bne.n	80069f8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10c      	bne.n	80069f8 <pbuf_copy+0x118>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d009      	beq.n	80069f8 <pbuf_copy+0x118>
 80069e4:	4b20      	ldr	r3, [pc, #128]	; (8006a68 <pbuf_copy+0x188>)
 80069e6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80069ea:	4924      	ldr	r1, [pc, #144]	; (8006a7c <pbuf_copy+0x19c>)
 80069ec:	4820      	ldr	r0, [pc, #128]	; (8006a70 <pbuf_copy+0x190>)
 80069ee:	f008 fbcd 	bl	800f18c <iprintf>
 80069f2:	f06f 030f 	mvn.w	r3, #15
 80069f6:	e032      	b.n	8006a5e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d013      	beq.n	8006a26 <pbuf_copy+0x146>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	895a      	ldrh	r2, [r3, #10]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	891b      	ldrh	r3, [r3, #8]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d10d      	bne.n	8006a26 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <pbuf_copy+0x146>
 8006a12:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <pbuf_copy+0x188>)
 8006a14:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8006a18:	4919      	ldr	r1, [pc, #100]	; (8006a80 <pbuf_copy+0x1a0>)
 8006a1a:	4815      	ldr	r0, [pc, #84]	; (8006a70 <pbuf_copy+0x190>)
 8006a1c:	f008 fbb6 	bl	800f18c <iprintf>
 8006a20:	f06f 0305 	mvn.w	r3, #5
 8006a24:	e01b      	b.n	8006a5e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d013      	beq.n	8006a54 <pbuf_copy+0x174>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	895a      	ldrh	r2, [r3, #10]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	891b      	ldrh	r3, [r3, #8]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d10d      	bne.n	8006a54 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d009      	beq.n	8006a54 <pbuf_copy+0x174>
 8006a40:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <pbuf_copy+0x188>)
 8006a42:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8006a46:	490e      	ldr	r1, [pc, #56]	; (8006a80 <pbuf_copy+0x1a0>)
 8006a48:	4809      	ldr	r0, [pc, #36]	; (8006a70 <pbuf_copy+0x190>)
 8006a4a:	f008 fb9f 	bl	800f18c <iprintf>
 8006a4e:	f06f 0305 	mvn.w	r3, #5
 8006a52:	e004      	b.n	8006a5e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f47f af61 	bne.w	800691e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	080105b0 	.word	0x080105b0
 8006a6c:	08010858 	.word	0x08010858
 8006a70:	08010610 	.word	0x08010610
 8006a74:	08010888 	.word	0x08010888
 8006a78:	080108a0 	.word	0x080108a0
 8006a7c:	080108bc 	.word	0x080108bc
 8006a80:	080108cc 	.word	0x080108cc

08006a84 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	4611      	mov	r1, r2
 8006a90:	461a      	mov	r2, r3
 8006a92:	460b      	mov	r3, r1
 8006a94:	80fb      	strh	r3, [r7, #6]
 8006a96:	4613      	mov	r3, r2
 8006a98:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d108      	bne.n	8006aba <pbuf_copy_partial+0x36>
 8006aa8:	4b2b      	ldr	r3, [pc, #172]	; (8006b58 <pbuf_copy_partial+0xd4>)
 8006aaa:	f240 420a 	movw	r2, #1034	; 0x40a
 8006aae:	492b      	ldr	r1, [pc, #172]	; (8006b5c <pbuf_copy_partial+0xd8>)
 8006ab0:	482b      	ldr	r0, [pc, #172]	; (8006b60 <pbuf_copy_partial+0xdc>)
 8006ab2:	f008 fb6b 	bl	800f18c <iprintf>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e04a      	b.n	8006b50 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d108      	bne.n	8006ad2 <pbuf_copy_partial+0x4e>
 8006ac0:	4b25      	ldr	r3, [pc, #148]	; (8006b58 <pbuf_copy_partial+0xd4>)
 8006ac2:	f240 420b 	movw	r2, #1035	; 0x40b
 8006ac6:	4927      	ldr	r1, [pc, #156]	; (8006b64 <pbuf_copy_partial+0xe0>)
 8006ac8:	4825      	ldr	r0, [pc, #148]	; (8006b60 <pbuf_copy_partial+0xdc>)
 8006aca:	f008 fb5f 	bl	800f18c <iprintf>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e03e      	b.n	8006b50 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	61fb      	str	r3, [r7, #28]
 8006ad6:	e034      	b.n	8006b42 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006ad8:	88bb      	ldrh	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <pbuf_copy_partial+0x70>
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	895b      	ldrh	r3, [r3, #10]
 8006ae2:	88ba      	ldrh	r2, [r7, #4]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d305      	bcc.n	8006af4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	895b      	ldrh	r3, [r3, #10]
 8006aec:	88ba      	ldrh	r2, [r7, #4]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	80bb      	strh	r3, [r7, #4]
 8006af2:	e023      	b.n	8006b3c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	895a      	ldrh	r2, [r3, #10]
 8006af8:	88bb      	ldrh	r3, [r7, #4]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006afe:	8b3a      	ldrh	r2, [r7, #24]
 8006b00:	88fb      	ldrh	r3, [r7, #6]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d901      	bls.n	8006b0a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006b06:	88fb      	ldrh	r3, [r7, #6]
 8006b08:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006b0a:	8b7b      	ldrh	r3, [r7, #26]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	18d0      	adds	r0, r2, r3
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	88bb      	ldrh	r3, [r7, #4]
 8006b16:	4413      	add	r3, r2
 8006b18:	8b3a      	ldrh	r2, [r7, #24]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	f008 fb23 	bl	800f166 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006b20:	8afa      	ldrh	r2, [r7, #22]
 8006b22:	8b3b      	ldrh	r3, [r7, #24]
 8006b24:	4413      	add	r3, r2
 8006b26:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006b28:	8b7a      	ldrh	r2, [r7, #26]
 8006b2a:	8b3b      	ldrh	r3, [r7, #24]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006b30:	88fa      	ldrh	r2, [r7, #6]
 8006b32:	8b3b      	ldrh	r3, [r7, #24]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	61fb      	str	r3, [r7, #28]
 8006b42:	88fb      	ldrh	r3, [r7, #6]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <pbuf_copy_partial+0xca>
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1c4      	bne.n	8006ad8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006b4e:	8afb      	ldrh	r3, [r7, #22]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3720      	adds	r7, #32
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	080105b0 	.word	0x080105b0
 8006b5c:	080108f8 	.word	0x080108f8
 8006b60:	08010610 	.word	0x08010610
 8006b64:	08010918 	.word	0x08010918

08006b68 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	4613      	mov	r3, r2
 8006b74:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d109      	bne.n	8006b98 <pbuf_take+0x30>
 8006b84:	4b3a      	ldr	r3, [pc, #232]	; (8006c70 <pbuf_take+0x108>)
 8006b86:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8006b8a:	493a      	ldr	r1, [pc, #232]	; (8006c74 <pbuf_take+0x10c>)
 8006b8c:	483a      	ldr	r0, [pc, #232]	; (8006c78 <pbuf_take+0x110>)
 8006b8e:	f008 fafd 	bl	800f18c <iprintf>
 8006b92:	f06f 030f 	mvn.w	r3, #15
 8006b96:	e067      	b.n	8006c68 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <pbuf_take+0x4a>
 8006b9e:	4b34      	ldr	r3, [pc, #208]	; (8006c70 <pbuf_take+0x108>)
 8006ba0:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8006ba4:	4935      	ldr	r1, [pc, #212]	; (8006c7c <pbuf_take+0x114>)
 8006ba6:	4834      	ldr	r0, [pc, #208]	; (8006c78 <pbuf_take+0x110>)
 8006ba8:	f008 faf0 	bl	800f18c <iprintf>
 8006bac:	f06f 030f 	mvn.w	r3, #15
 8006bb0:	e05a      	b.n	8006c68 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	891b      	ldrh	r3, [r3, #8]
 8006bb6:	88fa      	ldrh	r2, [r7, #6]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d909      	bls.n	8006bd0 <pbuf_take+0x68>
 8006bbc:	4b2c      	ldr	r3, [pc, #176]	; (8006c70 <pbuf_take+0x108>)
 8006bbe:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8006bc2:	492f      	ldr	r1, [pc, #188]	; (8006c80 <pbuf_take+0x118>)
 8006bc4:	482c      	ldr	r0, [pc, #176]	; (8006c78 <pbuf_take+0x110>)
 8006bc6:	f008 fae1 	bl	800f18c <iprintf>
 8006bca:	f04f 33ff 	mov.w	r3, #4294967295
 8006bce:	e04b      	b.n	8006c68 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d007      	beq.n	8006be6 <pbuf_take+0x7e>
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d004      	beq.n	8006be6 <pbuf_take+0x7e>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	891b      	ldrh	r3, [r3, #8]
 8006be0:	88fa      	ldrh	r2, [r7, #6]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d902      	bls.n	8006bec <pbuf_take+0x84>
    return ERR_ARG;
 8006be6:	f06f 030f 	mvn.w	r3, #15
 8006bea:	e03d      	b.n	8006c68 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	e028      	b.n	8006c44 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d106      	bne.n	8006c06 <pbuf_take+0x9e>
 8006bf8:	4b1d      	ldr	r3, [pc, #116]	; (8006c70 <pbuf_take+0x108>)
 8006bfa:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006bfe:	4921      	ldr	r1, [pc, #132]	; (8006c84 <pbuf_take+0x11c>)
 8006c00:	481d      	ldr	r0, [pc, #116]	; (8006c78 <pbuf_take+0x110>)
 8006c02:	f008 fac3 	bl	800f18c <iprintf>
    buf_copy_len = total_copy_len;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	895b      	ldrh	r3, [r3, #10]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d902      	bls.n	8006c1c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	895b      	ldrh	r3, [r3, #10]
 8006c1a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	6858      	ldr	r0, [r3, #4]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	4413      	add	r3, r2
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	f008 fa9c 	bl	800f166 <memcpy>
    total_copy_len -= buf_copy_len;
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	61fb      	str	r3, [r7, #28]
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1d3      	bne.n	8006bf2 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d103      	bne.n	8006c58 <pbuf_take+0xf0>
 8006c50:	88fb      	ldrh	r3, [r7, #6]
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d006      	beq.n	8006c66 <pbuf_take+0xfe>
 8006c58:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <pbuf_take+0x108>)
 8006c5a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8006c5e:	490a      	ldr	r1, [pc, #40]	; (8006c88 <pbuf_take+0x120>)
 8006c60:	4805      	ldr	r0, [pc, #20]	; (8006c78 <pbuf_take+0x110>)
 8006c62:	f008 fa93 	bl	800f18c <iprintf>
  return ERR_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3720      	adds	r7, #32
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	080105b0 	.word	0x080105b0
 8006c74:	08010988 	.word	0x08010988
 8006c78:	08010610 	.word	0x08010610
 8006c7c:	080109a0 	.word	0x080109a0
 8006c80:	080109bc 	.word	0x080109bc
 8006c84:	080109dc 	.word	0x080109dc
 8006c88:	080109f4 	.word	0x080109f4

08006c8c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4603      	mov	r3, r0
 8006c94:	603a      	str	r2, [r7, #0]
 8006c96:	71fb      	strb	r3, [r7, #7]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	8919      	ldrh	r1, [r3, #8]
 8006ca0:	88ba      	ldrh	r2, [r7, #4]
 8006ca2:	79fb      	ldrb	r3, [r7, #7]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff fa13 	bl	80060d0 <pbuf_alloc>
 8006caa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <pbuf_clone+0x2a>
    return NULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e011      	b.n	8006cda <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f7ff fe11 	bl	80068e0 <pbuf_copy>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006cc2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d006      	beq.n	8006cd8 <pbuf_clone+0x4c>
 8006cca:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <pbuf_clone+0x58>)
 8006ccc:	f240 5224 	movw	r2, #1316	; 0x524
 8006cd0:	4905      	ldr	r1, [pc, #20]	; (8006ce8 <pbuf_clone+0x5c>)
 8006cd2:	4806      	ldr	r0, [pc, #24]	; (8006cec <pbuf_clone+0x60>)
 8006cd4:	f008 fa5a 	bl	800f18c <iprintf>
  return q;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	080105b0 	.word	0x080105b0
 8006ce8:	08010a24 	.word	0x08010a24
 8006cec:	08010610 	.word	0x08010610

08006cf0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006cf4:	f008 fa62 	bl	800f1bc <rand>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	4b01      	ldr	r3, [pc, #4]	; (8006d10 <tcp_init+0x20>)
 8006d0a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006d0c:	bf00      	nop
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20000072 	.word	0x20000072

08006d14 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7d1b      	ldrb	r3, [r3, #20]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d105      	bne.n	8006d30 <tcp_free+0x1c>
 8006d24:	4b06      	ldr	r3, [pc, #24]	; (8006d40 <tcp_free+0x2c>)
 8006d26:	22d4      	movs	r2, #212	; 0xd4
 8006d28:	4906      	ldr	r1, [pc, #24]	; (8006d44 <tcp_free+0x30>)
 8006d2a:	4807      	ldr	r0, [pc, #28]	; (8006d48 <tcp_free+0x34>)
 8006d2c:	f008 fa2e 	bl	800f18c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006d30:	6879      	ldr	r1, [r7, #4]
 8006d32:	2001      	movs	r0, #1
 8006d34:	f7fe feb2 	bl	8005a9c <memp_free>
}
 8006d38:	bf00      	nop
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	08010ab0 	.word	0x08010ab0
 8006d44:	08010ae0 	.word	0x08010ae0
 8006d48:	08010af4 	.word	0x08010af4

08006d4c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	7d1b      	ldrb	r3, [r3, #20]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d105      	bne.n	8006d68 <tcp_free_listen+0x1c>
 8006d5c:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <tcp_free_listen+0x2c>)
 8006d5e:	22df      	movs	r2, #223	; 0xdf
 8006d60:	4906      	ldr	r1, [pc, #24]	; (8006d7c <tcp_free_listen+0x30>)
 8006d62:	4807      	ldr	r0, [pc, #28]	; (8006d80 <tcp_free_listen+0x34>)
 8006d64:	f008 fa12 	bl	800f18c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	2002      	movs	r0, #2
 8006d6c:	f7fe fe96 	bl	8005a9c <memp_free>
}
 8006d70:	bf00      	nop
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	08010ab0 	.word	0x08010ab0
 8006d7c:	08010b1c 	.word	0x08010b1c
 8006d80:	08010af4 	.word	0x08010af4

08006d84 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006d88:	f000 fe98 	bl	8007abc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006d8c:	4b07      	ldr	r3, [pc, #28]	; (8006dac <tcp_tmr+0x28>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	3301      	adds	r3, #1
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	4b05      	ldr	r3, [pc, #20]	; (8006dac <tcp_tmr+0x28>)
 8006d96:	701a      	strb	r2, [r3, #0]
 8006d98:	4b04      	ldr	r3, [pc, #16]	; (8006dac <tcp_tmr+0x28>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006da4:	f000 fb4c 	bl	8007440 <tcp_slowtmr>
  }
}
 8006da8:	bf00      	nop
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20000265 	.word	0x20000265

08006db0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d105      	bne.n	8006dcc <tcp_remove_listener+0x1c>
 8006dc0:	4b0d      	ldr	r3, [pc, #52]	; (8006df8 <tcp_remove_listener+0x48>)
 8006dc2:	22ff      	movs	r2, #255	; 0xff
 8006dc4:	490d      	ldr	r1, [pc, #52]	; (8006dfc <tcp_remove_listener+0x4c>)
 8006dc6:	480e      	ldr	r0, [pc, #56]	; (8006e00 <tcp_remove_listener+0x50>)
 8006dc8:	f008 f9e0 	bl	800f18c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	e00a      	b.n	8006de8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d102      	bne.n	8006de2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f1      	bne.n	8006dd2 <tcp_remove_listener+0x22>
    }
  }
}
 8006dee:	bf00      	nop
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	08010ab0 	.word	0x08010ab0
 8006dfc:	08010b38 	.word	0x08010b38
 8006e00:	08010af4 	.word	0x08010af4

08006e04 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <tcp_listen_closed+0x1c>
 8006e12:	4b14      	ldr	r3, [pc, #80]	; (8006e64 <tcp_listen_closed+0x60>)
 8006e14:	f240 1211 	movw	r2, #273	; 0x111
 8006e18:	4913      	ldr	r1, [pc, #76]	; (8006e68 <tcp_listen_closed+0x64>)
 8006e1a:	4814      	ldr	r0, [pc, #80]	; (8006e6c <tcp_listen_closed+0x68>)
 8006e1c:	f008 f9b6 	bl	800f18c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	7d1b      	ldrb	r3, [r3, #20]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d006      	beq.n	8006e36 <tcp_listen_closed+0x32>
 8006e28:	4b0e      	ldr	r3, [pc, #56]	; (8006e64 <tcp_listen_closed+0x60>)
 8006e2a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006e2e:	4910      	ldr	r1, [pc, #64]	; (8006e70 <tcp_listen_closed+0x6c>)
 8006e30:	480e      	ldr	r0, [pc, #56]	; (8006e6c <tcp_listen_closed+0x68>)
 8006e32:	f008 f9ab 	bl	800f18c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006e36:	2301      	movs	r3, #1
 8006e38:	60fb      	str	r3, [r7, #12]
 8006e3a:	e00b      	b.n	8006e54 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006e3c:	4a0d      	ldr	r2, [pc, #52]	; (8006e74 <tcp_listen_closed+0x70>)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6879      	ldr	r1, [r7, #4]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7ff ffb1 	bl	8006db0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3301      	adds	r3, #1
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d9f0      	bls.n	8006e3c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006e5a:	bf00      	nop
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	08010ab0 	.word	0x08010ab0
 8006e68:	08010b60 	.word	0x08010b60
 8006e6c:	08010af4 	.word	0x08010af4
 8006e70:	08010b6c 	.word	0x08010b6c
 8006e74:	08012a84 	.word	0x08012a84

08006e78 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006e78:	b5b0      	push	{r4, r5, r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af04      	add	r7, sp, #16
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	460b      	mov	r3, r1
 8006e82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <tcp_close_shutdown+0x20>
 8006e8a:	4b61      	ldr	r3, [pc, #388]	; (8007010 <tcp_close_shutdown+0x198>)
 8006e8c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006e90:	4960      	ldr	r1, [pc, #384]	; (8007014 <tcp_close_shutdown+0x19c>)
 8006e92:	4861      	ldr	r0, [pc, #388]	; (8007018 <tcp_close_shutdown+0x1a0>)
 8006e94:	f008 f97a 	bl	800f18c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006e98:	78fb      	ldrb	r3, [r7, #3]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d066      	beq.n	8006f6c <tcp_close_shutdown+0xf4>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	7d1b      	ldrb	r3, [r3, #20]
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d003      	beq.n	8006eae <tcp_close_shutdown+0x36>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	7d1b      	ldrb	r3, [r3, #20]
 8006eaa:	2b07      	cmp	r3, #7
 8006eac:	d15e      	bne.n	8006f6c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d104      	bne.n	8006ec0 <tcp_close_shutdown+0x48>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006ebe:	d055      	beq.n	8006f6c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	8b5b      	ldrh	r3, [r3, #26]
 8006ec4:	f003 0310 	and.w	r3, r3, #16
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d106      	bne.n	8006eda <tcp_close_shutdown+0x62>
 8006ecc:	4b50      	ldr	r3, [pc, #320]	; (8007010 <tcp_close_shutdown+0x198>)
 8006ece:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006ed2:	4952      	ldr	r1, [pc, #328]	; (800701c <tcp_close_shutdown+0x1a4>)
 8006ed4:	4850      	ldr	r0, [pc, #320]	; (8007018 <tcp_close_shutdown+0x1a0>)
 8006ed6:	f008 f959 	bl	800f18c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006ee2:	687d      	ldr	r5, [r7, #4]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	8ad2      	ldrh	r2, [r2, #22]
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	8b09      	ldrh	r1, [r1, #24]
 8006ef0:	9102      	str	r1, [sp, #8]
 8006ef2:	9201      	str	r2, [sp, #4]
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	462b      	mov	r3, r5
 8006ef8:	4622      	mov	r2, r4
 8006efa:	4601      	mov	r1, r0
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f004 fe91 	bl	800bc24 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f001 f8ba 	bl	800807c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006f08:	4b45      	ldr	r3, [pc, #276]	; (8007020 <tcp_close_shutdown+0x1a8>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d105      	bne.n	8006f1e <tcp_close_shutdown+0xa6>
 8006f12:	4b43      	ldr	r3, [pc, #268]	; (8007020 <tcp_close_shutdown+0x1a8>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	4a41      	ldr	r2, [pc, #260]	; (8007020 <tcp_close_shutdown+0x1a8>)
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	e013      	b.n	8006f46 <tcp_close_shutdown+0xce>
 8006f1e:	4b40      	ldr	r3, [pc, #256]	; (8007020 <tcp_close_shutdown+0x1a8>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	e00c      	b.n	8006f40 <tcp_close_shutdown+0xc8>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d104      	bne.n	8006f3a <tcp_close_shutdown+0xc2>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	60da      	str	r2, [r3, #12]
 8006f38:	e005      	b.n	8006f46 <tcp_close_shutdown+0xce>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1ef      	bne.n	8006f26 <tcp_close_shutdown+0xae>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	60da      	str	r2, [r3, #12]
 8006f4c:	4b35      	ldr	r3, [pc, #212]	; (8007024 <tcp_close_shutdown+0x1ac>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006f52:	4b35      	ldr	r3, [pc, #212]	; (8007028 <tcp_close_shutdown+0x1b0>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d102      	bne.n	8006f62 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006f5c:	f003 fd4c 	bl	800a9f8 <tcp_trigger_input_pcb_close>
 8006f60:	e002      	b.n	8006f68 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff fed6 	bl	8006d14 <tcp_free>
      }
      return ERR_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	e04d      	b.n	8007008 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	7d1b      	ldrb	r3, [r3, #20]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d02d      	beq.n	8006fd0 <tcp_close_shutdown+0x158>
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d036      	beq.n	8006fe6 <tcp_close_shutdown+0x16e>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d13f      	bne.n	8006ffc <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	8adb      	ldrh	r3, [r3, #22]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d021      	beq.n	8006fc8 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006f84:	4b29      	ldr	r3, [pc, #164]	; (800702c <tcp_close_shutdown+0x1b4>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d105      	bne.n	8006f9a <tcp_close_shutdown+0x122>
 8006f8e:	4b27      	ldr	r3, [pc, #156]	; (800702c <tcp_close_shutdown+0x1b4>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	4a25      	ldr	r2, [pc, #148]	; (800702c <tcp_close_shutdown+0x1b4>)
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	e013      	b.n	8006fc2 <tcp_close_shutdown+0x14a>
 8006f9a:	4b24      	ldr	r3, [pc, #144]	; (800702c <tcp_close_shutdown+0x1b4>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	60bb      	str	r3, [r7, #8]
 8006fa0:	e00c      	b.n	8006fbc <tcp_close_shutdown+0x144>
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d104      	bne.n	8006fb6 <tcp_close_shutdown+0x13e>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	60da      	str	r2, [r3, #12]
 8006fb4:	e005      	b.n	8006fc2 <tcp_close_shutdown+0x14a>
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	60bb      	str	r3, [r7, #8]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1ef      	bne.n	8006fa2 <tcp_close_shutdown+0x12a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff fea3 	bl	8006d14 <tcp_free>
      break;
 8006fce:	e01a      	b.n	8007006 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff ff17 	bl	8006e04 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006fd6:	6879      	ldr	r1, [r7, #4]
 8006fd8:	4815      	ldr	r0, [pc, #84]	; (8007030 <tcp_close_shutdown+0x1b8>)
 8006fda:	f001 f89f 	bl	800811c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff feb4 	bl	8006d4c <tcp_free_listen>
      break;
 8006fe4:	e00f      	b.n	8007006 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	480d      	ldr	r0, [pc, #52]	; (8007020 <tcp_close_shutdown+0x1a8>)
 8006fea:	f001 f897 	bl	800811c <tcp_pcb_remove>
 8006fee:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <tcp_close_shutdown+0x1ac>)
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff fe8d 	bl	8006d14 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006ffa:	e004      	b.n	8007006 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f819 	bl	8007034 <tcp_close_shutdown_fin>
 8007002:	4603      	mov	r3, r0
 8007004:	e000      	b.n	8007008 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bdb0      	pop	{r4, r5, r7, pc}
 8007010:	08010ab0 	.word	0x08010ab0
 8007014:	08010b84 	.word	0x08010b84
 8007018:	08010af4 	.word	0x08010af4
 800701c:	08010ba4 	.word	0x08010ba4
 8007020:	20006ec4 	.word	0x20006ec4
 8007024:	20006ec0 	.word	0x20006ec0
 8007028:	20006ed8 	.word	0x20006ed8
 800702c:	20006ed0 	.word	0x20006ed0
 8007030:	20006ecc 	.word	0x20006ecc

08007034 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d106      	bne.n	8007050 <tcp_close_shutdown_fin+0x1c>
 8007042:	4b2c      	ldr	r3, [pc, #176]	; (80070f4 <tcp_close_shutdown_fin+0xc0>)
 8007044:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007048:	492b      	ldr	r1, [pc, #172]	; (80070f8 <tcp_close_shutdown_fin+0xc4>)
 800704a:	482c      	ldr	r0, [pc, #176]	; (80070fc <tcp_close_shutdown_fin+0xc8>)
 800704c:	f008 f89e 	bl	800f18c <iprintf>

  switch (pcb->state) {
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	7d1b      	ldrb	r3, [r3, #20]
 8007054:	2b04      	cmp	r3, #4
 8007056:	d010      	beq.n	800707a <tcp_close_shutdown_fin+0x46>
 8007058:	2b07      	cmp	r3, #7
 800705a:	d01b      	beq.n	8007094 <tcp_close_shutdown_fin+0x60>
 800705c:	2b03      	cmp	r3, #3
 800705e:	d126      	bne.n	80070ae <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f003 fedb 	bl	800ae1c <tcp_send_fin>
 8007066:	4603      	mov	r3, r0
 8007068:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800706a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d11f      	bne.n	80070b2 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2205      	movs	r2, #5
 8007076:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007078:	e01b      	b.n	80070b2 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f003 fece 	bl	800ae1c <tcp_send_fin>
 8007080:	4603      	mov	r3, r0
 8007082:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d114      	bne.n	80070b6 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2205      	movs	r2, #5
 8007090:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007092:	e010      	b.n	80070b6 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f003 fec1 	bl	800ae1c <tcp_send_fin>
 800709a:	4603      	mov	r3, r0
 800709c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800709e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2209      	movs	r2, #9
 80070aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80070ac:	e005      	b.n	80070ba <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	e01c      	b.n	80070ec <tcp_close_shutdown_fin+0xb8>
      break;
 80070b2:	bf00      	nop
 80070b4:	e002      	b.n	80070bc <tcp_close_shutdown_fin+0x88>
      break;
 80070b6:	bf00      	nop
 80070b8:	e000      	b.n	80070bc <tcp_close_shutdown_fin+0x88>
      break;
 80070ba:	bf00      	nop
  }

  if (err == ERR_OK) {
 80070bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d103      	bne.n	80070cc <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f003 ffe7 	bl	800b098 <tcp_output>
 80070ca:	e00d      	b.n	80070e8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 80070cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d4:	d108      	bne.n	80070e8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	8b5b      	ldrh	r3, [r3, #26]
 80070da:	f043 0308 	orr.w	r3, r3, #8
 80070de:	b29a      	uxth	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	e001      	b.n	80070ec <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 80070e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	08010ab0 	.word	0x08010ab0
 80070f8:	08010b60 	.word	0x08010b60
 80070fc:	08010af4 	.word	0x08010af4

08007100 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <tcp_close+0x22>
 800710e:	4b0f      	ldr	r3, [pc, #60]	; (800714c <tcp_close+0x4c>)
 8007110:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007114:	490e      	ldr	r1, [pc, #56]	; (8007150 <tcp_close+0x50>)
 8007116:	480f      	ldr	r0, [pc, #60]	; (8007154 <tcp_close+0x54>)
 8007118:	f008 f838 	bl	800f18c <iprintf>
 800711c:	f06f 030f 	mvn.w	r3, #15
 8007120:	e00f      	b.n	8007142 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	7d1b      	ldrb	r3, [r3, #20]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d006      	beq.n	8007138 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	8b5b      	ldrh	r3, [r3, #26]
 800712e:	f043 0310 	orr.w	r3, r3, #16
 8007132:	b29a      	uxth	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007138:	2101      	movs	r1, #1
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff fe9c 	bl	8006e78 <tcp_close_shutdown>
 8007140:	4603      	mov	r3, r0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	08010ab0 	.word	0x08010ab0
 8007150:	08010bc0 	.word	0x08010bc0
 8007154:	08010af4 	.word	0x08010af4

08007158 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08e      	sub	sp, #56	; 0x38
 800715c:	af04      	add	r7, sp, #16
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d107      	bne.n	8007178 <tcp_abandon+0x20>
 8007168:	4b52      	ldr	r3, [pc, #328]	; (80072b4 <tcp_abandon+0x15c>)
 800716a:	f240 223d 	movw	r2, #573	; 0x23d
 800716e:	4952      	ldr	r1, [pc, #328]	; (80072b8 <tcp_abandon+0x160>)
 8007170:	4852      	ldr	r0, [pc, #328]	; (80072bc <tcp_abandon+0x164>)
 8007172:	f008 f80b 	bl	800f18c <iprintf>
 8007176:	e099      	b.n	80072ac <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	7d1b      	ldrb	r3, [r3, #20]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d106      	bne.n	800718e <tcp_abandon+0x36>
 8007180:	4b4c      	ldr	r3, [pc, #304]	; (80072b4 <tcp_abandon+0x15c>)
 8007182:	f240 2241 	movw	r2, #577	; 0x241
 8007186:	494e      	ldr	r1, [pc, #312]	; (80072c0 <tcp_abandon+0x168>)
 8007188:	484c      	ldr	r0, [pc, #304]	; (80072bc <tcp_abandon+0x164>)
 800718a:	f007 ffff 	bl	800f18c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	7d1b      	ldrb	r3, [r3, #20]
 8007192:	2b0a      	cmp	r3, #10
 8007194:	d107      	bne.n	80071a6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	484a      	ldr	r0, [pc, #296]	; (80072c4 <tcp_abandon+0x16c>)
 800719a:	f000 ffbf 	bl	800811c <tcp_pcb_remove>
    tcp_free(pcb);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7ff fdb8 	bl	8006d14 <tcp_free>
 80071a4:	e082      	b.n	80072ac <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	7d1b      	ldrb	r3, [r3, #20]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d126      	bne.n	800721e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	8adb      	ldrh	r3, [r3, #22]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d02e      	beq.n	8007236 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80071d8:	4b3b      	ldr	r3, [pc, #236]	; (80072c8 <tcp_abandon+0x170>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d105      	bne.n	80071ee <tcp_abandon+0x96>
 80071e2:	4b39      	ldr	r3, [pc, #228]	; (80072c8 <tcp_abandon+0x170>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	4a37      	ldr	r2, [pc, #220]	; (80072c8 <tcp_abandon+0x170>)
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	e013      	b.n	8007216 <tcp_abandon+0xbe>
 80071ee:	4b36      	ldr	r3, [pc, #216]	; (80072c8 <tcp_abandon+0x170>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	61fb      	str	r3, [r7, #28]
 80071f4:	e00c      	b.n	8007210 <tcp_abandon+0xb8>
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d104      	bne.n	800720a <tcp_abandon+0xb2>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68da      	ldr	r2, [r3, #12]
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	60da      	str	r2, [r3, #12]
 8007208:	e005      	b.n	8007216 <tcp_abandon+0xbe>
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	61fb      	str	r3, [r7, #28]
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1ef      	bne.n	80071f6 <tcp_abandon+0x9e>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	60da      	str	r2, [r3, #12]
 800721c:	e00b      	b.n	8007236 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	8adb      	ldrh	r3, [r3, #22]
 8007226:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	4828      	ldr	r0, [pc, #160]	; (80072cc <tcp_abandon+0x174>)
 800722c:	f000 ff76 	bl	800811c <tcp_pcb_remove>
 8007230:	4b27      	ldr	r3, [pc, #156]	; (80072d0 <tcp_abandon+0x178>)
 8007232:	2201      	movs	r2, #1
 8007234:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723a:	2b00      	cmp	r3, #0
 800723c:	d004      	beq.n	8007248 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fd1a 	bl	8007c7c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800724c:	2b00      	cmp	r3, #0
 800724e:	d004      	beq.n	800725a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fd11 	bl	8007c7c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800725e:	2b00      	cmp	r3, #0
 8007260:	d004      	beq.n	800726c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007266:	4618      	mov	r0, r3
 8007268:	f000 fd08 	bl	8007c7c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00e      	beq.n	8007290 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3304      	adds	r3, #4
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	8b12      	ldrh	r2, [r2, #24]
 800727c:	9202      	str	r2, [sp, #8]
 800727e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007280:	9201      	str	r2, [sp, #4]
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	460b      	mov	r3, r1
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	69b9      	ldr	r1, [r7, #24]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f004 fcca 	bl	800bc24 <tcp_rst>
    }
    last_state = pcb->state;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	7d1b      	ldrb	r3, [r3, #20]
 8007294:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7ff fd3c 	bl	8006d14 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d004      	beq.n	80072ac <tcp_abandon+0x154>
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f06f 010c 	mvn.w	r1, #12
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	4798      	blx	r3
  }
}
 80072ac:	3728      	adds	r7, #40	; 0x28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	08010ab0 	.word	0x08010ab0
 80072b8:	08010bf4 	.word	0x08010bf4
 80072bc:	08010af4 	.word	0x08010af4
 80072c0:	08010c10 	.word	0x08010c10
 80072c4:	20006ed4 	.word	0x20006ed4
 80072c8:	20006ed0 	.word	0x20006ed0
 80072cc:	20006ec4 	.word	0x20006ec4
 80072d0:	20006ec0 	.word	0x20006ec0

080072d4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80072dc:	2101      	movs	r1, #1
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7ff ff3a 	bl	8007158 <tcp_abandon>
}
 80072e4:	bf00      	nop
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d106      	bne.n	8007308 <tcp_update_rcv_ann_wnd+0x1c>
 80072fa:	4b25      	ldr	r3, [pc, #148]	; (8007390 <tcp_update_rcv_ann_wnd+0xa4>)
 80072fc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007300:	4924      	ldr	r1, [pc, #144]	; (8007394 <tcp_update_rcv_ann_wnd+0xa8>)
 8007302:	4825      	ldr	r0, [pc, #148]	; (8007398 <tcp_update_rcv_ann_wnd+0xac>)
 8007304:	f007 ff42 	bl	800f18c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007310:	4413      	add	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800731c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007320:	bf28      	it	cs
 8007322:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007326:	b292      	uxth	r2, r2
 8007328:	4413      	add	r3, r2
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	db08      	blt.n	8007344 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	e020      	b.n	8007386 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	dd03      	ble.n	800735a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007358:	e014      	b.n	8007384 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800736c:	d306      	bcc.n	800737c <tcp_update_rcv_ann_wnd+0x90>
 800736e:	4b08      	ldr	r3, [pc, #32]	; (8007390 <tcp_update_rcv_ann_wnd+0xa4>)
 8007370:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007374:	4909      	ldr	r1, [pc, #36]	; (800739c <tcp_update_rcv_ann_wnd+0xb0>)
 8007376:	4808      	ldr	r0, [pc, #32]	; (8007398 <tcp_update_rcv_ann_wnd+0xac>)
 8007378:	f007 ff08 	bl	800f18c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	b29a      	uxth	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007384:	2300      	movs	r3, #0
  }
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	08010ab0 	.word	0x08010ab0
 8007394:	08010d0c 	.word	0x08010d0c
 8007398:	08010af4 	.word	0x08010af4
 800739c:	08010d30 	.word	0x08010d30

080073a0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d107      	bne.n	80073c2 <tcp_recved+0x22>
 80073b2:	4b1f      	ldr	r3, [pc, #124]	; (8007430 <tcp_recved+0x90>)
 80073b4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80073b8:	491e      	ldr	r1, [pc, #120]	; (8007434 <tcp_recved+0x94>)
 80073ba:	481f      	ldr	r0, [pc, #124]	; (8007438 <tcp_recved+0x98>)
 80073bc:	f007 fee6 	bl	800f18c <iprintf>
 80073c0:	e032      	b.n	8007428 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	7d1b      	ldrb	r3, [r3, #20]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d106      	bne.n	80073d8 <tcp_recved+0x38>
 80073ca:	4b19      	ldr	r3, [pc, #100]	; (8007430 <tcp_recved+0x90>)
 80073cc:	f240 32d3 	movw	r2, #979	; 0x3d3
 80073d0:	491a      	ldr	r1, [pc, #104]	; (800743c <tcp_recved+0x9c>)
 80073d2:	4819      	ldr	r0, [pc, #100]	; (8007438 <tcp_recved+0x98>)
 80073d4:	f007 feda 	bl	800f18c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80073dc:	887b      	ldrh	r3, [r7, #2]
 80073de:	4413      	add	r3, r2
 80073e0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80073e2:	89fb      	ldrh	r3, [r7, #14]
 80073e4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80073e8:	d804      	bhi.n	80073f4 <tcp_recved+0x54>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ee:	89fa      	ldrh	r2, [r7, #14]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d204      	bcs.n	80073fe <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80073fa:	851a      	strh	r2, [r3, #40]	; 0x28
 80073fc:	e002      	b.n	8007404 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	89fa      	ldrh	r2, [r7, #14]
 8007402:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff ff71 	bl	80072ec <tcp_update_rcv_ann_wnd>
 800740a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007412:	d309      	bcc.n	8007428 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	8b5b      	ldrh	r3, [r3, #26]
 8007418:	f043 0302 	orr.w	r3, r3, #2
 800741c:	b29a      	uxth	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f003 fe38 	bl	800b098 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	08010ab0 	.word	0x08010ab0
 8007434:	08010d4c 	.word	0x08010d4c
 8007438:	08010af4 	.word	0x08010af4
 800743c:	08010d64 	.word	0x08010d64

08007440 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007440:	b5b0      	push	{r4, r5, r7, lr}
 8007442:	b090      	sub	sp, #64	; 0x40
 8007444:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800744c:	4b94      	ldr	r3, [pc, #592]	; (80076a0 <tcp_slowtmr+0x260>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3301      	adds	r3, #1
 8007452:	4a93      	ldr	r2, [pc, #588]	; (80076a0 <tcp_slowtmr+0x260>)
 8007454:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007456:	4b93      	ldr	r3, [pc, #588]	; (80076a4 <tcp_slowtmr+0x264>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	3301      	adds	r3, #1
 800745c:	b2da      	uxtb	r2, r3
 800745e:	4b91      	ldr	r3, [pc, #580]	; (80076a4 <tcp_slowtmr+0x264>)
 8007460:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007462:	2300      	movs	r3, #0
 8007464:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007466:	4b90      	ldr	r3, [pc, #576]	; (80076a8 <tcp_slowtmr+0x268>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800746c:	e29d      	b.n	80079aa <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800746e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007470:	7d1b      	ldrb	r3, [r3, #20]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d106      	bne.n	8007484 <tcp_slowtmr+0x44>
 8007476:	4b8d      	ldr	r3, [pc, #564]	; (80076ac <tcp_slowtmr+0x26c>)
 8007478:	f240 42be 	movw	r2, #1214	; 0x4be
 800747c:	498c      	ldr	r1, [pc, #560]	; (80076b0 <tcp_slowtmr+0x270>)
 800747e:	488d      	ldr	r0, [pc, #564]	; (80076b4 <tcp_slowtmr+0x274>)
 8007480:	f007 fe84 	bl	800f18c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007486:	7d1b      	ldrb	r3, [r3, #20]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d106      	bne.n	800749a <tcp_slowtmr+0x5a>
 800748c:	4b87      	ldr	r3, [pc, #540]	; (80076ac <tcp_slowtmr+0x26c>)
 800748e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007492:	4989      	ldr	r1, [pc, #548]	; (80076b8 <tcp_slowtmr+0x278>)
 8007494:	4887      	ldr	r0, [pc, #540]	; (80076b4 <tcp_slowtmr+0x274>)
 8007496:	f007 fe79 	bl	800f18c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800749a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749c:	7d1b      	ldrb	r3, [r3, #20]
 800749e:	2b0a      	cmp	r3, #10
 80074a0:	d106      	bne.n	80074b0 <tcp_slowtmr+0x70>
 80074a2:	4b82      	ldr	r3, [pc, #520]	; (80076ac <tcp_slowtmr+0x26c>)
 80074a4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80074a8:	4984      	ldr	r1, [pc, #528]	; (80076bc <tcp_slowtmr+0x27c>)
 80074aa:	4882      	ldr	r0, [pc, #520]	; (80076b4 <tcp_slowtmr+0x274>)
 80074ac:	f007 fe6e 	bl	800f18c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80074b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b2:	7f9a      	ldrb	r2, [r3, #30]
 80074b4:	4b7b      	ldr	r3, [pc, #492]	; (80076a4 <tcp_slowtmr+0x264>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d105      	bne.n	80074c8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80074c6:	e270      	b.n	80079aa <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80074c8:	4b76      	ldr	r3, [pc, #472]	; (80076a4 <tcp_slowtmr+0x264>)
 80074ca:	781a      	ldrb	r2, [r3, #0]
 80074cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ce:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80074d0:	2300      	movs	r3, #0
 80074d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80074dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074de:	7d1b      	ldrb	r3, [r3, #20]
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d10a      	bne.n	80074fa <tcp_slowtmr+0xba>
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074ea:	2b05      	cmp	r3, #5
 80074ec:	d905      	bls.n	80074fa <tcp_slowtmr+0xba>
      ++pcb_remove;
 80074ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074f2:	3301      	adds	r3, #1
 80074f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80074f8:	e11e      	b.n	8007738 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007500:	2b0b      	cmp	r3, #11
 8007502:	d905      	bls.n	8007510 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007508:	3301      	adds	r3, #1
 800750a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800750e:	e113      	b.n	8007738 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007512:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007516:	2b00      	cmp	r3, #0
 8007518:	d075      	beq.n	8007606 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751e:	2b00      	cmp	r3, #0
 8007520:	d006      	beq.n	8007530 <tcp_slowtmr+0xf0>
 8007522:	4b62      	ldr	r3, [pc, #392]	; (80076ac <tcp_slowtmr+0x26c>)
 8007524:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007528:	4965      	ldr	r1, [pc, #404]	; (80076c0 <tcp_slowtmr+0x280>)
 800752a:	4862      	ldr	r0, [pc, #392]	; (80076b4 <tcp_slowtmr+0x274>)
 800752c:	f007 fe2e 	bl	800f18c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007534:	2b00      	cmp	r3, #0
 8007536:	d106      	bne.n	8007546 <tcp_slowtmr+0x106>
 8007538:	4b5c      	ldr	r3, [pc, #368]	; (80076ac <tcp_slowtmr+0x26c>)
 800753a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800753e:	4961      	ldr	r1, [pc, #388]	; (80076c4 <tcp_slowtmr+0x284>)
 8007540:	485c      	ldr	r0, [pc, #368]	; (80076b4 <tcp_slowtmr+0x274>)
 8007542:	f007 fe23 	bl	800f18c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007548:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800754c:	2b0b      	cmp	r3, #11
 800754e:	d905      	bls.n	800755c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007554:	3301      	adds	r3, #1
 8007556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800755a:	e0ed      	b.n	8007738 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800755c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007562:	3b01      	subs	r3, #1
 8007564:	4a58      	ldr	r2, [pc, #352]	; (80076c8 <tcp_slowtmr+0x288>)
 8007566:	5cd3      	ldrb	r3, [r2, r3]
 8007568:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007570:	7c7a      	ldrb	r2, [r7, #17]
 8007572:	429a      	cmp	r2, r3
 8007574:	d907      	bls.n	8007586 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800757c:	3301      	adds	r3, #1
 800757e:	b2da      	uxtb	r2, r3
 8007580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007582:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007588:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800758c:	7c7a      	ldrb	r2, [r7, #17]
 800758e:	429a      	cmp	r2, r3
 8007590:	f200 80d2 	bhi.w	8007738 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007594:	2301      	movs	r3, #1
 8007596:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d108      	bne.n	80075b4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80075a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075a4:	f004 fc32 	bl	800be0c <tcp_zero_window_probe>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d014      	beq.n	80075d8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80075ae:	2300      	movs	r3, #0
 80075b0:	623b      	str	r3, [r7, #32]
 80075b2:	e011      	b.n	80075d8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80075b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80075ba:	4619      	mov	r1, r3
 80075bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075be:	f003 fae5 	bl	800ab8c <tcp_split_unsent_seg>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d107      	bne.n	80075d8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80075c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075ca:	f003 fd65 	bl	800b098 <tcp_output>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f000 80ac 	beq.w	8007738 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80075e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80075e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80075ee:	2b06      	cmp	r3, #6
 80075f0:	f200 80a2 	bhi.w	8007738 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80075f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80075fa:	3301      	adds	r3, #1
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007600:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007604:	e098      	b.n	8007738 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007608:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800760c:	2b00      	cmp	r3, #0
 800760e:	db0f      	blt.n	8007630 <tcp_slowtmr+0x1f0>
 8007610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007612:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007616:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800761a:	4293      	cmp	r3, r2
 800761c:	d008      	beq.n	8007630 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800761e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007620:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007624:	b29b      	uxth	r3, r3
 8007626:	3301      	adds	r3, #1
 8007628:	b29b      	uxth	r3, r3
 800762a:	b21a      	sxth	r2, r3
 800762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007632:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007638:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800763c:	429a      	cmp	r2, r3
 800763e:	db7b      	blt.n	8007738 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007642:	f004 f821 	bl	800b688 <tcp_rexmit_rto_prepare>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d007      	beq.n	800765c <tcp_slowtmr+0x21c>
 800764c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007650:	2b00      	cmp	r3, #0
 8007652:	d171      	bne.n	8007738 <tcp_slowtmr+0x2f8>
 8007654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007658:	2b00      	cmp	r3, #0
 800765a:	d06d      	beq.n	8007738 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800765c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765e:	7d1b      	ldrb	r3, [r3, #20]
 8007660:	2b02      	cmp	r3, #2
 8007662:	d03a      	beq.n	80076da <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007666:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800766a:	2b0c      	cmp	r3, #12
 800766c:	bf28      	it	cs
 800766e:	230c      	movcs	r3, #12
 8007670:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007674:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007678:	10db      	asrs	r3, r3, #3
 800767a:	b21b      	sxth	r3, r3
 800767c:	461a      	mov	r2, r3
 800767e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007680:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007684:	4413      	add	r3, r2
 8007686:	7efa      	ldrb	r2, [r7, #27]
 8007688:	4910      	ldr	r1, [pc, #64]	; (80076cc <tcp_slowtmr+0x28c>)
 800768a:	5c8a      	ldrb	r2, [r1, r2]
 800768c:	4093      	lsls	r3, r2
 800768e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007696:	4293      	cmp	r3, r2
 8007698:	dc1a      	bgt.n	80076d0 <tcp_slowtmr+0x290>
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	b21a      	sxth	r2, r3
 800769e:	e019      	b.n	80076d4 <tcp_slowtmr+0x294>
 80076a0:	20006ec8 	.word	0x20006ec8
 80076a4:	20000266 	.word	0x20000266
 80076a8:	20006ec4 	.word	0x20006ec4
 80076ac:	08010ab0 	.word	0x08010ab0
 80076b0:	08010df4 	.word	0x08010df4
 80076b4:	08010af4 	.word	0x08010af4
 80076b8:	08010e20 	.word	0x08010e20
 80076bc:	08010e4c 	.word	0x08010e4c
 80076c0:	08010e7c 	.word	0x08010e7c
 80076c4:	08010eb0 	.word	0x08010eb0
 80076c8:	08012a7c 	.word	0x08012a7c
 80076cc:	08012a6c 	.word	0x08012a6c
 80076d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80076d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80076da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076dc:	2200      	movs	r2, #0
 80076de:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80076e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80076ec:	4293      	cmp	r3, r2
 80076ee:	bf28      	it	cs
 80076f0:	4613      	movcs	r3, r2
 80076f2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80076f4:	8a7b      	ldrh	r3, [r7, #18]
 80076f6:	085b      	lsrs	r3, r3, #1
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007702:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	b29b      	uxth	r3, r3
 800770e:	429a      	cmp	r2, r3
 8007710:	d206      	bcs.n	8007720 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007722:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007726:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	2200      	movs	r2, #0
 800772e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007732:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007734:	f004 f818 	bl	800b768 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773a:	7d1b      	ldrb	r3, [r3, #20]
 800773c:	2b06      	cmp	r3, #6
 800773e:	d111      	bne.n	8007764 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007742:	8b5b      	ldrh	r3, [r3, #26]
 8007744:	f003 0310 	and.w	r3, r3, #16
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00b      	beq.n	8007764 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800774c:	4b9c      	ldr	r3, [pc, #624]	; (80079c0 <tcp_slowtmr+0x580>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b28      	cmp	r3, #40	; 0x28
 8007758:	d904      	bls.n	8007764 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800775a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800775e:	3301      	adds	r3, #1
 8007760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007766:	7a5b      	ldrb	r3, [r3, #9]
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b00      	cmp	r3, #0
 800776e:	d04a      	beq.n	8007806 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007772:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007774:	2b04      	cmp	r3, #4
 8007776:	d003      	beq.n	8007780 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800777c:	2b07      	cmp	r3, #7
 800777e:	d142      	bne.n	8007806 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007780:	4b8f      	ldr	r3, [pc, #572]	; (80079c0 <tcp_slowtmr+0x580>)
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007790:	4b8c      	ldr	r3, [pc, #560]	; (80079c4 <tcp_slowtmr+0x584>)
 8007792:	440b      	add	r3, r1
 8007794:	498c      	ldr	r1, [pc, #560]	; (80079c8 <tcp_slowtmr+0x588>)
 8007796:	fba1 1303 	umull	r1, r3, r1, r3
 800779a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800779c:	429a      	cmp	r2, r3
 800779e:	d90a      	bls.n	80077b6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80077a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077a4:	3301      	adds	r3, #1
 80077a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80077aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80077ae:	3301      	adds	r3, #1
 80077b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80077b4:	e027      	b.n	8007806 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077b6:	4b82      	ldr	r3, [pc, #520]	; (80079c0 <tcp_slowtmr+0x580>)
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80077c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80077c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80077cc:	4618      	mov	r0, r3
 80077ce:	4b7f      	ldr	r3, [pc, #508]	; (80079cc <tcp_slowtmr+0x58c>)
 80077d0:	fb03 f300 	mul.w	r3, r3, r0
 80077d4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80077d6:	497c      	ldr	r1, [pc, #496]	; (80079c8 <tcp_slowtmr+0x588>)
 80077d8:	fba1 1303 	umull	r1, r3, r1, r3
 80077dc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077de:	429a      	cmp	r2, r3
 80077e0:	d911      	bls.n	8007806 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80077e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077e4:	f004 fad2 	bl	800bd8c <tcp_keepalive>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80077ee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d107      	bne.n	8007806 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80077f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80077fc:	3301      	adds	r3, #1
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007802:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800780a:	2b00      	cmp	r3, #0
 800780c:	d011      	beq.n	8007832 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800780e:	4b6c      	ldr	r3, [pc, #432]	; (80079c0 <tcp_slowtmr+0x580>)
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	1ad2      	subs	r2, r2, r3
 8007818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800781e:	4619      	mov	r1, r3
 8007820:	460b      	mov	r3, r1
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	440b      	add	r3, r1
 8007826:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007828:	429a      	cmp	r2, r3
 800782a:	d302      	bcc.n	8007832 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800782c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800782e:	f000 fdd9 	bl	80083e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007834:	7d1b      	ldrb	r3, [r3, #20]
 8007836:	2b03      	cmp	r3, #3
 8007838:	d10b      	bne.n	8007852 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800783a:	4b61      	ldr	r3, [pc, #388]	; (80079c0 <tcp_slowtmr+0x580>)
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	2b28      	cmp	r3, #40	; 0x28
 8007846:	d904      	bls.n	8007852 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800784c:	3301      	adds	r3, #1
 800784e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007854:	7d1b      	ldrb	r3, [r3, #20]
 8007856:	2b09      	cmp	r3, #9
 8007858:	d10b      	bne.n	8007872 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800785a:	4b59      	ldr	r3, [pc, #356]	; (80079c0 <tcp_slowtmr+0x580>)
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	2bf0      	cmp	r3, #240	; 0xf0
 8007866:	d904      	bls.n	8007872 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8007868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800786c:	3301      	adds	r3, #1
 800786e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007876:	2b00      	cmp	r3, #0
 8007878:	d060      	beq.n	800793c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800787a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007880:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007882:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007884:	f000 fbfa 	bl	800807c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	2b00      	cmp	r3, #0
 800788c:	d010      	beq.n	80078b0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800788e:	4b50      	ldr	r3, [pc, #320]	; (80079d0 <tcp_slowtmr+0x590>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007894:	429a      	cmp	r2, r3
 8007896:	d106      	bne.n	80078a6 <tcp_slowtmr+0x466>
 8007898:	4b4e      	ldr	r3, [pc, #312]	; (80079d4 <tcp_slowtmr+0x594>)
 800789a:	f240 526d 	movw	r2, #1389	; 0x56d
 800789e:	494e      	ldr	r1, [pc, #312]	; (80079d8 <tcp_slowtmr+0x598>)
 80078a0:	484e      	ldr	r0, [pc, #312]	; (80079dc <tcp_slowtmr+0x59c>)
 80078a2:	f007 fc73 	bl	800f18c <iprintf>
        prev->next = pcb->next;
 80078a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ac:	60da      	str	r2, [r3, #12]
 80078ae:	e00f      	b.n	80078d0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80078b0:	4b47      	ldr	r3, [pc, #284]	; (80079d0 <tcp_slowtmr+0x590>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d006      	beq.n	80078c8 <tcp_slowtmr+0x488>
 80078ba:	4b46      	ldr	r3, [pc, #280]	; (80079d4 <tcp_slowtmr+0x594>)
 80078bc:	f240 5271 	movw	r2, #1393	; 0x571
 80078c0:	4947      	ldr	r1, [pc, #284]	; (80079e0 <tcp_slowtmr+0x5a0>)
 80078c2:	4846      	ldr	r0, [pc, #280]	; (80079dc <tcp_slowtmr+0x59c>)
 80078c4:	f007 fc62 	bl	800f18c <iprintf>
        tcp_active_pcbs = pcb->next;
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	4a40      	ldr	r2, [pc, #256]	; (80079d0 <tcp_slowtmr+0x590>)
 80078ce:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80078d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d013      	beq.n	8007900 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078da:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80078dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80078e0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80078e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e4:	3304      	adds	r3, #4
 80078e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078e8:	8ad2      	ldrh	r2, [r2, #22]
 80078ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078ec:	8b09      	ldrh	r1, [r1, #24]
 80078ee:	9102      	str	r1, [sp, #8]
 80078f0:	9201      	str	r2, [sp, #4]
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	462b      	mov	r3, r5
 80078f6:	4622      	mov	r2, r4
 80078f8:	4601      	mov	r1, r0
 80078fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078fc:	f004 f992 	bl	800bc24 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007908:	7d1b      	ldrb	r3, [r3, #20]
 800790a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007916:	6838      	ldr	r0, [r7, #0]
 8007918:	f7ff f9fc 	bl	8006d14 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800791c:	4b31      	ldr	r3, [pc, #196]	; (80079e4 <tcp_slowtmr+0x5a4>)
 800791e:	2200      	movs	r2, #0
 8007920:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d004      	beq.n	8007932 <tcp_slowtmr+0x4f2>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f06f 010c 	mvn.w	r1, #12
 800792e:	68b8      	ldr	r0, [r7, #8]
 8007930:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007932:	4b2c      	ldr	r3, [pc, #176]	; (80079e4 <tcp_slowtmr+0x5a4>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d037      	beq.n	80079aa <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800793a:	e592      	b.n	8007462 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800793c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	7f1b      	ldrb	r3, [r3, #28]
 800794a:	3301      	adds	r3, #1
 800794c:	b2da      	uxtb	r2, r3
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007954:	7f1a      	ldrb	r2, [r3, #28]
 8007956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007958:	7f5b      	ldrb	r3, [r3, #29]
 800795a:	429a      	cmp	r2, r3
 800795c:	d325      	bcc.n	80079aa <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800795e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007960:	2200      	movs	r2, #0
 8007962:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007964:	4b1f      	ldr	r3, [pc, #124]	; (80079e4 <tcp_slowtmr+0x5a4>)
 8007966:	2200      	movs	r2, #0
 8007968:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00b      	beq.n	800798c <tcp_slowtmr+0x54c>
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800797a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800797c:	6912      	ldr	r2, [r2, #16]
 800797e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007980:	4610      	mov	r0, r2
 8007982:	4798      	blx	r3
 8007984:	4603      	mov	r3, r0
 8007986:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800798a:	e002      	b.n	8007992 <tcp_slowtmr+0x552>
 800798c:	2300      	movs	r3, #0
 800798e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007992:	4b14      	ldr	r3, [pc, #80]	; (80079e4 <tcp_slowtmr+0x5a4>)
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d000      	beq.n	800799c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800799a:	e562      	b.n	8007462 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800799c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80079a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079a6:	f003 fb77 	bl	800b098 <tcp_output>
  while (pcb != NULL) {
 80079aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f47f ad5e 	bne.w	800746e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80079b2:	2300      	movs	r3, #0
 80079b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80079b6:	4b0c      	ldr	r3, [pc, #48]	; (80079e8 <tcp_slowtmr+0x5a8>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80079bc:	e069      	b.n	8007a92 <tcp_slowtmr+0x652>
 80079be:	bf00      	nop
 80079c0:	20006ec8 	.word	0x20006ec8
 80079c4:	000a4cb8 	.word	0x000a4cb8
 80079c8:	10624dd3 	.word	0x10624dd3
 80079cc:	000124f8 	.word	0x000124f8
 80079d0:	20006ec4 	.word	0x20006ec4
 80079d4:	08010ab0 	.word	0x08010ab0
 80079d8:	08010ee8 	.word	0x08010ee8
 80079dc:	08010af4 	.word	0x08010af4
 80079e0:	08010f14 	.word	0x08010f14
 80079e4:	20006ec0 	.word	0x20006ec0
 80079e8:	20006ed4 	.word	0x20006ed4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80079ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ee:	7d1b      	ldrb	r3, [r3, #20]
 80079f0:	2b0a      	cmp	r3, #10
 80079f2:	d006      	beq.n	8007a02 <tcp_slowtmr+0x5c2>
 80079f4:	4b2a      	ldr	r3, [pc, #168]	; (8007aa0 <tcp_slowtmr+0x660>)
 80079f6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80079fa:	492a      	ldr	r1, [pc, #168]	; (8007aa4 <tcp_slowtmr+0x664>)
 80079fc:	482a      	ldr	r0, [pc, #168]	; (8007aa8 <tcp_slowtmr+0x668>)
 80079fe:	f007 fbc5 	bl	800f18c <iprintf>
    pcb_remove = 0;
 8007a02:	2300      	movs	r3, #0
 8007a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007a08:	4b28      	ldr	r3, [pc, #160]	; (8007aac <tcp_slowtmr+0x66c>)
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0e:	6a1b      	ldr	r3, [r3, #32]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2bf0      	cmp	r3, #240	; 0xf0
 8007a14:	d904      	bls.n	8007a20 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007a16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d02f      	beq.n	8007a88 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007a28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a2a:	f000 fb27 	bl	800807c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d010      	beq.n	8007a56 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007a34:	4b1e      	ldr	r3, [pc, #120]	; (8007ab0 <tcp_slowtmr+0x670>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d106      	bne.n	8007a4c <tcp_slowtmr+0x60c>
 8007a3e:	4b18      	ldr	r3, [pc, #96]	; (8007aa0 <tcp_slowtmr+0x660>)
 8007a40:	f240 52af 	movw	r2, #1455	; 0x5af
 8007a44:	491b      	ldr	r1, [pc, #108]	; (8007ab4 <tcp_slowtmr+0x674>)
 8007a46:	4818      	ldr	r0, [pc, #96]	; (8007aa8 <tcp_slowtmr+0x668>)
 8007a48:	f007 fba0 	bl	800f18c <iprintf>
        prev->next = pcb->next;
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a52:	60da      	str	r2, [r3, #12]
 8007a54:	e00f      	b.n	8007a76 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007a56:	4b16      	ldr	r3, [pc, #88]	; (8007ab0 <tcp_slowtmr+0x670>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d006      	beq.n	8007a6e <tcp_slowtmr+0x62e>
 8007a60:	4b0f      	ldr	r3, [pc, #60]	; (8007aa0 <tcp_slowtmr+0x660>)
 8007a62:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007a66:	4914      	ldr	r1, [pc, #80]	; (8007ab8 <tcp_slowtmr+0x678>)
 8007a68:	480f      	ldr	r0, [pc, #60]	; (8007aa8 <tcp_slowtmr+0x668>)
 8007a6a:	f007 fb8f 	bl	800f18c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	4a0f      	ldr	r2, [pc, #60]	; (8007ab0 <tcp_slowtmr+0x670>)
 8007a74:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a78:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007a80:	69f8      	ldr	r0, [r7, #28]
 8007a82:	f7ff f947 	bl	8006d14 <tcp_free>
 8007a86:	e004      	b.n	8007a92 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1a9      	bne.n	80079ec <tcp_slowtmr+0x5ac>
    }
  }
}
 8007a98:	bf00      	nop
 8007a9a:	3730      	adds	r7, #48	; 0x30
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8007aa0:	08010ab0 	.word	0x08010ab0
 8007aa4:	08010f40 	.word	0x08010f40
 8007aa8:	08010af4 	.word	0x08010af4
 8007aac:	20006ec8 	.word	0x20006ec8
 8007ab0:	20006ed4 	.word	0x20006ed4
 8007ab4:	08010f70 	.word	0x08010f70
 8007ab8:	08010f98 	.word	0x08010f98

08007abc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007ac2:	4b2d      	ldr	r3, [pc, #180]	; (8007b78 <tcp_fasttmr+0xbc>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	4b2b      	ldr	r3, [pc, #172]	; (8007b78 <tcp_fasttmr+0xbc>)
 8007acc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007ace:	4b2b      	ldr	r3, [pc, #172]	; (8007b7c <tcp_fasttmr+0xc0>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007ad4:	e048      	b.n	8007b68 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	7f9a      	ldrb	r2, [r3, #30]
 8007ada:	4b27      	ldr	r3, [pc, #156]	; (8007b78 <tcp_fasttmr+0xbc>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d03f      	beq.n	8007b62 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007ae2:	4b25      	ldr	r3, [pc, #148]	; (8007b78 <tcp_fasttmr+0xbc>)
 8007ae4:	781a      	ldrb	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	8b5b      	ldrh	r3, [r3, #26]
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d010      	beq.n	8007b18 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	8b5b      	ldrh	r3, [r3, #26]
 8007afa:	f043 0302 	orr.w	r3, r3, #2
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f003 fac7 	bl	800b098 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	8b5b      	ldrh	r3, [r3, #26]
 8007b0e:	f023 0303 	bic.w	r3, r3, #3
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	8b5b      	ldrh	r3, [r3, #26]
 8007b1c:	f003 0308 	and.w	r3, r3, #8
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d009      	beq.n	8007b38 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	8b5b      	ldrh	r3, [r3, #26]
 8007b28:	f023 0308 	bic.w	r3, r3, #8
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7ff fa7e 	bl	8007034 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007b46:	4b0e      	ldr	r3, [pc, #56]	; (8007b80 <tcp_fasttmr+0xc4>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f819 	bl	8007b84 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007b52:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <tcp_fasttmr+0xc4>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d000      	beq.n	8007b5c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007b5a:	e7b8      	b.n	8007ace <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	607b      	str	r3, [r7, #4]
 8007b60:	e002      	b.n	8007b68 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1b3      	bne.n	8007ad6 <tcp_fasttmr+0x1a>
    }
  }
}
 8007b6e:	bf00      	nop
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20000266 	.word	0x20000266
 8007b7c:	20006ec4 	.word	0x20006ec4
 8007b80:	20006ec0 	.word	0x20006ec0

08007b84 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007b84:	b590      	push	{r4, r7, lr}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d109      	bne.n	8007ba6 <tcp_process_refused_data+0x22>
 8007b92:	4b37      	ldr	r3, [pc, #220]	; (8007c70 <tcp_process_refused_data+0xec>)
 8007b94:	f240 6209 	movw	r2, #1545	; 0x609
 8007b98:	4936      	ldr	r1, [pc, #216]	; (8007c74 <tcp_process_refused_data+0xf0>)
 8007b9a:	4837      	ldr	r0, [pc, #220]	; (8007c78 <tcp_process_refused_data+0xf4>)
 8007b9c:	f007 faf6 	bl	800f18c <iprintf>
 8007ba0:	f06f 030f 	mvn.w	r3, #15
 8007ba4:	e060      	b.n	8007c68 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007baa:	7b5b      	ldrb	r3, [r3, #13]
 8007bac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bb2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00b      	beq.n	8007bdc <tcp_process_refused_data+0x58>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6918      	ldr	r0, [r3, #16]
 8007bce:	2300      	movs	r3, #0
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	47a0      	blx	r4
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73fb      	strb	r3, [r7, #15]
 8007bda:	e007      	b.n	8007bec <tcp_process_refused_data+0x68>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	6879      	ldr	r1, [r7, #4]
 8007be2:	2000      	movs	r0, #0
 8007be4:	f000 f8a2 	bl	8007d2c <tcp_recv_null>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d12a      	bne.n	8007c4a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007bf4:	7bbb      	ldrb	r3, [r7, #14]
 8007bf6:	f003 0320 	and.w	r3, r3, #32
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d033      	beq.n	8007c66 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c02:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007c06:	d005      	beq.n	8007c14 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00b      	beq.n	8007c36 <tcp_process_refused_data+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6918      	ldr	r0, [r3, #16]
 8007c28:	2300      	movs	r3, #0
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	6879      	ldr	r1, [r7, #4]
 8007c2e:	47a0      	blx	r4
 8007c30:	4603      	mov	r3, r0
 8007c32:	73fb      	strb	r3, [r7, #15]
 8007c34:	e001      	b.n	8007c3a <tcp_process_refused_data+0xb6>
 8007c36:	2300      	movs	r3, #0
 8007c38:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c3e:	f113 0f0d 	cmn.w	r3, #13
 8007c42:	d110      	bne.n	8007c66 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007c44:	f06f 030c 	mvn.w	r3, #12
 8007c48:	e00e      	b.n	8007c68 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c4e:	f113 0f0d 	cmn.w	r3, #13
 8007c52:	d102      	bne.n	8007c5a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007c54:	f06f 030c 	mvn.w	r3, #12
 8007c58:	e006      	b.n	8007c68 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007c60:	f06f 0304 	mvn.w	r3, #4
 8007c64:	e000      	b.n	8007c68 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd90      	pop	{r4, r7, pc}
 8007c70:	08010ab0 	.word	0x08010ab0
 8007c74:	08010fc0 	.word	0x08010fc0
 8007c78:	08010af4 	.word	0x08010af4

08007c7c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007c84:	e007      	b.n	8007c96 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f809 	bl	8007ca4 <tcp_seg_free>
    seg = next;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1f4      	bne.n	8007c86 <tcp_segs_free+0xa>
  }
}
 8007c9c:	bf00      	nop
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00c      	beq.n	8007ccc <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d004      	beq.n	8007cc4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fe fce6 	bl	8006690 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	2003      	movs	r0, #3
 8007cc8:	f7fd fee8 	bl	8005a9c <memp_free>
  }
}
 8007ccc:	bf00      	nop
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d106      	bne.n	8007cf0 <tcp_seg_copy+0x1c>
 8007ce2:	4b0f      	ldr	r3, [pc, #60]	; (8007d20 <tcp_seg_copy+0x4c>)
 8007ce4:	f240 6282 	movw	r2, #1666	; 0x682
 8007ce8:	490e      	ldr	r1, [pc, #56]	; (8007d24 <tcp_seg_copy+0x50>)
 8007cea:	480f      	ldr	r0, [pc, #60]	; (8007d28 <tcp_seg_copy+0x54>)
 8007cec:	f007 fa4e 	bl	800f18c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007cf0:	2003      	movs	r0, #3
 8007cf2:	f7fd fe87 	bl	8005a04 <memp_malloc>
 8007cf6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <tcp_seg_copy+0x2e>
    return NULL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e00a      	b.n	8007d18 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007d02:	2210      	movs	r2, #16
 8007d04:	6879      	ldr	r1, [r7, #4]
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f007 fa2d 	bl	800f166 <memcpy>
  pbuf_ref(cseg->p);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fe fd5d 	bl	80067d0 <pbuf_ref>
  return cseg;
 8007d16:	68fb      	ldr	r3, [r7, #12]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	08010ab0 	.word	0x08010ab0
 8007d24:	08011004 	.word	0x08011004
 8007d28:	08010af4 	.word	0x08010af4

08007d2c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d109      	bne.n	8007d54 <tcp_recv_null+0x28>
 8007d40:	4b12      	ldr	r3, [pc, #72]	; (8007d8c <tcp_recv_null+0x60>)
 8007d42:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007d46:	4912      	ldr	r1, [pc, #72]	; (8007d90 <tcp_recv_null+0x64>)
 8007d48:	4812      	ldr	r0, [pc, #72]	; (8007d94 <tcp_recv_null+0x68>)
 8007d4a:	f007 fa1f 	bl	800f18c <iprintf>
 8007d4e:	f06f 030f 	mvn.w	r3, #15
 8007d52:	e016      	b.n	8007d82 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	891b      	ldrh	r3, [r3, #8]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	68b8      	ldr	r0, [r7, #8]
 8007d62:	f7ff fb1d 	bl	80073a0 <tcp_recved>
    pbuf_free(p);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7fe fc92 	bl	8006690 <pbuf_free>
 8007d6c:	e008      	b.n	8007d80 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d104      	bne.n	8007d80 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007d76:	68b8      	ldr	r0, [r7, #8]
 8007d78:	f7ff f9c2 	bl	8007100 <tcp_close>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	e000      	b.n	8007d82 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	08010ab0 	.word	0x08010ab0
 8007d90:	08011020 	.word	0x08011020
 8007d94:	08010af4 	.word	0x08010af4

08007d98 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	4603      	mov	r3, r0
 8007da0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	db01      	blt.n	8007dae <tcp_kill_prio+0x16>
 8007daa:	79fb      	ldrb	r3, [r7, #7]
 8007dac:	e000      	b.n	8007db0 <tcp_kill_prio+0x18>
 8007dae:	237f      	movs	r3, #127	; 0x7f
 8007db0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007db2:	7afb      	ldrb	r3, [r7, #11]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d034      	beq.n	8007e22 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007db8:	7afb      	ldrb	r3, [r7, #11]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007dc6:	4b19      	ldr	r3, [pc, #100]	; (8007e2c <tcp_kill_prio+0x94>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	e01f      	b.n	8007e0e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	7d5b      	ldrb	r3, [r3, #21]
 8007dd2:	7afa      	ldrb	r2, [r7, #11]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d80c      	bhi.n	8007df2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007ddc:	7afa      	ldrb	r2, [r7, #11]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d112      	bne.n	8007e08 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007de2:	4b13      	ldr	r3, [pc, #76]	; (8007e30 <tcp_kill_prio+0x98>)
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d80a      	bhi.n	8007e08 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007df2:	4b0f      	ldr	r3, [pc, #60]	; (8007e30 <tcp_kill_prio+0x98>)
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	7d5b      	ldrb	r3, [r3, #21]
 8007e06:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	617b      	str	r3, [r7, #20]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1dc      	bne.n	8007dce <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d004      	beq.n	8007e24 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007e1a:	6938      	ldr	r0, [r7, #16]
 8007e1c:	f7ff fa5a 	bl	80072d4 <tcp_abort>
 8007e20:	e000      	b.n	8007e24 <tcp_kill_prio+0x8c>
    return;
 8007e22:	bf00      	nop
  }
}
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20006ec4 	.word	0x20006ec4
 8007e30:	20006ec8 	.word	0x20006ec8

08007e34 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	2b08      	cmp	r3, #8
 8007e42:	d009      	beq.n	8007e58 <tcp_kill_state+0x24>
 8007e44:	79fb      	ldrb	r3, [r7, #7]
 8007e46:	2b09      	cmp	r3, #9
 8007e48:	d006      	beq.n	8007e58 <tcp_kill_state+0x24>
 8007e4a:	4b1a      	ldr	r3, [pc, #104]	; (8007eb4 <tcp_kill_state+0x80>)
 8007e4c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007e50:	4919      	ldr	r1, [pc, #100]	; (8007eb8 <tcp_kill_state+0x84>)
 8007e52:	481a      	ldr	r0, [pc, #104]	; (8007ebc <tcp_kill_state+0x88>)
 8007e54:	f007 f99a 	bl	800f18c <iprintf>

  inactivity = 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e60:	4b17      	ldr	r3, [pc, #92]	; (8007ec0 <tcp_kill_state+0x8c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	617b      	str	r3, [r7, #20]
 8007e66:	e017      	b.n	8007e98 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	7d1b      	ldrb	r3, [r3, #20]
 8007e6c:	79fa      	ldrb	r2, [r7, #7]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d10f      	bne.n	8007e92 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007e72:	4b14      	ldr	r3, [pc, #80]	; (8007ec4 <tcp_kill_state+0x90>)
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d807      	bhi.n	8007e92 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007e82:	4b10      	ldr	r3, [pc, #64]	; (8007ec4 <tcp_kill_state+0x90>)
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1e4      	bne.n	8007e68 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d003      	beq.n	8007eac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	6938      	ldr	r0, [r7, #16]
 8007ea8:	f7ff f956 	bl	8007158 <tcp_abandon>
  }
}
 8007eac:	bf00      	nop
 8007eae:	3718      	adds	r7, #24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	08010ab0 	.word	0x08010ab0
 8007eb8:	0801103c 	.word	0x0801103c
 8007ebc:	08010af4 	.word	0x08010af4
 8007ec0:	20006ec4 	.word	0x20006ec4
 8007ec4:	20006ec8 	.word	0x20006ec8

08007ec8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ed6:	4b12      	ldr	r3, [pc, #72]	; (8007f20 <tcp_kill_timewait+0x58>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	e012      	b.n	8007f04 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007ede:	4b11      	ldr	r3, [pc, #68]	; (8007f24 <tcp_kill_timewait+0x5c>)
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d807      	bhi.n	8007efe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007eee:	4b0d      	ldr	r3, [pc, #52]	; (8007f24 <tcp_kill_timewait+0x5c>)
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e9      	bne.n	8007ede <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007f10:	68b8      	ldr	r0, [r7, #8]
 8007f12:	f7ff f9df 	bl	80072d4 <tcp_abort>
  }
}
 8007f16:	bf00      	nop
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20006ed4 	.word	0x20006ed4
 8007f24:	20006ec8 	.word	0x20006ec8

08007f28 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007f2e:	4b10      	ldr	r3, [pc, #64]	; (8007f70 <tcp_handle_closepend+0x48>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007f34:	e014      	b.n	8007f60 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	8b5b      	ldrh	r3, [r3, #26]
 8007f40:	f003 0308 	and.w	r3, r3, #8
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d009      	beq.n	8007f5c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	8b5b      	ldrh	r3, [r3, #26]
 8007f4c:	f023 0308 	bic.w	r3, r3, #8
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7ff f86c 	bl	8007034 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e7      	bne.n	8007f36 <tcp_handle_closepend+0xe>
  }
}
 8007f66:	bf00      	nop
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20006ec4 	.word	0x20006ec4

08007f74 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f7e:	2001      	movs	r0, #1
 8007f80:	f7fd fd40 	bl	8005a04 <memp_malloc>
 8007f84:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d126      	bne.n	8007fda <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007f8c:	f7ff ffcc 	bl	8007f28 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007f90:	f7ff ff9a 	bl	8007ec8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f94:	2001      	movs	r0, #1
 8007f96:	f7fd fd35 	bl	8005a04 <memp_malloc>
 8007f9a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d11b      	bne.n	8007fda <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007fa2:	2009      	movs	r0, #9
 8007fa4:	f7ff ff46 	bl	8007e34 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007fa8:	2001      	movs	r0, #1
 8007faa:	f7fd fd2b 	bl	8005a04 <memp_malloc>
 8007fae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d111      	bne.n	8007fda <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007fb6:	2008      	movs	r0, #8
 8007fb8:	f7ff ff3c 	bl	8007e34 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007fbc:	2001      	movs	r0, #1
 8007fbe:	f7fd fd21 	bl	8005a04 <memp_malloc>
 8007fc2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d107      	bne.n	8007fda <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7ff fee3 	bl	8007d98 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007fd2:	2001      	movs	r0, #1
 8007fd4:	f7fd fd16 	bl	8005a04 <memp_malloc>
 8007fd8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d03f      	beq.n	8008060 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007fe0:	229c      	movs	r2, #156	; 0x9c
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f007 f8c9 	bl	800f17c <memset>
    pcb->prio = prio;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	79fa      	ldrb	r2, [r7, #7]
 8007fee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007ff6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008000:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	22ff      	movs	r2, #255	; 0xff
 800800e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008016:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2206      	movs	r2, #6
 800801c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2206      	movs	r2, #6
 8008024:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800802c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2201      	movs	r2, #1
 8008032:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008036:	4b0d      	ldr	r3, [pc, #52]	; (800806c <tcp_alloc+0xf8>)
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800803e:	4b0c      	ldr	r3, [pc, #48]	; (8008070 <tcp_alloc+0xfc>)
 8008040:	781a      	ldrb	r2, [r3, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800804c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4a08      	ldr	r2, [pc, #32]	; (8008074 <tcp_alloc+0x100>)
 8008054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4a07      	ldr	r2, [pc, #28]	; (8008078 <tcp_alloc+0x104>)
 800805c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008060:	68fb      	ldr	r3, [r7, #12]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20006ec8 	.word	0x20006ec8
 8008070:	20000266 	.word	0x20000266
 8008074:	08007d2d 	.word	0x08007d2d
 8008078:	006ddd00 	.word	0x006ddd00

0800807c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d107      	bne.n	800809a <tcp_pcb_purge+0x1e>
 800808a:	4b21      	ldr	r3, [pc, #132]	; (8008110 <tcp_pcb_purge+0x94>)
 800808c:	f640 0251 	movw	r2, #2129	; 0x851
 8008090:	4920      	ldr	r1, [pc, #128]	; (8008114 <tcp_pcb_purge+0x98>)
 8008092:	4821      	ldr	r0, [pc, #132]	; (8008118 <tcp_pcb_purge+0x9c>)
 8008094:	f007 f87a 	bl	800f18c <iprintf>
 8008098:	e037      	b.n	800810a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	7d1b      	ldrb	r3, [r3, #20]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d033      	beq.n	800810a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80080a6:	2b0a      	cmp	r3, #10
 80080a8:	d02f      	beq.n	800810a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d02b      	beq.n	800810a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d007      	beq.n	80080ca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fe fae6 	bl	8006690 <pbuf_free>
      pcb->refused_data = NULL;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f986 	bl	80083e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080de:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7ff fdc9 	bl	8007c7c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7ff fdc4 	bl	8007c7c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	66da      	str	r2, [r3, #108]	; 0x6c
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	08010ab0 	.word	0x08010ab0
 8008114:	080110fc 	.word	0x080110fc
 8008118:	08010af4 	.word	0x08010af4

0800811c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d106      	bne.n	800813a <tcp_pcb_remove+0x1e>
 800812c:	4b3e      	ldr	r3, [pc, #248]	; (8008228 <tcp_pcb_remove+0x10c>)
 800812e:	f640 0283 	movw	r2, #2179	; 0x883
 8008132:	493e      	ldr	r1, [pc, #248]	; (800822c <tcp_pcb_remove+0x110>)
 8008134:	483e      	ldr	r0, [pc, #248]	; (8008230 <tcp_pcb_remove+0x114>)
 8008136:	f007 f829 	bl	800f18c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d106      	bne.n	800814e <tcp_pcb_remove+0x32>
 8008140:	4b39      	ldr	r3, [pc, #228]	; (8008228 <tcp_pcb_remove+0x10c>)
 8008142:	f640 0284 	movw	r2, #2180	; 0x884
 8008146:	493b      	ldr	r1, [pc, #236]	; (8008234 <tcp_pcb_remove+0x118>)
 8008148:	4839      	ldr	r0, [pc, #228]	; (8008230 <tcp_pcb_remove+0x114>)
 800814a:	f007 f81f 	bl	800f18c <iprintf>

  TCP_RMV(pcblist, pcb);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	429a      	cmp	r2, r3
 8008156:	d105      	bne.n	8008164 <tcp_pcb_remove+0x48>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	e013      	b.n	800818c <tcp_pcb_remove+0x70>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	60fb      	str	r3, [r7, #12]
 800816a:	e00c      	b.n	8008186 <tcp_pcb_remove+0x6a>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	429a      	cmp	r2, r3
 8008174:	d104      	bne.n	8008180 <tcp_pcb_remove+0x64>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	68da      	ldr	r2, [r3, #12]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	60da      	str	r2, [r3, #12]
 800817e:	e005      	b.n	800818c <tcp_pcb_remove+0x70>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	60fb      	str	r3, [r7, #12]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1ef      	bne.n	800816c <tcp_pcb_remove+0x50>
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2200      	movs	r2, #0
 8008190:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008192:	6838      	ldr	r0, [r7, #0]
 8008194:	f7ff ff72 	bl	800807c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	7d1b      	ldrb	r3, [r3, #20]
 800819c:	2b0a      	cmp	r3, #10
 800819e:	d013      	beq.n	80081c8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d00f      	beq.n	80081c8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	8b5b      	ldrh	r3, [r3, #26]
 80081ac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d009      	beq.n	80081c8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	8b5b      	ldrh	r3, [r3, #26]
 80081b8:	f043 0302 	orr.w	r3, r3, #2
 80081bc:	b29a      	uxth	r2, r3
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80081c2:	6838      	ldr	r0, [r7, #0]
 80081c4:	f002 ff68 	bl	800b098 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	7d1b      	ldrb	r3, [r3, #20]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d020      	beq.n	8008212 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d006      	beq.n	80081e6 <tcp_pcb_remove+0xca>
 80081d8:	4b13      	ldr	r3, [pc, #76]	; (8008228 <tcp_pcb_remove+0x10c>)
 80081da:	f640 0293 	movw	r2, #2195	; 0x893
 80081de:	4916      	ldr	r1, [pc, #88]	; (8008238 <tcp_pcb_remove+0x11c>)
 80081e0:	4813      	ldr	r0, [pc, #76]	; (8008230 <tcp_pcb_remove+0x114>)
 80081e2:	f006 ffd3 	bl	800f18c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d006      	beq.n	80081fc <tcp_pcb_remove+0xe0>
 80081ee:	4b0e      	ldr	r3, [pc, #56]	; (8008228 <tcp_pcb_remove+0x10c>)
 80081f0:	f640 0294 	movw	r2, #2196	; 0x894
 80081f4:	4911      	ldr	r1, [pc, #68]	; (800823c <tcp_pcb_remove+0x120>)
 80081f6:	480e      	ldr	r0, [pc, #56]	; (8008230 <tcp_pcb_remove+0x114>)
 80081f8:	f006 ffc8 	bl	800f18c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008200:	2b00      	cmp	r3, #0
 8008202:	d006      	beq.n	8008212 <tcp_pcb_remove+0xf6>
 8008204:	4b08      	ldr	r3, [pc, #32]	; (8008228 <tcp_pcb_remove+0x10c>)
 8008206:	f640 0296 	movw	r2, #2198	; 0x896
 800820a:	490d      	ldr	r1, [pc, #52]	; (8008240 <tcp_pcb_remove+0x124>)
 800820c:	4808      	ldr	r0, [pc, #32]	; (8008230 <tcp_pcb_remove+0x114>)
 800820e:	f006 ffbd 	bl	800f18c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2200      	movs	r2, #0
 8008216:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	2200      	movs	r2, #0
 800821c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800821e:	bf00      	nop
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	08010ab0 	.word	0x08010ab0
 800822c:	08011118 	.word	0x08011118
 8008230:	08010af4 	.word	0x08010af4
 8008234:	08011134 	.word	0x08011134
 8008238:	08011154 	.word	0x08011154
 800823c:	0801116c 	.word	0x0801116c
 8008240:	08011188 	.word	0x08011188

08008244 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d106      	bne.n	8008260 <tcp_next_iss+0x1c>
 8008252:	4b0a      	ldr	r3, [pc, #40]	; (800827c <tcp_next_iss+0x38>)
 8008254:	f640 02af 	movw	r2, #2223	; 0x8af
 8008258:	4909      	ldr	r1, [pc, #36]	; (8008280 <tcp_next_iss+0x3c>)
 800825a:	480a      	ldr	r0, [pc, #40]	; (8008284 <tcp_next_iss+0x40>)
 800825c:	f006 ff96 	bl	800f18c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008260:	4b09      	ldr	r3, [pc, #36]	; (8008288 <tcp_next_iss+0x44>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	4b09      	ldr	r3, [pc, #36]	; (800828c <tcp_next_iss+0x48>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4413      	add	r3, r2
 800826a:	4a07      	ldr	r2, [pc, #28]	; (8008288 <tcp_next_iss+0x44>)
 800826c:	6013      	str	r3, [r2, #0]
  return iss;
 800826e:	4b06      	ldr	r3, [pc, #24]	; (8008288 <tcp_next_iss+0x44>)
 8008270:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008272:	4618      	mov	r0, r3
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	08010ab0 	.word	0x08010ab0
 8008280:	080111a0 	.word	0x080111a0
 8008284:	08010af4 	.word	0x08010af4
 8008288:	20000074 	.word	0x20000074
 800828c:	20006ec8 	.word	0x20006ec8

08008290 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
 800829c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d106      	bne.n	80082b2 <tcp_eff_send_mss_netif+0x22>
 80082a4:	4b14      	ldr	r3, [pc, #80]	; (80082f8 <tcp_eff_send_mss_netif+0x68>)
 80082a6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80082aa:	4914      	ldr	r1, [pc, #80]	; (80082fc <tcp_eff_send_mss_netif+0x6c>)
 80082ac:	4814      	ldr	r0, [pc, #80]	; (8008300 <tcp_eff_send_mss_netif+0x70>)
 80082ae:	f006 ff6d 	bl	800f18c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80082b8:	89fb      	ldrh	r3, [r7, #14]
 80082ba:	e019      	b.n	80082f0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	8c1b      	ldrh	r3, [r3, #32]
 80082c0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80082c2:	8afb      	ldrh	r3, [r7, #22]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d012      	beq.n	80082ee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80082c8:	2328      	movs	r3, #40	; 0x28
 80082ca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80082cc:	8afa      	ldrh	r2, [r7, #22]
 80082ce:	8abb      	ldrh	r3, [r7, #20]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d904      	bls.n	80082de <tcp_eff_send_mss_netif+0x4e>
 80082d4:	8afa      	ldrh	r2, [r7, #22]
 80082d6:	8abb      	ldrh	r3, [r7, #20]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	b29b      	uxth	r3, r3
 80082dc:	e000      	b.n	80082e0 <tcp_eff_send_mss_netif+0x50>
 80082de:	2300      	movs	r3, #0
 80082e0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80082e2:	8a7a      	ldrh	r2, [r7, #18]
 80082e4:	89fb      	ldrh	r3, [r7, #14]
 80082e6:	4293      	cmp	r3, r2
 80082e8:	bf28      	it	cs
 80082ea:	4613      	movcs	r3, r2
 80082ec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80082ee:	89fb      	ldrh	r3, [r7, #14]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	08010ab0 	.word	0x08010ab0
 80082fc:	080111bc 	.word	0x080111bc
 8008300:	08010af4 	.word	0x08010af4

08008304 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d119      	bne.n	800834c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008318:	4b10      	ldr	r3, [pc, #64]	; (800835c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800831a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800831e:	4910      	ldr	r1, [pc, #64]	; (8008360 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008320:	4810      	ldr	r0, [pc, #64]	; (8008364 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008322:	f006 ff33 	bl	800f18c <iprintf>

  while (pcb != NULL) {
 8008326:	e011      	b.n	800834c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	429a      	cmp	r2, r3
 8008332:	d108      	bne.n	8008346 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f7fe ffca 	bl	80072d4 <tcp_abort>
      pcb = next;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	e002      	b.n	800834c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1ea      	bne.n	8008328 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	08010ab0 	.word	0x08010ab0
 8008360:	080111e4 	.word	0x080111e4
 8008364:	08010af4 	.word	0x08010af4

08008368 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d02a      	beq.n	80083ce <tcp_netif_ip_addr_changed+0x66>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d026      	beq.n	80083ce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008380:	4b15      	ldr	r3, [pc, #84]	; (80083d8 <tcp_netif_ip_addr_changed+0x70>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4619      	mov	r1, r3
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7ff ffbc 	bl	8008304 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800838c:	4b13      	ldr	r3, [pc, #76]	; (80083dc <tcp_netif_ip_addr_changed+0x74>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff ffb6 	bl	8008304 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d017      	beq.n	80083ce <tcp_netif_ip_addr_changed+0x66>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d013      	beq.n	80083ce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80083a6:	4b0e      	ldr	r3, [pc, #56]	; (80083e0 <tcp_netif_ip_addr_changed+0x78>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	e00c      	b.n	80083c8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d103      	bne.n	80083c2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1ef      	bne.n	80083ae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80083ce:	bf00      	nop
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	20006ec4 	.word	0x20006ec4
 80083dc:	20006ed0 	.word	0x20006ed0
 80083e0:	20006ecc 	.word	0x20006ecc

080083e4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d007      	beq.n	8008404 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7ff fc3f 	bl	8007c7c <tcp_segs_free>
    pcb->ooseq = NULL;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008404:	bf00      	nop
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800840c:	b590      	push	{r4, r7, lr}
 800840e:	b08d      	sub	sp, #52	; 0x34
 8008410:	af04      	add	r7, sp, #16
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d105      	bne.n	8008428 <tcp_input+0x1c>
 800841c:	4b9b      	ldr	r3, [pc, #620]	; (800868c <tcp_input+0x280>)
 800841e:	2283      	movs	r2, #131	; 0x83
 8008420:	499b      	ldr	r1, [pc, #620]	; (8008690 <tcp_input+0x284>)
 8008422:	489c      	ldr	r0, [pc, #624]	; (8008694 <tcp_input+0x288>)
 8008424:	f006 feb2 	bl	800f18c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	4a9a      	ldr	r2, [pc, #616]	; (8008698 <tcp_input+0x28c>)
 800842e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	895b      	ldrh	r3, [r3, #10]
 8008434:	2b13      	cmp	r3, #19
 8008436:	f240 83c4 	bls.w	8008bc2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800843a:	4b98      	ldr	r3, [pc, #608]	; (800869c <tcp_input+0x290>)
 800843c:	695a      	ldr	r2, [r3, #20]
 800843e:	4b97      	ldr	r3, [pc, #604]	; (800869c <tcp_input+0x290>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4619      	mov	r1, r3
 8008444:	4610      	mov	r0, r2
 8008446:	f005 ff0f 	bl	800e268 <ip4_addr_isbroadcast_u32>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	f040 83ba 	bne.w	8008bc6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008452:	4b92      	ldr	r3, [pc, #584]	; (800869c <tcp_input+0x290>)
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800845a:	2be0      	cmp	r3, #224	; 0xe0
 800845c:	f000 83b3 	beq.w	8008bc6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008460:	4b8d      	ldr	r3, [pc, #564]	; (8008698 <tcp_input+0x28c>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	899b      	ldrh	r3, [r3, #12]
 8008466:	b29b      	uxth	r3, r3
 8008468:	4618      	mov	r0, r3
 800846a:	f7fc fe76 	bl	800515a <lwip_htons>
 800846e:	4603      	mov	r3, r0
 8008470:	0b1b      	lsrs	r3, r3, #12
 8008472:	b29b      	uxth	r3, r3
 8008474:	b2db      	uxtb	r3, r3
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800847a:	7cbb      	ldrb	r3, [r7, #18]
 800847c:	2b13      	cmp	r3, #19
 800847e:	f240 83a2 	bls.w	8008bc6 <tcp_input+0x7ba>
 8008482:	7cbb      	ldrb	r3, [r7, #18]
 8008484:	b29a      	uxth	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	891b      	ldrh	r3, [r3, #8]
 800848a:	429a      	cmp	r2, r3
 800848c:	f200 839b 	bhi.w	8008bc6 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008490:	7cbb      	ldrb	r3, [r7, #18]
 8008492:	b29b      	uxth	r3, r3
 8008494:	3b14      	subs	r3, #20
 8008496:	b29a      	uxth	r2, r3
 8008498:	4b81      	ldr	r3, [pc, #516]	; (80086a0 <tcp_input+0x294>)
 800849a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800849c:	4b81      	ldr	r3, [pc, #516]	; (80086a4 <tcp_input+0x298>)
 800849e:	2200      	movs	r2, #0
 80084a0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	895a      	ldrh	r2, [r3, #10]
 80084a6:	7cbb      	ldrb	r3, [r7, #18]
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d309      	bcc.n	80084c2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80084ae:	4b7c      	ldr	r3, [pc, #496]	; (80086a0 <tcp_input+0x294>)
 80084b0:	881a      	ldrh	r2, [r3, #0]
 80084b2:	4b7d      	ldr	r3, [pc, #500]	; (80086a8 <tcp_input+0x29c>)
 80084b4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80084b6:	7cbb      	ldrb	r3, [r7, #18]
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7fe f862 	bl	8006584 <pbuf_remove_header>
 80084c0:	e04e      	b.n	8008560 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d105      	bne.n	80084d6 <tcp_input+0xca>
 80084ca:	4b70      	ldr	r3, [pc, #448]	; (800868c <tcp_input+0x280>)
 80084cc:	22c2      	movs	r2, #194	; 0xc2
 80084ce:	4977      	ldr	r1, [pc, #476]	; (80086ac <tcp_input+0x2a0>)
 80084d0:	4870      	ldr	r0, [pc, #448]	; (8008694 <tcp_input+0x288>)
 80084d2:	f006 fe5b 	bl	800f18c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80084d6:	2114      	movs	r1, #20
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7fe f853 	bl	8006584 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	895a      	ldrh	r2, [r3, #10]
 80084e2:	4b71      	ldr	r3, [pc, #452]	; (80086a8 <tcp_input+0x29c>)
 80084e4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80084e6:	4b6e      	ldr	r3, [pc, #440]	; (80086a0 <tcp_input+0x294>)
 80084e8:	881a      	ldrh	r2, [r3, #0]
 80084ea:	4b6f      	ldr	r3, [pc, #444]	; (80086a8 <tcp_input+0x29c>)
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80084f2:	4b6d      	ldr	r3, [pc, #436]	; (80086a8 <tcp_input+0x29c>)
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7fe f843 	bl	8006584 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	895b      	ldrh	r3, [r3, #10]
 8008504:	8a3a      	ldrh	r2, [r7, #16]
 8008506:	429a      	cmp	r2, r3
 8008508:	f200 835f 	bhi.w	8008bca <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	4a64      	ldr	r2, [pc, #400]	; (80086a4 <tcp_input+0x298>)
 8008514:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	8a3a      	ldrh	r2, [r7, #16]
 800851c:	4611      	mov	r1, r2
 800851e:	4618      	mov	r0, r3
 8008520:	f7fe f830 	bl	8006584 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	891a      	ldrh	r2, [r3, #8]
 8008528:	8a3b      	ldrh	r3, [r7, #16]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	b29a      	uxth	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	895b      	ldrh	r3, [r3, #10]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d005      	beq.n	8008546 <tcp_input+0x13a>
 800853a:	4b54      	ldr	r3, [pc, #336]	; (800868c <tcp_input+0x280>)
 800853c:	22df      	movs	r2, #223	; 0xdf
 800853e:	495c      	ldr	r1, [pc, #368]	; (80086b0 <tcp_input+0x2a4>)
 8008540:	4854      	ldr	r0, [pc, #336]	; (8008694 <tcp_input+0x288>)
 8008542:	f006 fe23 	bl	800f18c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	891a      	ldrh	r2, [r3, #8]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	891b      	ldrh	r3, [r3, #8]
 8008550:	429a      	cmp	r2, r3
 8008552:	d005      	beq.n	8008560 <tcp_input+0x154>
 8008554:	4b4d      	ldr	r3, [pc, #308]	; (800868c <tcp_input+0x280>)
 8008556:	22e0      	movs	r2, #224	; 0xe0
 8008558:	4956      	ldr	r1, [pc, #344]	; (80086b4 <tcp_input+0x2a8>)
 800855a:	484e      	ldr	r0, [pc, #312]	; (8008694 <tcp_input+0x288>)
 800855c:	f006 fe16 	bl	800f18c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008560:	4b4d      	ldr	r3, [pc, #308]	; (8008698 <tcp_input+0x28c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b29a      	uxth	r2, r3
 8008568:	4b4b      	ldr	r3, [pc, #300]	; (8008698 <tcp_input+0x28c>)
 800856a:	681c      	ldr	r4, [r3, #0]
 800856c:	4610      	mov	r0, r2
 800856e:	f7fc fdf4 	bl	800515a <lwip_htons>
 8008572:	4603      	mov	r3, r0
 8008574:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008576:	4b48      	ldr	r3, [pc, #288]	; (8008698 <tcp_input+0x28c>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	885b      	ldrh	r3, [r3, #2]
 800857c:	b29a      	uxth	r2, r3
 800857e:	4b46      	ldr	r3, [pc, #280]	; (8008698 <tcp_input+0x28c>)
 8008580:	681c      	ldr	r4, [r3, #0]
 8008582:	4610      	mov	r0, r2
 8008584:	f7fc fde9 	bl	800515a <lwip_htons>
 8008588:	4603      	mov	r3, r0
 800858a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800858c:	4b42      	ldr	r3, [pc, #264]	; (8008698 <tcp_input+0x28c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	4b41      	ldr	r3, [pc, #260]	; (8008698 <tcp_input+0x28c>)
 8008594:	681c      	ldr	r4, [r3, #0]
 8008596:	4610      	mov	r0, r2
 8008598:	f7fc fdf4 	bl	8005184 <lwip_htonl>
 800859c:	4603      	mov	r3, r0
 800859e:	6063      	str	r3, [r4, #4]
 80085a0:	6863      	ldr	r3, [r4, #4]
 80085a2:	4a45      	ldr	r2, [pc, #276]	; (80086b8 <tcp_input+0x2ac>)
 80085a4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80085a6:	4b3c      	ldr	r3, [pc, #240]	; (8008698 <tcp_input+0x28c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	689a      	ldr	r2, [r3, #8]
 80085ac:	4b3a      	ldr	r3, [pc, #232]	; (8008698 <tcp_input+0x28c>)
 80085ae:	681c      	ldr	r4, [r3, #0]
 80085b0:	4610      	mov	r0, r2
 80085b2:	f7fc fde7 	bl	8005184 <lwip_htonl>
 80085b6:	4603      	mov	r3, r0
 80085b8:	60a3      	str	r3, [r4, #8]
 80085ba:	68a3      	ldr	r3, [r4, #8]
 80085bc:	4a3f      	ldr	r2, [pc, #252]	; (80086bc <tcp_input+0x2b0>)
 80085be:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80085c0:	4b35      	ldr	r3, [pc, #212]	; (8008698 <tcp_input+0x28c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	89db      	ldrh	r3, [r3, #14]
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	4b33      	ldr	r3, [pc, #204]	; (8008698 <tcp_input+0x28c>)
 80085ca:	681c      	ldr	r4, [r3, #0]
 80085cc:	4610      	mov	r0, r2
 80085ce:	f7fc fdc4 	bl	800515a <lwip_htons>
 80085d2:	4603      	mov	r3, r0
 80085d4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80085d6:	4b30      	ldr	r3, [pc, #192]	; (8008698 <tcp_input+0x28c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	899b      	ldrh	r3, [r3, #12]
 80085dc:	b29b      	uxth	r3, r3
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fc fdbb 	bl	800515a <lwip_htons>
 80085e4:	4603      	mov	r3, r0
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	4b34      	ldr	r3, [pc, #208]	; (80086c0 <tcp_input+0x2b4>)
 80085f0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	891a      	ldrh	r2, [r3, #8]
 80085f6:	4b33      	ldr	r3, [pc, #204]	; (80086c4 <tcp_input+0x2b8>)
 80085f8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80085fa:	4b31      	ldr	r3, [pc, #196]	; (80086c0 <tcp_input+0x2b4>)
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	f003 0303 	and.w	r3, r3, #3
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00c      	beq.n	8008620 <tcp_input+0x214>
    tcplen++;
 8008606:	4b2f      	ldr	r3, [pc, #188]	; (80086c4 <tcp_input+0x2b8>)
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	3301      	adds	r3, #1
 800860c:	b29a      	uxth	r2, r3
 800860e:	4b2d      	ldr	r3, [pc, #180]	; (80086c4 <tcp_input+0x2b8>)
 8008610:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	891a      	ldrh	r2, [r3, #8]
 8008616:	4b2b      	ldr	r3, [pc, #172]	; (80086c4 <tcp_input+0x2b8>)
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	f200 82d7 	bhi.w	8008bce <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008620:	2300      	movs	r3, #0
 8008622:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008624:	4b28      	ldr	r3, [pc, #160]	; (80086c8 <tcp_input+0x2bc>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	61fb      	str	r3, [r7, #28]
 800862a:	e09d      	b.n	8008768 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	7d1b      	ldrb	r3, [r3, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d105      	bne.n	8008640 <tcp_input+0x234>
 8008634:	4b15      	ldr	r3, [pc, #84]	; (800868c <tcp_input+0x280>)
 8008636:	22fb      	movs	r2, #251	; 0xfb
 8008638:	4924      	ldr	r1, [pc, #144]	; (80086cc <tcp_input+0x2c0>)
 800863a:	4816      	ldr	r0, [pc, #88]	; (8008694 <tcp_input+0x288>)
 800863c:	f006 fda6 	bl	800f18c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	7d1b      	ldrb	r3, [r3, #20]
 8008644:	2b0a      	cmp	r3, #10
 8008646:	d105      	bne.n	8008654 <tcp_input+0x248>
 8008648:	4b10      	ldr	r3, [pc, #64]	; (800868c <tcp_input+0x280>)
 800864a:	22fc      	movs	r2, #252	; 0xfc
 800864c:	4920      	ldr	r1, [pc, #128]	; (80086d0 <tcp_input+0x2c4>)
 800864e:	4811      	ldr	r0, [pc, #68]	; (8008694 <tcp_input+0x288>)
 8008650:	f006 fd9c 	bl	800f18c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	7d1b      	ldrb	r3, [r3, #20]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d105      	bne.n	8008668 <tcp_input+0x25c>
 800865c:	4b0b      	ldr	r3, [pc, #44]	; (800868c <tcp_input+0x280>)
 800865e:	22fd      	movs	r2, #253	; 0xfd
 8008660:	491c      	ldr	r1, [pc, #112]	; (80086d4 <tcp_input+0x2c8>)
 8008662:	480c      	ldr	r0, [pc, #48]	; (8008694 <tcp_input+0x288>)
 8008664:	f006 fd92 	bl	800f18c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	7a1b      	ldrb	r3, [r3, #8]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d033      	beq.n	80086d8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	7a1a      	ldrb	r2, [r3, #8]
 8008674:	4b09      	ldr	r3, [pc, #36]	; (800869c <tcp_input+0x290>)
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800867c:	3301      	adds	r3, #1
 800867e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008680:	429a      	cmp	r2, r3
 8008682:	d029      	beq.n	80086d8 <tcp_input+0x2cc>
      prev = pcb;
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	61bb      	str	r3, [r7, #24]
      continue;
 8008688:	e06b      	b.n	8008762 <tcp_input+0x356>
 800868a:	bf00      	nop
 800868c:	08011218 	.word	0x08011218
 8008690:	0801124c 	.word	0x0801124c
 8008694:	08011264 	.word	0x08011264
 8008698:	20000278 	.word	0x20000278
 800869c:	20003980 	.word	0x20003980
 80086a0:	2000027c 	.word	0x2000027c
 80086a4:	20000280 	.word	0x20000280
 80086a8:	2000027e 	.word	0x2000027e
 80086ac:	0801128c 	.word	0x0801128c
 80086b0:	0801129c 	.word	0x0801129c
 80086b4:	080112a8 	.word	0x080112a8
 80086b8:	20000288 	.word	0x20000288
 80086bc:	2000028c 	.word	0x2000028c
 80086c0:	20000294 	.word	0x20000294
 80086c4:	20000292 	.word	0x20000292
 80086c8:	20006ec4 	.word	0x20006ec4
 80086cc:	080112c8 	.word	0x080112c8
 80086d0:	080112f0 	.word	0x080112f0
 80086d4:	0801131c 	.word	0x0801131c
    }

    if (pcb->remote_port == tcphdr->src &&
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	8b1a      	ldrh	r2, [r3, #24]
 80086dc:	4b94      	ldr	r3, [pc, #592]	; (8008930 <tcp_input+0x524>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d13a      	bne.n	800875e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	8ada      	ldrh	r2, [r3, #22]
 80086ec:	4b90      	ldr	r3, [pc, #576]	; (8008930 <tcp_input+0x524>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	885b      	ldrh	r3, [r3, #2]
 80086f2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d132      	bne.n	800875e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	4b8d      	ldr	r3, [pc, #564]	; (8008934 <tcp_input+0x528>)
 80086fe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008700:	429a      	cmp	r2, r3
 8008702:	d12c      	bne.n	800875e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	4b8a      	ldr	r3, [pc, #552]	; (8008934 <tcp_input+0x528>)
 800870a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800870c:	429a      	cmp	r2, r3
 800870e:	d126      	bne.n	800875e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	69fa      	ldr	r2, [r7, #28]
 8008716:	429a      	cmp	r2, r3
 8008718:	d106      	bne.n	8008728 <tcp_input+0x31c>
 800871a:	4b87      	ldr	r3, [pc, #540]	; (8008938 <tcp_input+0x52c>)
 800871c:	f240 120d 	movw	r2, #269	; 0x10d
 8008720:	4986      	ldr	r1, [pc, #536]	; (800893c <tcp_input+0x530>)
 8008722:	4887      	ldr	r0, [pc, #540]	; (8008940 <tcp_input+0x534>)
 8008724:	f006 fd32 	bl	800f18c <iprintf>
      if (prev != NULL) {
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00a      	beq.n	8008744 <tcp_input+0x338>
        prev->next = pcb->next;
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008736:	4b83      	ldr	r3, [pc, #524]	; (8008944 <tcp_input+0x538>)
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800873e:	4a81      	ldr	r2, [pc, #516]	; (8008944 <tcp_input+0x538>)
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	69fa      	ldr	r2, [r7, #28]
 800874a:	429a      	cmp	r2, r3
 800874c:	d111      	bne.n	8008772 <tcp_input+0x366>
 800874e:	4b7a      	ldr	r3, [pc, #488]	; (8008938 <tcp_input+0x52c>)
 8008750:	f240 1215 	movw	r2, #277	; 0x115
 8008754:	497c      	ldr	r1, [pc, #496]	; (8008948 <tcp_input+0x53c>)
 8008756:	487a      	ldr	r0, [pc, #488]	; (8008940 <tcp_input+0x534>)
 8008758:	f006 fd18 	bl	800f18c <iprintf>
      break;
 800875c:	e009      	b.n	8008772 <tcp_input+0x366>
    }
    prev = pcb;
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	61fb      	str	r3, [r7, #28]
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	2b00      	cmp	r3, #0
 800876c:	f47f af5e 	bne.w	800862c <tcp_input+0x220>
 8008770:	e000      	b.n	8008774 <tcp_input+0x368>
      break;
 8008772:	bf00      	nop
  }

  if (pcb == NULL) {
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	2b00      	cmp	r3, #0
 8008778:	f040 8095 	bne.w	80088a6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800877c:	4b73      	ldr	r3, [pc, #460]	; (800894c <tcp_input+0x540>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	61fb      	str	r3, [r7, #28]
 8008782:	e03f      	b.n	8008804 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	7d1b      	ldrb	r3, [r3, #20]
 8008788:	2b0a      	cmp	r3, #10
 800878a:	d006      	beq.n	800879a <tcp_input+0x38e>
 800878c:	4b6a      	ldr	r3, [pc, #424]	; (8008938 <tcp_input+0x52c>)
 800878e:	f240 121f 	movw	r2, #287	; 0x11f
 8008792:	496f      	ldr	r1, [pc, #444]	; (8008950 <tcp_input+0x544>)
 8008794:	486a      	ldr	r0, [pc, #424]	; (8008940 <tcp_input+0x534>)
 8008796:	f006 fcf9 	bl	800f18c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	7a1b      	ldrb	r3, [r3, #8]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d009      	beq.n	80087b6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	7a1a      	ldrb	r2, [r3, #8]
 80087a6:	4b63      	ldr	r3, [pc, #396]	; (8008934 <tcp_input+0x528>)
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80087ae:	3301      	adds	r3, #1
 80087b0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d122      	bne.n	80087fc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	8b1a      	ldrh	r2, [r3, #24]
 80087ba:	4b5d      	ldr	r3, [pc, #372]	; (8008930 <tcp_input+0x524>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d11b      	bne.n	80087fe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	8ada      	ldrh	r2, [r3, #22]
 80087ca:	4b59      	ldr	r3, [pc, #356]	; (8008930 <tcp_input+0x524>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	885b      	ldrh	r3, [r3, #2]
 80087d0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d113      	bne.n	80087fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	4b56      	ldr	r3, [pc, #344]	; (8008934 <tcp_input+0x528>)
 80087dc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80087de:	429a      	cmp	r2, r3
 80087e0:	d10d      	bne.n	80087fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	4b53      	ldr	r3, [pc, #332]	; (8008934 <tcp_input+0x528>)
 80087e8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d107      	bne.n	80087fe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80087ee:	69f8      	ldr	r0, [r7, #28]
 80087f0:	f000 fb52 	bl	8008e98 <tcp_timewait_input>
        }
        pbuf_free(p);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f7fd ff4b 	bl	8006690 <pbuf_free>
        return;
 80087fa:	e1ee      	b.n	8008bda <tcp_input+0x7ce>
        continue;
 80087fc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	61fb      	str	r3, [r7, #28]
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1bc      	bne.n	8008784 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800880a:	2300      	movs	r3, #0
 800880c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800880e:	4b51      	ldr	r3, [pc, #324]	; (8008954 <tcp_input+0x548>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	617b      	str	r3, [r7, #20]
 8008814:	e02a      	b.n	800886c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	7a1b      	ldrb	r3, [r3, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00c      	beq.n	8008838 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	7a1a      	ldrb	r2, [r3, #8]
 8008822:	4b44      	ldr	r3, [pc, #272]	; (8008934 <tcp_input+0x528>)
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800882a:	3301      	adds	r3, #1
 800882c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800882e:	429a      	cmp	r2, r3
 8008830:	d002      	beq.n	8008838 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	61bb      	str	r3, [r7, #24]
        continue;
 8008836:	e016      	b.n	8008866 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	8ada      	ldrh	r2, [r3, #22]
 800883c:	4b3c      	ldr	r3, [pc, #240]	; (8008930 <tcp_input+0x524>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	885b      	ldrh	r3, [r3, #2]
 8008842:	b29b      	uxth	r3, r3
 8008844:	429a      	cmp	r2, r3
 8008846:	d10c      	bne.n	8008862 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	4b39      	ldr	r3, [pc, #228]	; (8008934 <tcp_input+0x528>)
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	429a      	cmp	r2, r3
 8008852:	d00f      	beq.n	8008874 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00d      	beq.n	8008876 <tcp_input+0x46a>
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d009      	beq.n	8008876 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	617b      	str	r3, [r7, #20]
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1d1      	bne.n	8008816 <tcp_input+0x40a>
 8008872:	e000      	b.n	8008876 <tcp_input+0x46a>
            break;
 8008874:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d014      	beq.n	80088a6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00a      	beq.n	8008898 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	68da      	ldr	r2, [r3, #12]
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800888a:	4b32      	ldr	r3, [pc, #200]	; (8008954 <tcp_input+0x548>)
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008892:	4a30      	ldr	r2, [pc, #192]	; (8008954 <tcp_input+0x548>)
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008898:	6978      	ldr	r0, [r7, #20]
 800889a:	f000 f9ff 	bl	8008c9c <tcp_listen_input>
      }
      pbuf_free(p);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7fd fef6 	bl	8006690 <pbuf_free>
      return;
 80088a4:	e199      	b.n	8008bda <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 8160 	beq.w	8008b6e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80088ae:	4b2a      	ldr	r3, [pc, #168]	; (8008958 <tcp_input+0x54c>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	891a      	ldrh	r2, [r3, #8]
 80088b8:	4b27      	ldr	r3, [pc, #156]	; (8008958 <tcp_input+0x54c>)
 80088ba:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80088bc:	4a26      	ldr	r2, [pc, #152]	; (8008958 <tcp_input+0x54c>)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80088c2:	4b1b      	ldr	r3, [pc, #108]	; (8008930 <tcp_input+0x524>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a24      	ldr	r2, [pc, #144]	; (8008958 <tcp_input+0x54c>)
 80088c8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80088ca:	4b24      	ldr	r3, [pc, #144]	; (800895c <tcp_input+0x550>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80088d0:	4b23      	ldr	r3, [pc, #140]	; (8008960 <tcp_input+0x554>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80088d6:	4b23      	ldr	r3, [pc, #140]	; (8008964 <tcp_input+0x558>)
 80088d8:	2200      	movs	r2, #0
 80088da:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80088dc:	4b22      	ldr	r3, [pc, #136]	; (8008968 <tcp_input+0x55c>)
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	f003 0308 	and.w	r3, r3, #8
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d006      	beq.n	80088f6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	7b5b      	ldrb	r3, [r3, #13]
 80088ec:	f043 0301 	orr.w	r3, r3, #1
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d038      	beq.n	8008970 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80088fe:	69f8      	ldr	r0, [r7, #28]
 8008900:	f7ff f940 	bl	8007b84 <tcp_process_refused_data>
 8008904:	4603      	mov	r3, r0
 8008906:	f113 0f0d 	cmn.w	r3, #13
 800890a:	d007      	beq.n	800891c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008910:	2b00      	cmp	r3, #0
 8008912:	d02d      	beq.n	8008970 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008914:	4b15      	ldr	r3, [pc, #84]	; (800896c <tcp_input+0x560>)
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d029      	beq.n	8008970 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008920:	2b00      	cmp	r3, #0
 8008922:	f040 8104 	bne.w	8008b2e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008926:	69f8      	ldr	r0, [r7, #28]
 8008928:	f003 f9ce 	bl	800bcc8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800892c:	e0ff      	b.n	8008b2e <tcp_input+0x722>
 800892e:	bf00      	nop
 8008930:	20000278 	.word	0x20000278
 8008934:	20003980 	.word	0x20003980
 8008938:	08011218 	.word	0x08011218
 800893c:	08011344 	.word	0x08011344
 8008940:	08011264 	.word	0x08011264
 8008944:	20006ec4 	.word	0x20006ec4
 8008948:	08011370 	.word	0x08011370
 800894c:	20006ed4 	.word	0x20006ed4
 8008950:	0801139c 	.word	0x0801139c
 8008954:	20006ecc 	.word	0x20006ecc
 8008958:	20000268 	.word	0x20000268
 800895c:	20000298 	.word	0x20000298
 8008960:	20000295 	.word	0x20000295
 8008964:	20000290 	.word	0x20000290
 8008968:	20000294 	.word	0x20000294
 800896c:	20000292 	.word	0x20000292
      }
    }
    tcp_input_pcb = pcb;
 8008970:	4a9b      	ldr	r2, [pc, #620]	; (8008be0 <tcp_input+0x7d4>)
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008976:	69f8      	ldr	r0, [r7, #28]
 8008978:	f000 fb0a 	bl	8008f90 <tcp_process>
 800897c:	4603      	mov	r3, r0
 800897e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008980:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008984:	f113 0f0d 	cmn.w	r3, #13
 8008988:	f000 80d3 	beq.w	8008b32 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800898c:	4b95      	ldr	r3, [pc, #596]	; (8008be4 <tcp_input+0x7d8>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	f003 0308 	and.w	r3, r3, #8
 8008994:	2b00      	cmp	r3, #0
 8008996:	d015      	beq.n	80089c4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d008      	beq.n	80089b4 <tcp_input+0x5a8>
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089a8:	69fa      	ldr	r2, [r7, #28]
 80089aa:	6912      	ldr	r2, [r2, #16]
 80089ac:	f06f 010d 	mvn.w	r1, #13
 80089b0:	4610      	mov	r0, r2
 80089b2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80089b4:	69f9      	ldr	r1, [r7, #28]
 80089b6:	488c      	ldr	r0, [pc, #560]	; (8008be8 <tcp_input+0x7dc>)
 80089b8:	f7ff fbb0 	bl	800811c <tcp_pcb_remove>
        tcp_free(pcb);
 80089bc:	69f8      	ldr	r0, [r7, #28]
 80089be:	f7fe f9a9 	bl	8006d14 <tcp_free>
 80089c2:	e0c1      	b.n	8008b48 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80089c8:	4b88      	ldr	r3, [pc, #544]	; (8008bec <tcp_input+0x7e0>)
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01d      	beq.n	8008a0c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80089d0:	4b86      	ldr	r3, [pc, #536]	; (8008bec <tcp_input+0x7e0>)
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00a      	beq.n	80089f6 <tcp_input+0x5ea>
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089e6:	69fa      	ldr	r2, [r7, #28]
 80089e8:	6910      	ldr	r0, [r2, #16]
 80089ea:	89fa      	ldrh	r2, [r7, #14]
 80089ec:	69f9      	ldr	r1, [r7, #28]
 80089ee:	4798      	blx	r3
 80089f0:	4603      	mov	r3, r0
 80089f2:	74fb      	strb	r3, [r7, #19]
 80089f4:	e001      	b.n	80089fa <tcp_input+0x5ee>
 80089f6:	2300      	movs	r3, #0
 80089f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80089fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089fe:	f113 0f0d 	cmn.w	r3, #13
 8008a02:	f000 8098 	beq.w	8008b36 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008a06:	4b79      	ldr	r3, [pc, #484]	; (8008bec <tcp_input+0x7e0>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008a0c:	69f8      	ldr	r0, [r7, #28]
 8008a0e:	f000 f905 	bl	8008c1c <tcp_input_delayed_close>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f040 8090 	bne.w	8008b3a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008a1a:	4b75      	ldr	r3, [pc, #468]	; (8008bf0 <tcp_input+0x7e4>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d041      	beq.n	8008aa6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d006      	beq.n	8008a38 <tcp_input+0x62c>
 8008a2a:	4b72      	ldr	r3, [pc, #456]	; (8008bf4 <tcp_input+0x7e8>)
 8008a2c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008a30:	4971      	ldr	r1, [pc, #452]	; (8008bf8 <tcp_input+0x7ec>)
 8008a32:	4872      	ldr	r0, [pc, #456]	; (8008bfc <tcp_input+0x7f0>)
 8008a34:	f006 fbaa 	bl	800f18c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	8b5b      	ldrh	r3, [r3, #26]
 8008a3c:	f003 0310 	and.w	r3, r3, #16
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d008      	beq.n	8008a56 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008a44:	4b6a      	ldr	r3, [pc, #424]	; (8008bf0 <tcp_input+0x7e4>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7fd fe21 	bl	8006690 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008a4e:	69f8      	ldr	r0, [r7, #28]
 8008a50:	f7fe fc40 	bl	80072d4 <tcp_abort>
            goto aborted;
 8008a54:	e078      	b.n	8008b48 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00c      	beq.n	8008a7a <tcp_input+0x66e>
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	6918      	ldr	r0, [r3, #16]
 8008a6a:	4b61      	ldr	r3, [pc, #388]	; (8008bf0 <tcp_input+0x7e4>)
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	69f9      	ldr	r1, [r7, #28]
 8008a72:	47a0      	blx	r4
 8008a74:	4603      	mov	r3, r0
 8008a76:	74fb      	strb	r3, [r7, #19]
 8008a78:	e008      	b.n	8008a8c <tcp_input+0x680>
 8008a7a:	4b5d      	ldr	r3, [pc, #372]	; (8008bf0 <tcp_input+0x7e4>)
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	69f9      	ldr	r1, [r7, #28]
 8008a82:	2000      	movs	r0, #0
 8008a84:	f7ff f952 	bl	8007d2c <tcp_recv_null>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008a8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a90:	f113 0f0d 	cmn.w	r3, #13
 8008a94:	d053      	beq.n	8008b3e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008a96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d003      	beq.n	8008aa6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008a9e:	4b54      	ldr	r3, [pc, #336]	; (8008bf0 <tcp_input+0x7e4>)
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008aa6:	4b4f      	ldr	r3, [pc, #316]	; (8008be4 <tcp_input+0x7d8>)
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	f003 0320 	and.w	r3, r3, #32
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d030      	beq.n	8008b14 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d009      	beq.n	8008ace <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008abe:	7b5a      	ldrb	r2, [r3, #13]
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ac4:	f042 0220 	orr.w	r2, r2, #32
 8008ac8:	b2d2      	uxtb	r2, r2
 8008aca:	735a      	strb	r2, [r3, #13]
 8008acc:	e022      	b.n	8008b14 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ad2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008ad6:	d005      	beq.n	8008ae4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008adc:	3301      	adds	r3, #1
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00b      	beq.n	8008b06 <tcp_input+0x6fa>
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	6918      	ldr	r0, [r3, #16]
 8008af8:	2300      	movs	r3, #0
 8008afa:	2200      	movs	r2, #0
 8008afc:	69f9      	ldr	r1, [r7, #28]
 8008afe:	47a0      	blx	r4
 8008b00:	4603      	mov	r3, r0
 8008b02:	74fb      	strb	r3, [r7, #19]
 8008b04:	e001      	b.n	8008b0a <tcp_input+0x6fe>
 8008b06:	2300      	movs	r3, #0
 8008b08:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008b0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b0e:	f113 0f0d 	cmn.w	r3, #13
 8008b12:	d016      	beq.n	8008b42 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008b14:	4b32      	ldr	r3, [pc, #200]	; (8008be0 <tcp_input+0x7d4>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008b1a:	69f8      	ldr	r0, [r7, #28]
 8008b1c:	f000 f87e 	bl	8008c1c <tcp_input_delayed_close>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10f      	bne.n	8008b46 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008b26:	69f8      	ldr	r0, [r7, #28]
 8008b28:	f002 fab6 	bl	800b098 <tcp_output>
 8008b2c:	e00c      	b.n	8008b48 <tcp_input+0x73c>
        goto aborted;
 8008b2e:	bf00      	nop
 8008b30:	e00a      	b.n	8008b48 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008b32:	bf00      	nop
 8008b34:	e008      	b.n	8008b48 <tcp_input+0x73c>
              goto aborted;
 8008b36:	bf00      	nop
 8008b38:	e006      	b.n	8008b48 <tcp_input+0x73c>
          goto aborted;
 8008b3a:	bf00      	nop
 8008b3c:	e004      	b.n	8008b48 <tcp_input+0x73c>
            goto aborted;
 8008b3e:	bf00      	nop
 8008b40:	e002      	b.n	8008b48 <tcp_input+0x73c>
              goto aborted;
 8008b42:	bf00      	nop
 8008b44:	e000      	b.n	8008b48 <tcp_input+0x73c>
          goto aborted;
 8008b46:	bf00      	nop
    tcp_input_pcb = NULL;
 8008b48:	4b25      	ldr	r3, [pc, #148]	; (8008be0 <tcp_input+0x7d4>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008b4e:	4b28      	ldr	r3, [pc, #160]	; (8008bf0 <tcp_input+0x7e4>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008b54:	4b2a      	ldr	r3, [pc, #168]	; (8008c00 <tcp_input+0x7f4>)
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d03d      	beq.n	8008bd8 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8008b5c:	4b28      	ldr	r3, [pc, #160]	; (8008c00 <tcp_input+0x7f4>)
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7fd fd95 	bl	8006690 <pbuf_free>
      inseg.p = NULL;
 8008b66:	4b26      	ldr	r3, [pc, #152]	; (8008c00 <tcp_input+0x7f4>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008b6c:	e034      	b.n	8008bd8 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008b6e:	4b25      	ldr	r3, [pc, #148]	; (8008c04 <tcp_input+0x7f8>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	899b      	ldrh	r3, [r3, #12]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fc faef 	bl	800515a <lwip_htons>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 0304 	and.w	r3, r3, #4
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d118      	bne.n	8008bba <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b88:	4b1f      	ldr	r3, [pc, #124]	; (8008c08 <tcp_input+0x7fc>)
 8008b8a:	6819      	ldr	r1, [r3, #0]
 8008b8c:	4b1f      	ldr	r3, [pc, #124]	; (8008c0c <tcp_input+0x800>)
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	461a      	mov	r2, r3
 8008b92:	4b1f      	ldr	r3, [pc, #124]	; (8008c10 <tcp_input+0x804>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b98:	4b1a      	ldr	r3, [pc, #104]	; (8008c04 <tcp_input+0x7f8>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b9c:	885b      	ldrh	r3, [r3, #2]
 8008b9e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ba0:	4a18      	ldr	r2, [pc, #96]	; (8008c04 <tcp_input+0x7f8>)
 8008ba2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ba4:	8812      	ldrh	r2, [r2, #0]
 8008ba6:	b292      	uxth	r2, r2
 8008ba8:	9202      	str	r2, [sp, #8]
 8008baa:	9301      	str	r3, [sp, #4]
 8008bac:	4b19      	ldr	r3, [pc, #100]	; (8008c14 <tcp_input+0x808>)
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	4b19      	ldr	r3, [pc, #100]	; (8008c18 <tcp_input+0x80c>)
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	f003 f835 	bl	800bc24 <tcp_rst>
    pbuf_free(p);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7fd fd68 	bl	8006690 <pbuf_free>
  return;
 8008bc0:	e00a      	b.n	8008bd8 <tcp_input+0x7cc>
    goto dropped;
 8008bc2:	bf00      	nop
 8008bc4:	e004      	b.n	8008bd0 <tcp_input+0x7c4>
dropped:
 8008bc6:	bf00      	nop
 8008bc8:	e002      	b.n	8008bd0 <tcp_input+0x7c4>
      goto dropped;
 8008bca:	bf00      	nop
 8008bcc:	e000      	b.n	8008bd0 <tcp_input+0x7c4>
      goto dropped;
 8008bce:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7fd fd5d 	bl	8006690 <pbuf_free>
 8008bd6:	e000      	b.n	8008bda <tcp_input+0x7ce>
  return;
 8008bd8:	bf00      	nop
}
 8008bda:	3724      	adds	r7, #36	; 0x24
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd90      	pop	{r4, r7, pc}
 8008be0:	20006ed8 	.word	0x20006ed8
 8008be4:	20000295 	.word	0x20000295
 8008be8:	20006ec4 	.word	0x20006ec4
 8008bec:	20000290 	.word	0x20000290
 8008bf0:	20000298 	.word	0x20000298
 8008bf4:	08011218 	.word	0x08011218
 8008bf8:	080113cc 	.word	0x080113cc
 8008bfc:	08011264 	.word	0x08011264
 8008c00:	20000268 	.word	0x20000268
 8008c04:	20000278 	.word	0x20000278
 8008c08:	2000028c 	.word	0x2000028c
 8008c0c:	20000292 	.word	0x20000292
 8008c10:	20000288 	.word	0x20000288
 8008c14:	20003990 	.word	0x20003990
 8008c18:	20003994 	.word	0x20003994

08008c1c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d106      	bne.n	8008c38 <tcp_input_delayed_close+0x1c>
 8008c2a:	4b17      	ldr	r3, [pc, #92]	; (8008c88 <tcp_input_delayed_close+0x6c>)
 8008c2c:	f240 225a 	movw	r2, #602	; 0x25a
 8008c30:	4916      	ldr	r1, [pc, #88]	; (8008c8c <tcp_input_delayed_close+0x70>)
 8008c32:	4817      	ldr	r0, [pc, #92]	; (8008c90 <tcp_input_delayed_close+0x74>)
 8008c34:	f006 faaa 	bl	800f18c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008c38:	4b16      	ldr	r3, [pc, #88]	; (8008c94 <tcp_input_delayed_close+0x78>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	f003 0310 	and.w	r3, r3, #16
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d01c      	beq.n	8008c7e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	8b5b      	ldrh	r3, [r3, #26]
 8008c48:	f003 0310 	and.w	r3, r3, #16
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10d      	bne.n	8008c6c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d008      	beq.n	8008c6c <tcp_input_delayed_close+0x50>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	6912      	ldr	r2, [r2, #16]
 8008c64:	f06f 010e 	mvn.w	r1, #14
 8008c68:	4610      	mov	r0, r2
 8008c6a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008c6c:	6879      	ldr	r1, [r7, #4]
 8008c6e:	480a      	ldr	r0, [pc, #40]	; (8008c98 <tcp_input_delayed_close+0x7c>)
 8008c70:	f7ff fa54 	bl	800811c <tcp_pcb_remove>
    tcp_free(pcb);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7fe f84d 	bl	8006d14 <tcp_free>
    return 1;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e000      	b.n	8008c80 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	08011218 	.word	0x08011218
 8008c8c:	080113e8 	.word	0x080113e8
 8008c90:	08011264 	.word	0x08011264
 8008c94:	20000295 	.word	0x20000295
 8008c98:	20006ec4 	.word	0x20006ec4

08008c9c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008c9c:	b590      	push	{r4, r7, lr}
 8008c9e:	b08b      	sub	sp, #44	; 0x2c
 8008ca0:	af04      	add	r7, sp, #16
 8008ca2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008ca4:	4b6f      	ldr	r3, [pc, #444]	; (8008e64 <tcp_listen_input+0x1c8>)
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	f003 0304 	and.w	r3, r3, #4
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f040 80d3 	bne.w	8008e58 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d106      	bne.n	8008cc6 <tcp_listen_input+0x2a>
 8008cb8:	4b6b      	ldr	r3, [pc, #428]	; (8008e68 <tcp_listen_input+0x1cc>)
 8008cba:	f240 2281 	movw	r2, #641	; 0x281
 8008cbe:	496b      	ldr	r1, [pc, #428]	; (8008e6c <tcp_listen_input+0x1d0>)
 8008cc0:	486b      	ldr	r0, [pc, #428]	; (8008e70 <tcp_listen_input+0x1d4>)
 8008cc2:	f006 fa63 	bl	800f18c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008cc6:	4b67      	ldr	r3, [pc, #412]	; (8008e64 <tcp_listen_input+0x1c8>)
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	f003 0310 	and.w	r3, r3, #16
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d019      	beq.n	8008d06 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008cd2:	4b68      	ldr	r3, [pc, #416]	; (8008e74 <tcp_listen_input+0x1d8>)
 8008cd4:	6819      	ldr	r1, [r3, #0]
 8008cd6:	4b68      	ldr	r3, [pc, #416]	; (8008e78 <tcp_listen_input+0x1dc>)
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	4b67      	ldr	r3, [pc, #412]	; (8008e7c <tcp_listen_input+0x1e0>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ce2:	4b67      	ldr	r3, [pc, #412]	; (8008e80 <tcp_listen_input+0x1e4>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ce6:	885b      	ldrh	r3, [r3, #2]
 8008ce8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008cea:	4a65      	ldr	r2, [pc, #404]	; (8008e80 <tcp_listen_input+0x1e4>)
 8008cec:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008cee:	8812      	ldrh	r2, [r2, #0]
 8008cf0:	b292      	uxth	r2, r2
 8008cf2:	9202      	str	r2, [sp, #8]
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	4b63      	ldr	r3, [pc, #396]	; (8008e84 <tcp_listen_input+0x1e8>)
 8008cf8:	9300      	str	r3, [sp, #0]
 8008cfa:	4b63      	ldr	r3, [pc, #396]	; (8008e88 <tcp_listen_input+0x1ec>)
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f002 ff90 	bl	800bc24 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008d04:	e0aa      	b.n	8008e5c <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8008d06:	4b57      	ldr	r3, [pc, #348]	; (8008e64 <tcp_listen_input+0x1c8>)
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	f003 0302 	and.w	r3, r3, #2
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 80a4 	beq.w	8008e5c <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	7d5b      	ldrb	r3, [r3, #21]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7ff f92b 	bl	8007f74 <tcp_alloc>
 8008d1e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d111      	bne.n	8008d4a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <tcp_listen_input+0xa8>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	6910      	ldr	r0, [r2, #16]
 8008d36:	f04f 32ff 	mov.w	r2, #4294967295
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	4798      	blx	r3
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73bb      	strb	r3, [r7, #14]
      return;
 8008d42:	e08c      	b.n	8008e5e <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008d44:	23f0      	movs	r3, #240	; 0xf0
 8008d46:	73bb      	strb	r3, [r7, #14]
      return;
 8008d48:	e089      	b.n	8008e5e <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008d4a:	4b50      	ldr	r3, [pc, #320]	; (8008e8c <tcp_listen_input+0x1f0>)
 8008d4c:	695a      	ldr	r2, [r3, #20]
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008d52:	4b4e      	ldr	r3, [pc, #312]	; (8008e8c <tcp_listen_input+0x1f0>)
 8008d54:	691a      	ldr	r2, [r3, #16]
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	8ada      	ldrh	r2, [r3, #22]
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008d62:	4b47      	ldr	r3, [pc, #284]	; (8008e80 <tcp_listen_input+0x1e4>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	881b      	ldrh	r3, [r3, #0]
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2203      	movs	r2, #3
 8008d72:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008d74:	4b41      	ldr	r3, [pc, #260]	; (8008e7c <tcp_listen_input+0x1e0>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	1c5a      	adds	r2, r3, #1
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008d86:	6978      	ldr	r0, [r7, #20]
 8008d88:	f7ff fa5c 	bl	8008244 <tcp_next_iss>
 8008d8c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008da6:	4b35      	ldr	r3, [pc, #212]	; (8008e7c <tcp_listen_input+0x1e0>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	1e5a      	subs	r2, r3, #1
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	691a      	ldr	r2, [r3, #16]
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	7a5b      	ldrb	r3, [r3, #9]
 8008dc2:	f003 030c 	and.w	r3, r3, #12
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	7a1a      	ldrb	r2, [r3, #8]
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008dd4:	4b2e      	ldr	r3, [pc, #184]	; (8008e90 <tcp_listen_input+0x1f4>)
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	60da      	str	r2, [r3, #12]
 8008ddc:	4a2c      	ldr	r2, [pc, #176]	; (8008e90 <tcp_listen_input+0x1f4>)
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	6013      	str	r3, [r2, #0]
 8008de2:	f003 f8e1 	bl	800bfa8 <tcp_timer_needed>
 8008de6:	4b2b      	ldr	r3, [pc, #172]	; (8008e94 <tcp_listen_input+0x1f8>)
 8008de8:	2201      	movs	r2, #1
 8008dea:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008dec:	6978      	ldr	r0, [r7, #20]
 8008dee:	f001 fd8f 	bl	800a910 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008df2:	4b23      	ldr	r3, [pc, #140]	; (8008e80 <tcp_listen_input+0x1e4>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	89db      	ldrh	r3, [r3, #14]
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	3304      	adds	r3, #4
 8008e14:	4618      	mov	r0, r3
 8008e16:	f004 ff93 	bl	800dd40 <ip4_route>
 8008e1a:	4601      	mov	r1, r0
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	3304      	adds	r3, #4
 8008e20:	461a      	mov	r2, r3
 8008e22:	4620      	mov	r0, r4
 8008e24:	f7ff fa34 	bl	8008290 <tcp_eff_send_mss_netif>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008e30:	2112      	movs	r1, #18
 8008e32:	6978      	ldr	r0, [r7, #20]
 8008e34:	f002 f842 	bl	800aebc <tcp_enqueue_flags>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d004      	beq.n	8008e4e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008e44:	2100      	movs	r1, #0
 8008e46:	6978      	ldr	r0, [r7, #20]
 8008e48:	f7fe f986 	bl	8007158 <tcp_abandon>
      return;
 8008e4c:	e007      	b.n	8008e5e <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8008e4e:	6978      	ldr	r0, [r7, #20]
 8008e50:	f002 f922 	bl	800b098 <tcp_output>
  return;
 8008e54:	bf00      	nop
 8008e56:	e001      	b.n	8008e5c <tcp_listen_input+0x1c0>
    return;
 8008e58:	bf00      	nop
 8008e5a:	e000      	b.n	8008e5e <tcp_listen_input+0x1c2>
  return;
 8008e5c:	bf00      	nop
}
 8008e5e:	371c      	adds	r7, #28
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd90      	pop	{r4, r7, pc}
 8008e64:	20000294 	.word	0x20000294
 8008e68:	08011218 	.word	0x08011218
 8008e6c:	08011410 	.word	0x08011410
 8008e70:	08011264 	.word	0x08011264
 8008e74:	2000028c 	.word	0x2000028c
 8008e78:	20000292 	.word	0x20000292
 8008e7c:	20000288 	.word	0x20000288
 8008e80:	20000278 	.word	0x20000278
 8008e84:	20003990 	.word	0x20003990
 8008e88:	20003994 	.word	0x20003994
 8008e8c:	20003980 	.word	0x20003980
 8008e90:	20006ec4 	.word	0x20006ec4
 8008e94:	20006ec0 	.word	0x20006ec0

08008e98 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af04      	add	r7, sp, #16
 8008e9e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008ea0:	4b30      	ldr	r3, [pc, #192]	; (8008f64 <tcp_timewait_input+0xcc>)
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	f003 0304 	and.w	r3, r3, #4
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d154      	bne.n	8008f56 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d106      	bne.n	8008ec0 <tcp_timewait_input+0x28>
 8008eb2:	4b2d      	ldr	r3, [pc, #180]	; (8008f68 <tcp_timewait_input+0xd0>)
 8008eb4:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008eb8:	492c      	ldr	r1, [pc, #176]	; (8008f6c <tcp_timewait_input+0xd4>)
 8008eba:	482d      	ldr	r0, [pc, #180]	; (8008f70 <tcp_timewait_input+0xd8>)
 8008ebc:	f006 f966 	bl	800f18c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008ec0:	4b28      	ldr	r3, [pc, #160]	; (8008f64 <tcp_timewait_input+0xcc>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	f003 0302 	and.w	r3, r3, #2
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d02a      	beq.n	8008f22 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008ecc:	4b29      	ldr	r3, [pc, #164]	; (8008f74 <tcp_timewait_input+0xdc>)
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	db2d      	blt.n	8008f36 <tcp_timewait_input+0x9e>
 8008eda:	4b26      	ldr	r3, [pc, #152]	; (8008f74 <tcp_timewait_input+0xdc>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008ee6:	440b      	add	r3, r1
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	dc23      	bgt.n	8008f36 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008eee:	4b22      	ldr	r3, [pc, #136]	; (8008f78 <tcp_timewait_input+0xe0>)
 8008ef0:	6819      	ldr	r1, [r3, #0]
 8008ef2:	4b22      	ldr	r3, [pc, #136]	; (8008f7c <tcp_timewait_input+0xe4>)
 8008ef4:	881b      	ldrh	r3, [r3, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	4b1e      	ldr	r3, [pc, #120]	; (8008f74 <tcp_timewait_input+0xdc>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008efe:	4b20      	ldr	r3, [pc, #128]	; (8008f80 <tcp_timewait_input+0xe8>)
 8008f00:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f02:	885b      	ldrh	r3, [r3, #2]
 8008f04:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f06:	4a1e      	ldr	r2, [pc, #120]	; (8008f80 <tcp_timewait_input+0xe8>)
 8008f08:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f0a:	8812      	ldrh	r2, [r2, #0]
 8008f0c:	b292      	uxth	r2, r2
 8008f0e:	9202      	str	r2, [sp, #8]
 8008f10:	9301      	str	r3, [sp, #4]
 8008f12:	4b1c      	ldr	r3, [pc, #112]	; (8008f84 <tcp_timewait_input+0xec>)
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	4b1c      	ldr	r3, [pc, #112]	; (8008f88 <tcp_timewait_input+0xf0>)
 8008f18:	4602      	mov	r2, r0
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f002 fe82 	bl	800bc24 <tcp_rst>
      return;
 8008f20:	e01c      	b.n	8008f5c <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8008f22:	4b10      	ldr	r3, [pc, #64]	; (8008f64 <tcp_timewait_input+0xcc>)
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	f003 0301 	and.w	r3, r3, #1
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008f2e:	4b17      	ldr	r3, [pc, #92]	; (8008f8c <tcp_timewait_input+0xf4>)
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008f36:	4b11      	ldr	r3, [pc, #68]	; (8008f7c <tcp_timewait_input+0xe4>)
 8008f38:	881b      	ldrh	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00d      	beq.n	8008f5a <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	8b5b      	ldrh	r3, [r3, #26]
 8008f42:	f043 0302 	orr.w	r3, r3, #2
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f002 f8a3 	bl	800b098 <tcp_output>
  }
  return;
 8008f52:	bf00      	nop
 8008f54:	e001      	b.n	8008f5a <tcp_timewait_input+0xc2>
    return;
 8008f56:	bf00      	nop
 8008f58:	e000      	b.n	8008f5c <tcp_timewait_input+0xc4>
  return;
 8008f5a:	bf00      	nop
}
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20000294 	.word	0x20000294
 8008f68:	08011218 	.word	0x08011218
 8008f6c:	08011430 	.word	0x08011430
 8008f70:	08011264 	.word	0x08011264
 8008f74:	20000288 	.word	0x20000288
 8008f78:	2000028c 	.word	0x2000028c
 8008f7c:	20000292 	.word	0x20000292
 8008f80:	20000278 	.word	0x20000278
 8008f84:	20003990 	.word	0x20003990
 8008f88:	20003994 	.word	0x20003994
 8008f8c:	20006ec8 	.word	0x20006ec8

08008f90 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008f90:	b590      	push	{r4, r7, lr}
 8008f92:	b08d      	sub	sp, #52	; 0x34
 8008f94:	af04      	add	r7, sp, #16
 8008f96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d106      	bne.n	8008fb4 <tcp_process+0x24>
 8008fa6:	4ba5      	ldr	r3, [pc, #660]	; (800923c <tcp_process+0x2ac>)
 8008fa8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008fac:	49a4      	ldr	r1, [pc, #656]	; (8009240 <tcp_process+0x2b0>)
 8008fae:	48a5      	ldr	r0, [pc, #660]	; (8009244 <tcp_process+0x2b4>)
 8008fb0:	f006 f8ec 	bl	800f18c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008fb4:	4ba4      	ldr	r3, [pc, #656]	; (8009248 <tcp_process+0x2b8>)
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	f003 0304 	and.w	r3, r3, #4
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d04e      	beq.n	800905e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	7d1b      	ldrb	r3, [r3, #20]
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d108      	bne.n	8008fda <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fcc:	4b9f      	ldr	r3, [pc, #636]	; (800924c <tcp_process+0x2bc>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d123      	bne.n	800901c <tcp_process+0x8c>
        acceptable = 1;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	76fb      	strb	r3, [r7, #27]
 8008fd8:	e020      	b.n	800901c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fde:	4b9c      	ldr	r3, [pc, #624]	; (8009250 <tcp_process+0x2c0>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d102      	bne.n	8008fec <tcp_process+0x5c>
        acceptable = 1;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	76fb      	strb	r3, [r7, #27]
 8008fea:	e017      	b.n	800901c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008fec:	4b98      	ldr	r3, [pc, #608]	; (8009250 <tcp_process+0x2c0>)
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	db10      	blt.n	800901c <tcp_process+0x8c>
 8008ffa:	4b95      	ldr	r3, [pc, #596]	; (8009250 <tcp_process+0x2c0>)
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009002:	6879      	ldr	r1, [r7, #4]
 8009004:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009006:	440b      	add	r3, r1
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	2b00      	cmp	r3, #0
 800900c:	dc06      	bgt.n	800901c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	8b5b      	ldrh	r3, [r3, #26]
 8009012:	f043 0302 	orr.w	r3, r3, #2
 8009016:	b29a      	uxth	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800901c:	7efb      	ldrb	r3, [r7, #27]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d01b      	beq.n	800905a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	7d1b      	ldrb	r3, [r3, #20]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d106      	bne.n	8009038 <tcp_process+0xa8>
 800902a:	4b84      	ldr	r3, [pc, #528]	; (800923c <tcp_process+0x2ac>)
 800902c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009030:	4988      	ldr	r1, [pc, #544]	; (8009254 <tcp_process+0x2c4>)
 8009032:	4884      	ldr	r0, [pc, #528]	; (8009244 <tcp_process+0x2b4>)
 8009034:	f006 f8aa 	bl	800f18c <iprintf>
      recv_flags |= TF_RESET;
 8009038:	4b87      	ldr	r3, [pc, #540]	; (8009258 <tcp_process+0x2c8>)
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	f043 0308 	orr.w	r3, r3, #8
 8009040:	b2da      	uxtb	r2, r3
 8009042:	4b85      	ldr	r3, [pc, #532]	; (8009258 <tcp_process+0x2c8>)
 8009044:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	8b5b      	ldrh	r3, [r3, #26]
 800904a:	f023 0301 	bic.w	r3, r3, #1
 800904e:	b29a      	uxth	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009054:	f06f 030d 	mvn.w	r3, #13
 8009058:	e37a      	b.n	8009750 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	e378      	b.n	8009750 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800905e:	4b7a      	ldr	r3, [pc, #488]	; (8009248 <tcp_process+0x2b8>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	f003 0302 	and.w	r3, r3, #2
 8009066:	2b00      	cmp	r3, #0
 8009068:	d010      	beq.n	800908c <tcp_process+0xfc>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	7d1b      	ldrb	r3, [r3, #20]
 800906e:	2b02      	cmp	r3, #2
 8009070:	d00c      	beq.n	800908c <tcp_process+0xfc>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	7d1b      	ldrb	r3, [r3, #20]
 8009076:	2b03      	cmp	r3, #3
 8009078:	d008      	beq.n	800908c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	8b5b      	ldrh	r3, [r3, #26]
 800907e:	f043 0302 	orr.w	r3, r3, #2
 8009082:	b29a      	uxth	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	e361      	b.n	8009750 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	8b5b      	ldrh	r3, [r3, #26]
 8009090:	f003 0310 	and.w	r3, r3, #16
 8009094:	2b00      	cmp	r3, #0
 8009096:	d103      	bne.n	80090a0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009098:	4b70      	ldr	r3, [pc, #448]	; (800925c <tcp_process+0x2cc>)
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f001 fc2d 	bl	800a910 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	7d1b      	ldrb	r3, [r3, #20]
 80090ba:	3b02      	subs	r3, #2
 80090bc:	2b07      	cmp	r3, #7
 80090be:	f200 8337 	bhi.w	8009730 <tcp_process+0x7a0>
 80090c2:	a201      	add	r2, pc, #4	; (adr r2, 80090c8 <tcp_process+0x138>)
 80090c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c8:	080090e9 	.word	0x080090e9
 80090cc:	08009319 	.word	0x08009319
 80090d0:	08009491 	.word	0x08009491
 80090d4:	080094bb 	.word	0x080094bb
 80090d8:	080095df 	.word	0x080095df
 80090dc:	08009491 	.word	0x08009491
 80090e0:	0800966b 	.word	0x0800966b
 80090e4:	080096fb 	.word	0x080096fb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80090e8:	4b57      	ldr	r3, [pc, #348]	; (8009248 <tcp_process+0x2b8>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	f003 0310 	and.w	r3, r3, #16
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 80e4 	beq.w	80092be <tcp_process+0x32e>
 80090f6:	4b54      	ldr	r3, [pc, #336]	; (8009248 <tcp_process+0x2b8>)
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	f003 0302 	and.w	r3, r3, #2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f000 80dd 	beq.w	80092be <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	4b50      	ldr	r3, [pc, #320]	; (800924c <tcp_process+0x2bc>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	429a      	cmp	r2, r3
 8009110:	f040 80d5 	bne.w	80092be <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009114:	4b4e      	ldr	r3, [pc, #312]	; (8009250 <tcp_process+0x2c0>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009126:	4b49      	ldr	r3, [pc, #292]	; (800924c <tcp_process+0x2bc>)
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800912e:	4b4c      	ldr	r3, [pc, #304]	; (8009260 <tcp_process+0x2d0>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	89db      	ldrh	r3, [r3, #14]
 8009134:	b29a      	uxth	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009148:	4b41      	ldr	r3, [pc, #260]	; (8009250 <tcp_process+0x2c0>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	1e5a      	subs	r2, r3, #1
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2204      	movs	r2, #4
 8009156:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	3304      	adds	r3, #4
 8009160:	4618      	mov	r0, r3
 8009162:	f004 fded 	bl	800dd40 <ip4_route>
 8009166:	4601      	mov	r1, r0
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	3304      	adds	r3, #4
 800916c:	461a      	mov	r2, r3
 800916e:	4620      	mov	r0, r4
 8009170:	f7ff f88e 	bl	8008290 <tcp_eff_send_mss_netif>
 8009174:	4603      	mov	r3, r0
 8009176:	461a      	mov	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009180:	009a      	lsls	r2, r3, #2
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009186:	005b      	lsls	r3, r3, #1
 8009188:	f241 111c 	movw	r1, #4380	; 0x111c
 800918c:	428b      	cmp	r3, r1
 800918e:	bf38      	it	cc
 8009190:	460b      	movcc	r3, r1
 8009192:	429a      	cmp	r2, r3
 8009194:	d204      	bcs.n	80091a0 <tcp_process+0x210>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	b29b      	uxth	r3, r3
 800919e:	e00d      	b.n	80091bc <tcp_process+0x22c>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80091a4:	005b      	lsls	r3, r3, #1
 80091a6:	f241 121c 	movw	r2, #4380	; 0x111c
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d904      	bls.n	80091b8 <tcp_process+0x228>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80091b2:	005b      	lsls	r3, r3, #1
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	e001      	b.n	80091bc <tcp_process+0x22c>
 80091b8:	f241 131c 	movw	r3, #4380	; 0x111c
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d106      	bne.n	80091da <tcp_process+0x24a>
 80091cc:	4b1b      	ldr	r3, [pc, #108]	; (800923c <tcp_process+0x2ac>)
 80091ce:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80091d2:	4924      	ldr	r1, [pc, #144]	; (8009264 <tcp_process+0x2d4>)
 80091d4:	481b      	ldr	r0, [pc, #108]	; (8009244 <tcp_process+0x2b4>)
 80091d6:	f005 ffd9 	bl	800f18c <iprintf>
        --pcb->snd_queuelen;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80091e0:	3b01      	subs	r3, #1
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ee:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d111      	bne.n	800921a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091fa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d106      	bne.n	8009210 <tcp_process+0x280>
 8009202:	4b0e      	ldr	r3, [pc, #56]	; (800923c <tcp_process+0x2ac>)
 8009204:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009208:	4917      	ldr	r1, [pc, #92]	; (8009268 <tcp_process+0x2d8>)
 800920a:	480e      	ldr	r0, [pc, #56]	; (8009244 <tcp_process+0x2b4>)
 800920c:	f005 ffbe 	bl	800f18c <iprintf>
          pcb->unsent = rseg->next;
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	66da      	str	r2, [r3, #108]	; 0x6c
 8009218:	e003      	b.n	8009222 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009222:	69f8      	ldr	r0, [r7, #28]
 8009224:	f7fe fd3e 	bl	8007ca4 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800922c:	2b00      	cmp	r3, #0
 800922e:	d11d      	bne.n	800926c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009236:	861a      	strh	r2, [r3, #48]	; 0x30
 8009238:	e01f      	b.n	800927a <tcp_process+0x2ea>
 800923a:	bf00      	nop
 800923c:	08011218 	.word	0x08011218
 8009240:	08011450 	.word	0x08011450
 8009244:	08011264 	.word	0x08011264
 8009248:	20000294 	.word	0x20000294
 800924c:	2000028c 	.word	0x2000028c
 8009250:	20000288 	.word	0x20000288
 8009254:	0801146c 	.word	0x0801146c
 8009258:	20000295 	.word	0x20000295
 800925c:	20006ec8 	.word	0x20006ec8
 8009260:	20000278 	.word	0x20000278
 8009264:	0801148c 	.word	0x0801148c
 8009268:	080114a4 	.word	0x080114a4
        } else {
          pcb->rtime = 0;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00a      	beq.n	800929a <tcp_process+0x30a>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	6910      	ldr	r0, [r2, #16]
 800928e:	2200      	movs	r2, #0
 8009290:	6879      	ldr	r1, [r7, #4]
 8009292:	4798      	blx	r3
 8009294:	4603      	mov	r3, r0
 8009296:	76bb      	strb	r3, [r7, #26]
 8009298:	e001      	b.n	800929e <tcp_process+0x30e>
 800929a:	2300      	movs	r3, #0
 800929c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800929e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80092a2:	f113 0f0d 	cmn.w	r3, #13
 80092a6:	d102      	bne.n	80092ae <tcp_process+0x31e>
          return ERR_ABRT;
 80092a8:	f06f 030c 	mvn.w	r3, #12
 80092ac:	e250      	b.n	8009750 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	8b5b      	ldrh	r3, [r3, #26]
 80092b2:	f043 0302 	orr.w	r3, r3, #2
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80092bc:	e23a      	b.n	8009734 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80092be:	4b9d      	ldr	r3, [pc, #628]	; (8009534 <tcp_process+0x5a4>)
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	f003 0310 	and.w	r3, r3, #16
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 8234 	beq.w	8009734 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092cc:	4b9a      	ldr	r3, [pc, #616]	; (8009538 <tcp_process+0x5a8>)
 80092ce:	6819      	ldr	r1, [r3, #0]
 80092d0:	4b9a      	ldr	r3, [pc, #616]	; (800953c <tcp_process+0x5ac>)
 80092d2:	881b      	ldrh	r3, [r3, #0]
 80092d4:	461a      	mov	r2, r3
 80092d6:	4b9a      	ldr	r3, [pc, #616]	; (8009540 <tcp_process+0x5b0>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80092dc:	4b99      	ldr	r3, [pc, #612]	; (8009544 <tcp_process+0x5b4>)
 80092de:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092e0:	885b      	ldrh	r3, [r3, #2]
 80092e2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80092e4:	4a97      	ldr	r2, [pc, #604]	; (8009544 <tcp_process+0x5b4>)
 80092e6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092e8:	8812      	ldrh	r2, [r2, #0]
 80092ea:	b292      	uxth	r2, r2
 80092ec:	9202      	str	r2, [sp, #8]
 80092ee:	9301      	str	r3, [sp, #4]
 80092f0:	4b95      	ldr	r3, [pc, #596]	; (8009548 <tcp_process+0x5b8>)
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	4b95      	ldr	r3, [pc, #596]	; (800954c <tcp_process+0x5bc>)
 80092f6:	4602      	mov	r2, r0
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f002 fc93 	bl	800bc24 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009304:	2b05      	cmp	r3, #5
 8009306:	f200 8215 	bhi.w	8009734 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f002 fa51 	bl	800b7b8 <tcp_rexmit_rto>
      break;
 8009316:	e20d      	b.n	8009734 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009318:	4b86      	ldr	r3, [pc, #536]	; (8009534 <tcp_process+0x5a4>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	f003 0310 	and.w	r3, r3, #16
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 80a1 	beq.w	8009468 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009326:	4b84      	ldr	r3, [pc, #528]	; (8009538 <tcp_process+0x5a8>)
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	3b01      	subs	r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	db7e      	blt.n	8009434 <tcp_process+0x4a4>
 8009336:	4b80      	ldr	r3, [pc, #512]	; (8009538 <tcp_process+0x5a8>)
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	2b00      	cmp	r3, #0
 8009342:	dc77      	bgt.n	8009434 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2204      	movs	r2, #4
 8009348:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800934e:	2b00      	cmp	r3, #0
 8009350:	d102      	bne.n	8009358 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009352:	23fa      	movs	r3, #250	; 0xfa
 8009354:	76bb      	strb	r3, [r7, #26]
 8009356:	e01d      	b.n	8009394 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d106      	bne.n	8009370 <tcp_process+0x3e0>
 8009362:	4b7b      	ldr	r3, [pc, #492]	; (8009550 <tcp_process+0x5c0>)
 8009364:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009368:	497a      	ldr	r1, [pc, #488]	; (8009554 <tcp_process+0x5c4>)
 800936a:	487b      	ldr	r0, [pc, #492]	; (8009558 <tcp_process+0x5c8>)
 800936c:	f005 ff0e 	bl	800f18c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00a      	beq.n	8009390 <tcp_process+0x400>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	6910      	ldr	r0, [r2, #16]
 8009384:	2200      	movs	r2, #0
 8009386:	6879      	ldr	r1, [r7, #4]
 8009388:	4798      	blx	r3
 800938a:	4603      	mov	r3, r0
 800938c:	76bb      	strb	r3, [r7, #26]
 800938e:	e001      	b.n	8009394 <tcp_process+0x404>
 8009390:	23f0      	movs	r3, #240	; 0xf0
 8009392:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009394:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00a      	beq.n	80093b2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800939c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80093a0:	f113 0f0d 	cmn.w	r3, #13
 80093a4:	d002      	beq.n	80093ac <tcp_process+0x41c>
              tcp_abort(pcb);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7fd ff94 	bl	80072d4 <tcp_abort>
            }
            return ERR_ABRT;
 80093ac:	f06f 030c 	mvn.w	r3, #12
 80093b0:	e1ce      	b.n	8009750 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fae0 	bl	8009978 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80093b8:	4b68      	ldr	r3, [pc, #416]	; (800955c <tcp_process+0x5cc>)
 80093ba:	881b      	ldrh	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d005      	beq.n	80093cc <tcp_process+0x43c>
            recv_acked--;
 80093c0:	4b66      	ldr	r3, [pc, #408]	; (800955c <tcp_process+0x5cc>)
 80093c2:	881b      	ldrh	r3, [r3, #0]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	4b64      	ldr	r3, [pc, #400]	; (800955c <tcp_process+0x5cc>)
 80093ca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093d0:	009a      	lsls	r2, r3, #2
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093d6:	005b      	lsls	r3, r3, #1
 80093d8:	f241 111c 	movw	r1, #4380	; 0x111c
 80093dc:	428b      	cmp	r3, r1
 80093de:	bf38      	it	cc
 80093e0:	460b      	movcc	r3, r1
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d204      	bcs.n	80093f0 <tcp_process+0x460>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	e00d      	b.n	800940c <tcp_process+0x47c>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	f241 121c 	movw	r2, #4380	; 0x111c
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d904      	bls.n	8009408 <tcp_process+0x478>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009402:	005b      	lsls	r3, r3, #1
 8009404:	b29b      	uxth	r3, r3
 8009406:	e001      	b.n	800940c <tcp_process+0x47c>
 8009408:	f241 131c 	movw	r3, #4380	; 0x111c
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009412:	4b53      	ldr	r3, [pc, #332]	; (8009560 <tcp_process+0x5d0>)
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	f003 0320 	and.w	r3, r3, #32
 800941a:	2b00      	cmp	r3, #0
 800941c:	d037      	beq.n	800948e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	8b5b      	ldrh	r3, [r3, #26]
 8009422:	f043 0302 	orr.w	r3, r3, #2
 8009426:	b29a      	uxth	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2207      	movs	r2, #7
 8009430:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009432:	e02c      	b.n	800948e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009434:	4b40      	ldr	r3, [pc, #256]	; (8009538 <tcp_process+0x5a8>)
 8009436:	6819      	ldr	r1, [r3, #0]
 8009438:	4b40      	ldr	r3, [pc, #256]	; (800953c <tcp_process+0x5ac>)
 800943a:	881b      	ldrh	r3, [r3, #0]
 800943c:	461a      	mov	r2, r3
 800943e:	4b40      	ldr	r3, [pc, #256]	; (8009540 <tcp_process+0x5b0>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009444:	4b3f      	ldr	r3, [pc, #252]	; (8009544 <tcp_process+0x5b4>)
 8009446:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009448:	885b      	ldrh	r3, [r3, #2]
 800944a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800944c:	4a3d      	ldr	r2, [pc, #244]	; (8009544 <tcp_process+0x5b4>)
 800944e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009450:	8812      	ldrh	r2, [r2, #0]
 8009452:	b292      	uxth	r2, r2
 8009454:	9202      	str	r2, [sp, #8]
 8009456:	9301      	str	r3, [sp, #4]
 8009458:	4b3b      	ldr	r3, [pc, #236]	; (8009548 <tcp_process+0x5b8>)
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	4b3b      	ldr	r3, [pc, #236]	; (800954c <tcp_process+0x5bc>)
 800945e:	4602      	mov	r2, r0
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f002 fbdf 	bl	800bc24 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009466:	e167      	b.n	8009738 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009468:	4b32      	ldr	r3, [pc, #200]	; (8009534 <tcp_process+0x5a4>)
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	f003 0302 	and.w	r3, r3, #2
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 8161 	beq.w	8009738 <tcp_process+0x7a8>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947a:	1e5a      	subs	r2, r3, #1
 800947c:	4b30      	ldr	r3, [pc, #192]	; (8009540 <tcp_process+0x5b0>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	429a      	cmp	r2, r3
 8009482:	f040 8159 	bne.w	8009738 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f002 f9b8 	bl	800b7fc <tcp_rexmit>
      break;
 800948c:	e154      	b.n	8009738 <tcp_process+0x7a8>
 800948e:	e153      	b.n	8009738 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fa71 	bl	8009978 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009496:	4b32      	ldr	r3, [pc, #200]	; (8009560 <tcp_process+0x5d0>)
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	f003 0320 	and.w	r3, r3, #32
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 814c 	beq.w	800973c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	8b5b      	ldrh	r3, [r3, #26]
 80094a8:	f043 0302 	orr.w	r3, r3, #2
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2207      	movs	r2, #7
 80094b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80094b8:	e140      	b.n	800973c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fa5c 	bl	8009978 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80094c0:	4b27      	ldr	r3, [pc, #156]	; (8009560 <tcp_process+0x5d0>)
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	f003 0320 	and.w	r3, r3, #32
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d071      	beq.n	80095b0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80094cc:	4b19      	ldr	r3, [pc, #100]	; (8009534 <tcp_process+0x5a4>)
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	f003 0310 	and.w	r3, r3, #16
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d060      	beq.n	800959a <tcp_process+0x60a>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094dc:	4b16      	ldr	r3, [pc, #88]	; (8009538 <tcp_process+0x5a8>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d15a      	bne.n	800959a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d156      	bne.n	800959a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	8b5b      	ldrh	r3, [r3, #26]
 80094f0:	f043 0302 	orr.w	r3, r3, #2
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7fe fdbe 	bl	800807c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009500:	4b18      	ldr	r3, [pc, #96]	; (8009564 <tcp_process+0x5d4>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	429a      	cmp	r2, r3
 8009508:	d105      	bne.n	8009516 <tcp_process+0x586>
 800950a:	4b16      	ldr	r3, [pc, #88]	; (8009564 <tcp_process+0x5d4>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	4a14      	ldr	r2, [pc, #80]	; (8009564 <tcp_process+0x5d4>)
 8009512:	6013      	str	r3, [r2, #0]
 8009514:	e02e      	b.n	8009574 <tcp_process+0x5e4>
 8009516:	4b13      	ldr	r3, [pc, #76]	; (8009564 <tcp_process+0x5d4>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	617b      	str	r3, [r7, #20]
 800951c:	e027      	b.n	800956e <tcp_process+0x5de>
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	429a      	cmp	r2, r3
 8009526:	d11f      	bne.n	8009568 <tcp_process+0x5d8>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68da      	ldr	r2, [r3, #12]
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	60da      	str	r2, [r3, #12]
 8009530:	e020      	b.n	8009574 <tcp_process+0x5e4>
 8009532:	bf00      	nop
 8009534:	20000294 	.word	0x20000294
 8009538:	2000028c 	.word	0x2000028c
 800953c:	20000292 	.word	0x20000292
 8009540:	20000288 	.word	0x20000288
 8009544:	20000278 	.word	0x20000278
 8009548:	20003990 	.word	0x20003990
 800954c:	20003994 	.word	0x20003994
 8009550:	08011218 	.word	0x08011218
 8009554:	080114b8 	.word	0x080114b8
 8009558:	08011264 	.word	0x08011264
 800955c:	20000290 	.word	0x20000290
 8009560:	20000295 	.word	0x20000295
 8009564:	20006ec4 	.word	0x20006ec4
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	617b      	str	r3, [r7, #20]
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1d4      	bne.n	800951e <tcp_process+0x58e>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	60da      	str	r2, [r3, #12]
 800957a:	4b77      	ldr	r3, [pc, #476]	; (8009758 <tcp_process+0x7c8>)
 800957c:	2201      	movs	r2, #1
 800957e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	220a      	movs	r2, #10
 8009584:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009586:	4b75      	ldr	r3, [pc, #468]	; (800975c <tcp_process+0x7cc>)
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	60da      	str	r2, [r3, #12]
 800958e:	4a73      	ldr	r2, [pc, #460]	; (800975c <tcp_process+0x7cc>)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6013      	str	r3, [r2, #0]
 8009594:	f002 fd08 	bl	800bfa8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009598:	e0d2      	b.n	8009740 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	8b5b      	ldrh	r3, [r3, #26]
 800959e:	f043 0302 	orr.w	r3, r3, #2
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2208      	movs	r2, #8
 80095ac:	751a      	strb	r2, [r3, #20]
      break;
 80095ae:	e0c7      	b.n	8009740 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80095b0:	4b6b      	ldr	r3, [pc, #428]	; (8009760 <tcp_process+0x7d0>)
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	f003 0310 	and.w	r3, r3, #16
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f000 80c1 	beq.w	8009740 <tcp_process+0x7b0>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095c2:	4b68      	ldr	r3, [pc, #416]	; (8009764 <tcp_process+0x7d4>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	f040 80ba 	bne.w	8009740 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f040 80b5 	bne.w	8009740 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2206      	movs	r2, #6
 80095da:	751a      	strb	r2, [r3, #20]
      break;
 80095dc:	e0b0      	b.n	8009740 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f9ca 	bl	8009978 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80095e4:	4b60      	ldr	r3, [pc, #384]	; (8009768 <tcp_process+0x7d8>)
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	f003 0320 	and.w	r3, r3, #32
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f000 80a9 	beq.w	8009744 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	8b5b      	ldrh	r3, [r3, #26]
 80095f6:	f043 0302 	orr.w	r3, r3, #2
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7fe fd3b 	bl	800807c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009606:	4b59      	ldr	r3, [pc, #356]	; (800976c <tcp_process+0x7dc>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	429a      	cmp	r2, r3
 800960e:	d105      	bne.n	800961c <tcp_process+0x68c>
 8009610:	4b56      	ldr	r3, [pc, #344]	; (800976c <tcp_process+0x7dc>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	4a55      	ldr	r2, [pc, #340]	; (800976c <tcp_process+0x7dc>)
 8009618:	6013      	str	r3, [r2, #0]
 800961a:	e013      	b.n	8009644 <tcp_process+0x6b4>
 800961c:	4b53      	ldr	r3, [pc, #332]	; (800976c <tcp_process+0x7dc>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	613b      	str	r3, [r7, #16]
 8009622:	e00c      	b.n	800963e <tcp_process+0x6ae>
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	429a      	cmp	r2, r3
 800962c:	d104      	bne.n	8009638 <tcp_process+0x6a8>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	68da      	ldr	r2, [r3, #12]
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	60da      	str	r2, [r3, #12]
 8009636:	e005      	b.n	8009644 <tcp_process+0x6b4>
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	613b      	str	r3, [r7, #16]
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1ef      	bne.n	8009624 <tcp_process+0x694>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	60da      	str	r2, [r3, #12]
 800964a:	4b43      	ldr	r3, [pc, #268]	; (8009758 <tcp_process+0x7c8>)
 800964c:	2201      	movs	r2, #1
 800964e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	220a      	movs	r2, #10
 8009654:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009656:	4b41      	ldr	r3, [pc, #260]	; (800975c <tcp_process+0x7cc>)
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	60da      	str	r2, [r3, #12]
 800965e:	4a3f      	ldr	r2, [pc, #252]	; (800975c <tcp_process+0x7cc>)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6013      	str	r3, [r2, #0]
 8009664:	f002 fca0 	bl	800bfa8 <tcp_timer_needed>
      }
      break;
 8009668:	e06c      	b.n	8009744 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f984 	bl	8009978 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009670:	4b3b      	ldr	r3, [pc, #236]	; (8009760 <tcp_process+0x7d0>)
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	f003 0310 	and.w	r3, r3, #16
 8009678:	2b00      	cmp	r3, #0
 800967a:	d065      	beq.n	8009748 <tcp_process+0x7b8>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009680:	4b38      	ldr	r3, [pc, #224]	; (8009764 <tcp_process+0x7d4>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	429a      	cmp	r2, r3
 8009686:	d15f      	bne.n	8009748 <tcp_process+0x7b8>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800968c:	2b00      	cmp	r3, #0
 800968e:	d15b      	bne.n	8009748 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7fe fcf3 	bl	800807c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009696:	4b35      	ldr	r3, [pc, #212]	; (800976c <tcp_process+0x7dc>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	429a      	cmp	r2, r3
 800969e:	d105      	bne.n	80096ac <tcp_process+0x71c>
 80096a0:	4b32      	ldr	r3, [pc, #200]	; (800976c <tcp_process+0x7dc>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	4a31      	ldr	r2, [pc, #196]	; (800976c <tcp_process+0x7dc>)
 80096a8:	6013      	str	r3, [r2, #0]
 80096aa:	e013      	b.n	80096d4 <tcp_process+0x744>
 80096ac:	4b2f      	ldr	r3, [pc, #188]	; (800976c <tcp_process+0x7dc>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	60fb      	str	r3, [r7, #12]
 80096b2:	e00c      	b.n	80096ce <tcp_process+0x73e>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d104      	bne.n	80096c8 <tcp_process+0x738>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68da      	ldr	r2, [r3, #12]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	60da      	str	r2, [r3, #12]
 80096c6:	e005      	b.n	80096d4 <tcp_process+0x744>
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	60fb      	str	r3, [r7, #12]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1ef      	bne.n	80096b4 <tcp_process+0x724>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	60da      	str	r2, [r3, #12]
 80096da:	4b1f      	ldr	r3, [pc, #124]	; (8009758 <tcp_process+0x7c8>)
 80096dc:	2201      	movs	r2, #1
 80096de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	220a      	movs	r2, #10
 80096e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80096e6:	4b1d      	ldr	r3, [pc, #116]	; (800975c <tcp_process+0x7cc>)
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	60da      	str	r2, [r3, #12]
 80096ee:	4a1b      	ldr	r2, [pc, #108]	; (800975c <tcp_process+0x7cc>)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	f002 fc58 	bl	800bfa8 <tcp_timer_needed>
      }
      break;
 80096f8:	e026      	b.n	8009748 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f93c 	bl	8009978 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009700:	4b17      	ldr	r3, [pc, #92]	; (8009760 <tcp_process+0x7d0>)
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	f003 0310 	and.w	r3, r3, #16
 8009708:	2b00      	cmp	r3, #0
 800970a:	d01f      	beq.n	800974c <tcp_process+0x7bc>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009710:	4b14      	ldr	r3, [pc, #80]	; (8009764 <tcp_process+0x7d4>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	429a      	cmp	r2, r3
 8009716:	d119      	bne.n	800974c <tcp_process+0x7bc>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800971c:	2b00      	cmp	r3, #0
 800971e:	d115      	bne.n	800974c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009720:	4b11      	ldr	r3, [pc, #68]	; (8009768 <tcp_process+0x7d8>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	f043 0310 	orr.w	r3, r3, #16
 8009728:	b2da      	uxtb	r2, r3
 800972a:	4b0f      	ldr	r3, [pc, #60]	; (8009768 <tcp_process+0x7d8>)
 800972c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800972e:	e00d      	b.n	800974c <tcp_process+0x7bc>
    default:
      break;
 8009730:	bf00      	nop
 8009732:	e00c      	b.n	800974e <tcp_process+0x7be>
      break;
 8009734:	bf00      	nop
 8009736:	e00a      	b.n	800974e <tcp_process+0x7be>
      break;
 8009738:	bf00      	nop
 800973a:	e008      	b.n	800974e <tcp_process+0x7be>
      break;
 800973c:	bf00      	nop
 800973e:	e006      	b.n	800974e <tcp_process+0x7be>
      break;
 8009740:	bf00      	nop
 8009742:	e004      	b.n	800974e <tcp_process+0x7be>
      break;
 8009744:	bf00      	nop
 8009746:	e002      	b.n	800974e <tcp_process+0x7be>
      break;
 8009748:	bf00      	nop
 800974a:	e000      	b.n	800974e <tcp_process+0x7be>
      break;
 800974c:	bf00      	nop
  }
  return ERR_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3724      	adds	r7, #36	; 0x24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd90      	pop	{r4, r7, pc}
 8009758:	20006ec0 	.word	0x20006ec0
 800975c:	20006ed4 	.word	0x20006ed4
 8009760:	20000294 	.word	0x20000294
 8009764:	2000028c 	.word	0x2000028c
 8009768:	20000295 	.word	0x20000295
 800976c:	20006ec4 	.word	0x20006ec4

08009770 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009770:	b590      	push	{r4, r7, lr}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d106      	bne.n	800978e <tcp_oos_insert_segment+0x1e>
 8009780:	4b3b      	ldr	r3, [pc, #236]	; (8009870 <tcp_oos_insert_segment+0x100>)
 8009782:	f240 421f 	movw	r2, #1055	; 0x41f
 8009786:	493b      	ldr	r1, [pc, #236]	; (8009874 <tcp_oos_insert_segment+0x104>)
 8009788:	483b      	ldr	r0, [pc, #236]	; (8009878 <tcp_oos_insert_segment+0x108>)
 800978a:	f005 fcff 	bl	800f18c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	899b      	ldrh	r3, [r3, #12]
 8009794:	b29b      	uxth	r3, r3
 8009796:	4618      	mov	r0, r3
 8009798:	f7fb fcdf 	bl	800515a <lwip_htons>
 800979c:	4603      	mov	r3, r0
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d028      	beq.n	80097fa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80097a8:	6838      	ldr	r0, [r7, #0]
 80097aa:	f7fe fa67 	bl	8007c7c <tcp_segs_free>
    next = NULL;
 80097ae:	2300      	movs	r3, #0
 80097b0:	603b      	str	r3, [r7, #0]
 80097b2:	e056      	b.n	8009862 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	899b      	ldrh	r3, [r3, #12]
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	4618      	mov	r0, r3
 80097be:	f7fb fccc 	bl	800515a <lwip_htons>
 80097c2:	4603      	mov	r3, r0
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00d      	beq.n	80097ea <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	899b      	ldrh	r3, [r3, #12]
 80097d4:	b29c      	uxth	r4, r3
 80097d6:	2001      	movs	r0, #1
 80097d8:	f7fb fcbf 	bl	800515a <lwip_htons>
 80097dc:	4603      	mov	r3, r0
 80097de:	461a      	mov	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	4322      	orrs	r2, r4
 80097e6:	b292      	uxth	r2, r2
 80097e8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f7fe fa55 	bl	8007ca4 <tcp_seg_free>
    while (next &&
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00e      	beq.n	800981e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	891b      	ldrh	r3, [r3, #8]
 8009804:	461a      	mov	r2, r3
 8009806:	4b1d      	ldr	r3, [pc, #116]	; (800987c <tcp_oos_insert_segment+0x10c>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	441a      	add	r2, r3
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	8909      	ldrh	r1, [r1, #8]
 8009816:	440b      	add	r3, r1
 8009818:	1ad3      	subs	r3, r2, r3
    while (next &&
 800981a:	2b00      	cmp	r3, #0
 800981c:	daca      	bge.n	80097b4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d01e      	beq.n	8009862 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	891b      	ldrh	r3, [r3, #8]
 8009828:	461a      	mov	r2, r3
 800982a:	4b14      	ldr	r3, [pc, #80]	; (800987c <tcp_oos_insert_segment+0x10c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	441a      	add	r2, r3
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009838:	2b00      	cmp	r3, #0
 800983a:	dd12      	ble.n	8009862 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	b29a      	uxth	r2, r3
 8009844:	4b0d      	ldr	r3, [pc, #52]	; (800987c <tcp_oos_insert_segment+0x10c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	b29b      	uxth	r3, r3
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	b29a      	uxth	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685a      	ldr	r2, [r3, #4]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	891b      	ldrh	r3, [r3, #8]
 800985a:	4619      	mov	r1, r3
 800985c:	4610      	mov	r0, r2
 800985e:	f7fc fd91 	bl	8006384 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	601a      	str	r2, [r3, #0]
}
 8009868:	bf00      	nop
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	bd90      	pop	{r4, r7, pc}
 8009870:	08011218 	.word	0x08011218
 8009874:	080114d8 	.word	0x080114d8
 8009878:	08011264 	.word	0x08011264
 800987c:	20000288 	.word	0x20000288

08009880 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009880:	b5b0      	push	{r4, r5, r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
 800988c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800988e:	e03e      	b.n	800990e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fc ff7e 	bl	80067a0 <pbuf_clen>
 80098a4:	4603      	mov	r3, r0
 80098a6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80098ae:	8a7a      	ldrh	r2, [r7, #18]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d906      	bls.n	80098c2 <tcp_free_acked_segments+0x42>
 80098b4:	4b2a      	ldr	r3, [pc, #168]	; (8009960 <tcp_free_acked_segments+0xe0>)
 80098b6:	f240 4257 	movw	r2, #1111	; 0x457
 80098ba:	492a      	ldr	r1, [pc, #168]	; (8009964 <tcp_free_acked_segments+0xe4>)
 80098bc:	482a      	ldr	r0, [pc, #168]	; (8009968 <tcp_free_acked_segments+0xe8>)
 80098be:	f005 fc65 	bl	800f18c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80098c8:	8a7b      	ldrh	r3, [r7, #18]
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	891a      	ldrh	r2, [r3, #8]
 80098d8:	4b24      	ldr	r3, [pc, #144]	; (800996c <tcp_free_acked_segments+0xec>)
 80098da:	881b      	ldrh	r3, [r3, #0]
 80098dc:	4413      	add	r3, r2
 80098de:	b29a      	uxth	r2, r3
 80098e0:	4b22      	ldr	r3, [pc, #136]	; (800996c <tcp_free_acked_segments+0xec>)
 80098e2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80098e4:	6978      	ldr	r0, [r7, #20]
 80098e6:	f7fe f9dd 	bl	8007ca4 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00c      	beq.n	800990e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d109      	bne.n	800990e <tcp_free_acked_segments+0x8e>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d106      	bne.n	800990e <tcp_free_acked_segments+0x8e>
 8009900:	4b17      	ldr	r3, [pc, #92]	; (8009960 <tcp_free_acked_segments+0xe0>)
 8009902:	f240 4262 	movw	r2, #1122	; 0x462
 8009906:	491a      	ldr	r1, [pc, #104]	; (8009970 <tcp_free_acked_segments+0xf0>)
 8009908:	4817      	ldr	r0, [pc, #92]	; (8009968 <tcp_free_acked_segments+0xe8>)
 800990a:	f005 fc3f 	bl	800f18c <iprintf>
  while (seg_list != NULL &&
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d020      	beq.n	8009956 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	4618      	mov	r0, r3
 800991c:	f7fb fc32 	bl	8005184 <lwip_htonl>
 8009920:	4604      	mov	r4, r0
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	891b      	ldrh	r3, [r3, #8]
 8009926:	461d      	mov	r5, r3
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	899b      	ldrh	r3, [r3, #12]
 800992e:	b29b      	uxth	r3, r3
 8009930:	4618      	mov	r0, r3
 8009932:	f7fb fc12 	bl	800515a <lwip_htons>
 8009936:	4603      	mov	r3, r0
 8009938:	b2db      	uxtb	r3, r3
 800993a:	f003 0303 	and.w	r3, r3, #3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <tcp_free_acked_segments+0xc6>
 8009942:	2301      	movs	r3, #1
 8009944:	e000      	b.n	8009948 <tcp_free_acked_segments+0xc8>
 8009946:	2300      	movs	r3, #0
 8009948:	442b      	add	r3, r5
 800994a:	18e2      	adds	r2, r4, r3
 800994c:	4b09      	ldr	r3, [pc, #36]	; (8009974 <tcp_free_acked_segments+0xf4>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009952:	2b00      	cmp	r3, #0
 8009954:	dd9c      	ble.n	8009890 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009956:	68bb      	ldr	r3, [r7, #8]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3718      	adds	r7, #24
 800995c:	46bd      	mov	sp, r7
 800995e:	bdb0      	pop	{r4, r5, r7, pc}
 8009960:	08011218 	.word	0x08011218
 8009964:	08011500 	.word	0x08011500
 8009968:	08011264 	.word	0x08011264
 800996c:	20000290 	.word	0x20000290
 8009970:	08011528 	.word	0x08011528
 8009974:	2000028c 	.word	0x2000028c

08009978 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009978:	b5b0      	push	{r4, r5, r7, lr}
 800997a:	b094      	sub	sp, #80	; 0x50
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009980:	2300      	movs	r3, #0
 8009982:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d106      	bne.n	8009998 <tcp_receive+0x20>
 800998a:	4ba6      	ldr	r3, [pc, #664]	; (8009c24 <tcp_receive+0x2ac>)
 800998c:	f240 427b 	movw	r2, #1147	; 0x47b
 8009990:	49a5      	ldr	r1, [pc, #660]	; (8009c28 <tcp_receive+0x2b0>)
 8009992:	48a6      	ldr	r0, [pc, #664]	; (8009c2c <tcp_receive+0x2b4>)
 8009994:	f005 fbfa 	bl	800f18c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	7d1b      	ldrb	r3, [r3, #20]
 800999c:	2b03      	cmp	r3, #3
 800999e:	d806      	bhi.n	80099ae <tcp_receive+0x36>
 80099a0:	4ba0      	ldr	r3, [pc, #640]	; (8009c24 <tcp_receive+0x2ac>)
 80099a2:	f240 427c 	movw	r2, #1148	; 0x47c
 80099a6:	49a2      	ldr	r1, [pc, #648]	; (8009c30 <tcp_receive+0x2b8>)
 80099a8:	48a0      	ldr	r0, [pc, #640]	; (8009c2c <tcp_receive+0x2b4>)
 80099aa:	f005 fbef 	bl	800f18c <iprintf>

  if (flags & TCP_ACK) {
 80099ae:	4ba1      	ldr	r3, [pc, #644]	; (8009c34 <tcp_receive+0x2bc>)
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	f003 0310 	and.w	r3, r3, #16
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f000 8263 	beq.w	8009e82 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80099c2:	461a      	mov	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099c8:	4413      	add	r3, r2
 80099ca:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099d0:	4b99      	ldr	r3, [pc, #612]	; (8009c38 <tcp_receive+0x2c0>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	1ad3      	subs	r3, r2, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	db1b      	blt.n	8009a12 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099de:	4b96      	ldr	r3, [pc, #600]	; (8009c38 <tcp_receive+0x2c0>)
 80099e0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d106      	bne.n	80099f4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80099ea:	4b94      	ldr	r3, [pc, #592]	; (8009c3c <tcp_receive+0x2c4>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	db0e      	blt.n	8009a12 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80099f8:	4b90      	ldr	r3, [pc, #576]	; (8009c3c <tcp_receive+0x2c4>)
 80099fa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d125      	bne.n	8009a4c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009a00:	4b8f      	ldr	r3, [pc, #572]	; (8009c40 <tcp_receive+0x2c8>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	89db      	ldrh	r3, [r3, #14]
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d91c      	bls.n	8009a4c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009a12:	4b8b      	ldr	r3, [pc, #556]	; (8009c40 <tcp_receive+0x2c8>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	89db      	ldrh	r3, [r3, #14]
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d205      	bcs.n	8009a3c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009a3c:	4b7e      	ldr	r3, [pc, #504]	; (8009c38 <tcp_receive+0x2c0>)
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009a44:	4b7d      	ldr	r3, [pc, #500]	; (8009c3c <tcp_receive+0x2c4>)
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009a4c:	4b7b      	ldr	r3, [pc, #492]	; (8009c3c <tcp_receive+0x2c4>)
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	dc58      	bgt.n	8009b0c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009a5a:	4b7a      	ldr	r3, [pc, #488]	; (8009c44 <tcp_receive+0x2cc>)
 8009a5c:	881b      	ldrh	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d14b      	bne.n	8009afa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009a6c:	4413      	add	r3, r2
 8009a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d142      	bne.n	8009afa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	db3d      	blt.n	8009afa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a82:	4b6e      	ldr	r3, [pc, #440]	; (8009c3c <tcp_receive+0x2c4>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d137      	bne.n	8009afa <tcp_receive+0x182>
              found_dupack = 1;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a94:	2bff      	cmp	r3, #255	; 0xff
 8009a96:	d007      	beq.n	8009aa8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009aae:	2b03      	cmp	r3, #3
 8009ab0:	d91b      	bls.n	8009aea <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009abc:	4413      	add	r3, r2
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d30a      	bcc.n	8009ae0 <tcp_receive+0x168>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ad4:	4413      	add	r3, r2
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009ade:	e004      	b.n	8009aea <tcp_receive+0x172>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ae6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d902      	bls.n	8009afa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f001 feed 	bl	800b8d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f040 8160 	bne.w	8009dc2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b0a:	e15a      	b.n	8009dc2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009b0c:	4b4b      	ldr	r3, [pc, #300]	; (8009c3c <tcp_receive+0x2c4>)
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	3b01      	subs	r3, #1
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f2c0 814d 	blt.w	8009db8 <tcp_receive+0x440>
 8009b1e:	4b47      	ldr	r3, [pc, #284]	; (8009c3c <tcp_receive+0x2c4>)
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f300 8145 	bgt.w	8009db8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	8b5b      	ldrh	r3, [r3, #26]
 8009b32:	f003 0304 	and.w	r3, r3, #4
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d010      	beq.n	8009b5c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	8b5b      	ldrh	r3, [r3, #26]
 8009b3e:	f023 0304 	bic.w	r3, r3, #4
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009b6a:	10db      	asrs	r3, r3, #3
 8009b6c:	b21b      	sxth	r3, r3
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	4413      	add	r3, r2
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	b21a      	sxth	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009b84:	4b2d      	ldr	r3, [pc, #180]	; (8009c3c <tcp_receive+0x2c4>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009b9c:	4b27      	ldr	r3, [pc, #156]	; (8009c3c <tcp_receive+0x2c4>)
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	7d1b      	ldrb	r3, [r3, #20]
 8009ba8:	2b03      	cmp	r3, #3
 8009baa:	f240 8096 	bls.w	8009cda <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d244      	bcs.n	8009c48 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	8b5b      	ldrh	r3, [r3, #26]
 8009bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <tcp_receive+0x256>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e000      	b.n	8009bd0 <tcp_receive+0x258>
 8009bce:	2302      	movs	r3, #2
 8009bd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009bd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009bde:	fb12 f303 	smulbb	r3, r2, r3
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009be6:	4293      	cmp	r3, r2
 8009be8:	bf28      	it	cs
 8009bea:	4613      	movcs	r3, r2
 8009bec:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009bf4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009bf6:	4413      	add	r3, r2
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d309      	bcc.n	8009c18 <tcp_receive+0x2a0>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009c0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009c0c:	4413      	add	r3, r2
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009c16:	e060      	b.n	8009cda <tcp_receive+0x362>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009c22:	e05a      	b.n	8009cda <tcp_receive+0x362>
 8009c24:	08011218 	.word	0x08011218
 8009c28:	08011548 	.word	0x08011548
 8009c2c:	08011264 	.word	0x08011264
 8009c30:	08011564 	.word	0x08011564
 8009c34:	20000294 	.word	0x20000294
 8009c38:	20000288 	.word	0x20000288
 8009c3c:	2000028c 	.word	0x2000028c
 8009c40:	20000278 	.word	0x20000278
 8009c44:	20000292 	.word	0x20000292
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009c4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009c50:	4413      	add	r3, r2
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d309      	bcc.n	8009c72 <tcp_receive+0x2fa>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009c64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009c66:	4413      	add	r3, r2
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009c70:	e004      	b.n	8009c7c <tcp_receive+0x304>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d326      	bcc.n	8009cda <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009cac:	4413      	add	r3, r2
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d30a      	bcc.n	8009cd0 <tcp_receive+0x358>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009cc4:	4413      	add	r3, r2
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009cce:	e004      	b.n	8009cda <tcp_receive+0x362>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ce2:	4a98      	ldr	r2, [pc, #608]	; (8009f44 <tcp_receive+0x5cc>)
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7ff fdcb 	bl	8009880 <tcp_free_acked_segments>
 8009cea:	4602      	mov	r2, r0
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf8:	4a93      	ldr	r2, [pc, #588]	; (8009f48 <tcp_receive+0x5d0>)
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f7ff fdc0 	bl	8009880 <tcp_free_acked_segments>
 8009d00:	4602      	mov	r2, r0
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d104      	bne.n	8009d18 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d14:	861a      	strh	r2, [r3, #48]	; 0x30
 8009d16:	e002      	b.n	8009d1e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d103      	bne.n	8009d34 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009d3a:	4b84      	ldr	r3, [pc, #528]	; (8009f4c <tcp_receive+0x5d4>)
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	4413      	add	r3, r2
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	8b5b      	ldrh	r3, [r3, #26]
 8009d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d035      	beq.n	8009dc0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d118      	bne.n	8009d8e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00c      	beq.n	8009d7e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7fb fa07 	bl	8005184 <lwip_htonl>
 8009d76:	4603      	mov	r3, r0
 8009d78:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	dc20      	bgt.n	8009dc0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	8b5b      	ldrh	r3, [r3, #26]
 8009d82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009d8c:	e018      	b.n	8009dc0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fb f9f2 	bl	8005184 <lwip_htonl>
 8009da0:	4603      	mov	r3, r0
 8009da2:	1ae3      	subs	r3, r4, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	dc0b      	bgt.n	8009dc0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	8b5b      	ldrh	r3, [r3, #26]
 8009dac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009db6:	e003      	b.n	8009dc0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f001 ff85 	bl	800bcc8 <tcp_send_empty_ack>
 8009dbe:	e000      	b.n	8009dc2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009dc0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d05b      	beq.n	8009e82 <tcp_receive+0x50a>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dce:	4b60      	ldr	r3, [pc, #384]	; (8009f50 <tcp_receive+0x5d8>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	da54      	bge.n	8009e82 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009dd8:	4b5e      	ldr	r3, [pc, #376]	; (8009f54 <tcp_receive+0x5dc>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009dec:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009df6:	10db      	asrs	r3, r3, #3
 8009df8:	b21b      	sxth	r3, r3
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009e10:	4413      	add	r3, r2
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	b21a      	sxth	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009e1a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	da05      	bge.n	8009e2e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8009e22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009e26:	425b      	negs	r3, r3
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009e2e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009e38:	109b      	asrs	r3, r3, #2
 8009e3a:	b21b      	sxth	r3, r3
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009e52:	4413      	add	r3, r2
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	b21a      	sxth	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009e62:	10db      	asrs	r3, r3, #3
 8009e64:	b21b      	sxth	r3, r3
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	4413      	add	r3, r2
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	b21a      	sxth	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009e82:	4b35      	ldr	r3, [pc, #212]	; (8009f58 <tcp_receive+0x5e0>)
 8009e84:	881b      	ldrh	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 84e1 	beq.w	800a84e <tcp_receive+0xed6>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	7d1b      	ldrb	r3, [r3, #20]
 8009e90:	2b06      	cmp	r3, #6
 8009e92:	f200 84dc 	bhi.w	800a84e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e9a:	4b30      	ldr	r3, [pc, #192]	; (8009f5c <tcp_receive+0x5e4>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f2c0 808e 	blt.w	8009fc4 <tcp_receive+0x64c>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009eac:	4b2a      	ldr	r3, [pc, #168]	; (8009f58 <tcp_receive+0x5e0>)
 8009eae:	881b      	ldrh	r3, [r3, #0]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	4b2a      	ldr	r3, [pc, #168]	; (8009f5c <tcp_receive+0x5e4>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	440b      	add	r3, r1
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	3301      	adds	r3, #1
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f300 8081 	bgt.w	8009fc4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009ec2:	4b27      	ldr	r3, [pc, #156]	; (8009f60 <tcp_receive+0x5e8>)
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ecc:	4b23      	ldr	r3, [pc, #140]	; (8009f5c <tcp_receive+0x5e4>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009ed4:	4b22      	ldr	r3, [pc, #136]	; (8009f60 <tcp_receive+0x5e8>)
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d106      	bne.n	8009eea <tcp_receive+0x572>
 8009edc:	4b21      	ldr	r3, [pc, #132]	; (8009f64 <tcp_receive+0x5ec>)
 8009ede:	f240 5294 	movw	r2, #1428	; 0x594
 8009ee2:	4921      	ldr	r1, [pc, #132]	; (8009f68 <tcp_receive+0x5f0>)
 8009ee4:	4821      	ldr	r0, [pc, #132]	; (8009f6c <tcp_receive+0x5f4>)
 8009ee6:	f005 f951 	bl	800f18c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d906      	bls.n	8009f02 <tcp_receive+0x58a>
 8009ef4:	4b1b      	ldr	r3, [pc, #108]	; (8009f64 <tcp_receive+0x5ec>)
 8009ef6:	f240 5295 	movw	r2, #1429	; 0x595
 8009efa:	491d      	ldr	r1, [pc, #116]	; (8009f70 <tcp_receive+0x5f8>)
 8009efc:	481b      	ldr	r0, [pc, #108]	; (8009f6c <tcp_receive+0x5f4>)
 8009efe:	f005 f945 	bl	800f18c <iprintf>
      off = (u16_t)off32;
 8009f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009f08:	4b15      	ldr	r3, [pc, #84]	; (8009f60 <tcp_receive+0x5e8>)
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	891b      	ldrh	r3, [r3, #8]
 8009f0e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d906      	bls.n	8009f24 <tcp_receive+0x5ac>
 8009f16:	4b13      	ldr	r3, [pc, #76]	; (8009f64 <tcp_receive+0x5ec>)
 8009f18:	f240 5297 	movw	r2, #1431	; 0x597
 8009f1c:	4915      	ldr	r1, [pc, #84]	; (8009f74 <tcp_receive+0x5fc>)
 8009f1e:	4813      	ldr	r0, [pc, #76]	; (8009f6c <tcp_receive+0x5f4>)
 8009f20:	f005 f934 	bl	800f18c <iprintf>
      inseg.len -= off;
 8009f24:	4b0e      	ldr	r3, [pc, #56]	; (8009f60 <tcp_receive+0x5e8>)
 8009f26:	891a      	ldrh	r2, [r3, #8]
 8009f28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009f2c:	1ad3      	subs	r3, r2, r3
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	4b0b      	ldr	r3, [pc, #44]	; (8009f60 <tcp_receive+0x5e8>)
 8009f32:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009f34:	4b0a      	ldr	r3, [pc, #40]	; (8009f60 <tcp_receive+0x5e8>)
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	891a      	ldrh	r2, [r3, #8]
 8009f3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009f42:	e029      	b.n	8009f98 <tcp_receive+0x620>
 8009f44:	08011580 	.word	0x08011580
 8009f48:	08011588 	.word	0x08011588
 8009f4c:	20000290 	.word	0x20000290
 8009f50:	2000028c 	.word	0x2000028c
 8009f54:	20006ec8 	.word	0x20006ec8
 8009f58:	20000292 	.word	0x20000292
 8009f5c:	20000288 	.word	0x20000288
 8009f60:	20000268 	.word	0x20000268
 8009f64:	08011218 	.word	0x08011218
 8009f68:	08011590 	.word	0x08011590
 8009f6c:	08011264 	.word	0x08011264
 8009f70:	080115a0 	.word	0x080115a0
 8009f74:	080115b0 	.word	0x080115b0
        off -= p->len;
 8009f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f7a:	895b      	ldrh	r3, [r3, #10]
 8009f7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009f8a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f8e:	2200      	movs	r2, #0
 8009f90:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f9a:	895b      	ldrh	r3, [r3, #10]
 8009f9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d8e9      	bhi.n	8009f78 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009fa4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009fa8:	4619      	mov	r1, r3
 8009faa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009fac:	f7fc faea 	bl	8006584 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb4:	4a91      	ldr	r2, [pc, #580]	; (800a1fc <tcp_receive+0x884>)
 8009fb6:	6013      	str	r3, [r2, #0]
 8009fb8:	4b91      	ldr	r3, [pc, #580]	; (800a200 <tcp_receive+0x888>)
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	4a8f      	ldr	r2, [pc, #572]	; (800a1fc <tcp_receive+0x884>)
 8009fbe:	6812      	ldr	r2, [r2, #0]
 8009fc0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009fc2:	e00d      	b.n	8009fe0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009fc4:	4b8d      	ldr	r3, [pc, #564]	; (800a1fc <tcp_receive+0x884>)
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fcc:	1ad3      	subs	r3, r2, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	da06      	bge.n	8009fe0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	8b5b      	ldrh	r3, [r3, #26]
 8009fd6:	f043 0302 	orr.w	r3, r3, #2
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009fe0:	4b86      	ldr	r3, [pc, #536]	; (800a1fc <tcp_receive+0x884>)
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f2c0 842a 	blt.w	800a844 <tcp_receive+0xecc>
 8009ff0:	4b82      	ldr	r3, [pc, #520]	; (800a1fc <tcp_receive+0x884>)
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff8:	6879      	ldr	r1, [r7, #4]
 8009ffa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009ffc:	440b      	add	r3, r1
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	3301      	adds	r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	f300 841e 	bgt.w	800a844 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a00c:	4b7b      	ldr	r3, [pc, #492]	; (800a1fc <tcp_receive+0x884>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	429a      	cmp	r2, r3
 800a012:	f040 829a 	bne.w	800a54a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a016:	4b7a      	ldr	r3, [pc, #488]	; (800a200 <tcp_receive+0x888>)
 800a018:	891c      	ldrh	r4, [r3, #8]
 800a01a:	4b79      	ldr	r3, [pc, #484]	; (800a200 <tcp_receive+0x888>)
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	899b      	ldrh	r3, [r3, #12]
 800a020:	b29b      	uxth	r3, r3
 800a022:	4618      	mov	r0, r3
 800a024:	f7fb f899 	bl	800515a <lwip_htons>
 800a028:	4603      	mov	r3, r0
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	f003 0303 	and.w	r3, r3, #3
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <tcp_receive+0x6c0>
 800a034:	2301      	movs	r3, #1
 800a036:	e000      	b.n	800a03a <tcp_receive+0x6c2>
 800a038:	2300      	movs	r3, #0
 800a03a:	4423      	add	r3, r4
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	4b71      	ldr	r3, [pc, #452]	; (800a204 <tcp_receive+0x88c>)
 800a040:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a046:	4b6f      	ldr	r3, [pc, #444]	; (800a204 <tcp_receive+0x88c>)
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d275      	bcs.n	800a13a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a04e:	4b6c      	ldr	r3, [pc, #432]	; (800a200 <tcp_receive+0x888>)
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	899b      	ldrh	r3, [r3, #12]
 800a054:	b29b      	uxth	r3, r3
 800a056:	4618      	mov	r0, r3
 800a058:	f7fb f87f 	bl	800515a <lwip_htons>
 800a05c:	4603      	mov	r3, r0
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	f003 0301 	and.w	r3, r3, #1
 800a064:	2b00      	cmp	r3, #0
 800a066:	d01f      	beq.n	800a0a8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a068:	4b65      	ldr	r3, [pc, #404]	; (800a200 <tcp_receive+0x888>)
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	899b      	ldrh	r3, [r3, #12]
 800a06e:	b29b      	uxth	r3, r3
 800a070:	b21b      	sxth	r3, r3
 800a072:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a076:	b21c      	sxth	r4, r3
 800a078:	4b61      	ldr	r3, [pc, #388]	; (800a200 <tcp_receive+0x888>)
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	899b      	ldrh	r3, [r3, #12]
 800a07e:	b29b      	uxth	r3, r3
 800a080:	4618      	mov	r0, r3
 800a082:	f7fb f86a 	bl	800515a <lwip_htons>
 800a086:	4603      	mov	r3, r0
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a090:	b29b      	uxth	r3, r3
 800a092:	4618      	mov	r0, r3
 800a094:	f7fb f861 	bl	800515a <lwip_htons>
 800a098:	4603      	mov	r3, r0
 800a09a:	b21b      	sxth	r3, r3
 800a09c:	4323      	orrs	r3, r4
 800a09e:	b21a      	sxth	r2, r3
 800a0a0:	4b57      	ldr	r3, [pc, #348]	; (800a200 <tcp_receive+0x888>)
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	b292      	uxth	r2, r2
 800a0a6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a0ac:	4b54      	ldr	r3, [pc, #336]	; (800a200 <tcp_receive+0x888>)
 800a0ae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a0b0:	4b53      	ldr	r3, [pc, #332]	; (800a200 <tcp_receive+0x888>)
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	899b      	ldrh	r3, [r3, #12]
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fb f84e 	bl	800515a <lwip_htons>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	f003 0302 	and.w	r3, r3, #2
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d005      	beq.n	800a0d6 <tcp_receive+0x75e>
            inseg.len -= 1;
 800a0ca:	4b4d      	ldr	r3, [pc, #308]	; (800a200 <tcp_receive+0x888>)
 800a0cc:	891b      	ldrh	r3, [r3, #8]
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	4b4b      	ldr	r3, [pc, #300]	; (800a200 <tcp_receive+0x888>)
 800a0d4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a0d6:	4b4a      	ldr	r3, [pc, #296]	; (800a200 <tcp_receive+0x888>)
 800a0d8:	685a      	ldr	r2, [r3, #4]
 800a0da:	4b49      	ldr	r3, [pc, #292]	; (800a200 <tcp_receive+0x888>)
 800a0dc:	891b      	ldrh	r3, [r3, #8]
 800a0de:	4619      	mov	r1, r3
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	f7fc f94f 	bl	8006384 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a0e6:	4b46      	ldr	r3, [pc, #280]	; (800a200 <tcp_receive+0x888>)
 800a0e8:	891c      	ldrh	r4, [r3, #8]
 800a0ea:	4b45      	ldr	r3, [pc, #276]	; (800a200 <tcp_receive+0x888>)
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	899b      	ldrh	r3, [r3, #12]
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fb f831 	bl	800515a <lwip_htons>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	f003 0303 	and.w	r3, r3, #3
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <tcp_receive+0x790>
 800a104:	2301      	movs	r3, #1
 800a106:	e000      	b.n	800a10a <tcp_receive+0x792>
 800a108:	2300      	movs	r3, #0
 800a10a:	4423      	add	r3, r4
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	4b3d      	ldr	r3, [pc, #244]	; (800a204 <tcp_receive+0x88c>)
 800a110:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a112:	4b3c      	ldr	r3, [pc, #240]	; (800a204 <tcp_receive+0x88c>)
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	4b38      	ldr	r3, [pc, #224]	; (800a1fc <tcp_receive+0x884>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	441a      	add	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a122:	6879      	ldr	r1, [r7, #4]
 800a124:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a126:	440b      	add	r3, r1
 800a128:	429a      	cmp	r2, r3
 800a12a:	d006      	beq.n	800a13a <tcp_receive+0x7c2>
 800a12c:	4b36      	ldr	r3, [pc, #216]	; (800a208 <tcp_receive+0x890>)
 800a12e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800a132:	4936      	ldr	r1, [pc, #216]	; (800a20c <tcp_receive+0x894>)
 800a134:	4836      	ldr	r0, [pc, #216]	; (800a210 <tcp_receive+0x898>)
 800a136:	f005 f829 	bl	800f18c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f000 80e7 	beq.w	800a312 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a144:	4b2e      	ldr	r3, [pc, #184]	; (800a200 <tcp_receive+0x888>)
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	899b      	ldrh	r3, [r3, #12]
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7fb f804 	bl	800515a <lwip_htons>
 800a152:	4603      	mov	r3, r0
 800a154:	b2db      	uxtb	r3, r3
 800a156:	f003 0301 	and.w	r3, r3, #1
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d010      	beq.n	800a180 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a15e:	e00a      	b.n	800a176 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a164:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f7fd fd97 	bl	8007ca4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1f0      	bne.n	800a160 <tcp_receive+0x7e8>
 800a17e:	e0c8      	b.n	800a312 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a184:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a186:	e052      	b.n	800a22e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	899b      	ldrh	r3, [r3, #12]
 800a18e:	b29b      	uxth	r3, r3
 800a190:	4618      	mov	r0, r3
 800a192:	f7fa ffe2 	bl	800515a <lwip_htons>
 800a196:	4603      	mov	r3, r0
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d03d      	beq.n	800a21e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a1a2:	4b17      	ldr	r3, [pc, #92]	; (800a200 <tcp_receive+0x888>)
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	899b      	ldrh	r3, [r3, #12]
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fa ffd5 	bl	800515a <lwip_htons>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d130      	bne.n	800a21e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a1bc:	4b10      	ldr	r3, [pc, #64]	; (800a200 <tcp_receive+0x888>)
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	899b      	ldrh	r3, [r3, #12]
 800a1c2:	b29c      	uxth	r4, r3
 800a1c4:	2001      	movs	r0, #1
 800a1c6:	f7fa ffc8 	bl	800515a <lwip_htons>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	4b0c      	ldr	r3, [pc, #48]	; (800a200 <tcp_receive+0x888>)
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	4322      	orrs	r2, r4
 800a1d4:	b292      	uxth	r2, r2
 800a1d6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a1d8:	4b09      	ldr	r3, [pc, #36]	; (800a200 <tcp_receive+0x888>)
 800a1da:	891c      	ldrh	r4, [r3, #8]
 800a1dc:	4b08      	ldr	r3, [pc, #32]	; (800a200 <tcp_receive+0x888>)
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	899b      	ldrh	r3, [r3, #12]
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7fa ffb8 	bl	800515a <lwip_htons>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	f003 0303 	and.w	r3, r3, #3
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00e      	beq.n	800a214 <tcp_receive+0x89c>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e00d      	b.n	800a216 <tcp_receive+0x89e>
 800a1fa:	bf00      	nop
 800a1fc:	20000288 	.word	0x20000288
 800a200:	20000268 	.word	0x20000268
 800a204:	20000292 	.word	0x20000292
 800a208:	08011218 	.word	0x08011218
 800a20c:	080115c0 	.word	0x080115c0
 800a210:	08011264 	.word	0x08011264
 800a214:	2300      	movs	r3, #0
 800a216:	4423      	add	r3, r4
 800a218:	b29a      	uxth	r2, r3
 800a21a:	4b98      	ldr	r3, [pc, #608]	; (800a47c <tcp_receive+0xb04>)
 800a21c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a220:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a228:	6938      	ldr	r0, [r7, #16]
 800a22a:	f7fd fd3b 	bl	8007ca4 <tcp_seg_free>
            while (next &&
 800a22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00e      	beq.n	800a252 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a234:	4b91      	ldr	r3, [pc, #580]	; (800a47c <tcp_receive+0xb04>)
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	461a      	mov	r2, r3
 800a23a:	4b91      	ldr	r3, [pc, #580]	; (800a480 <tcp_receive+0xb08>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	441a      	add	r2, r3
 800a240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a248:	8909      	ldrh	r1, [r1, #8]
 800a24a:	440b      	add	r3, r1
 800a24c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a24e:	2b00      	cmp	r3, #0
 800a250:	da9a      	bge.n	800a188 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a254:	2b00      	cmp	r3, #0
 800a256:	d059      	beq.n	800a30c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a258:	4b88      	ldr	r3, [pc, #544]	; (800a47c <tcp_receive+0xb04>)
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	461a      	mov	r2, r3
 800a25e:	4b88      	ldr	r3, [pc, #544]	; (800a480 <tcp_receive+0xb08>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	441a      	add	r2, r3
 800a264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	dd4d      	ble.n	800a30c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	b29a      	uxth	r2, r3
 800a278:	4b81      	ldr	r3, [pc, #516]	; (800a480 <tcp_receive+0xb08>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	b29a      	uxth	r2, r3
 800a282:	4b80      	ldr	r3, [pc, #512]	; (800a484 <tcp_receive+0xb0c>)
 800a284:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a286:	4b7f      	ldr	r3, [pc, #508]	; (800a484 <tcp_receive+0xb0c>)
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	899b      	ldrh	r3, [r3, #12]
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fa ff63 	bl	800515a <lwip_htons>
 800a294:	4603      	mov	r3, r0
 800a296:	b2db      	uxtb	r3, r3
 800a298:	f003 0302 	and.w	r3, r3, #2
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d005      	beq.n	800a2ac <tcp_receive+0x934>
                inseg.len -= 1;
 800a2a0:	4b78      	ldr	r3, [pc, #480]	; (800a484 <tcp_receive+0xb0c>)
 800a2a2:	891b      	ldrh	r3, [r3, #8]
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	4b76      	ldr	r3, [pc, #472]	; (800a484 <tcp_receive+0xb0c>)
 800a2aa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a2ac:	4b75      	ldr	r3, [pc, #468]	; (800a484 <tcp_receive+0xb0c>)
 800a2ae:	685a      	ldr	r2, [r3, #4]
 800a2b0:	4b74      	ldr	r3, [pc, #464]	; (800a484 <tcp_receive+0xb0c>)
 800a2b2:	891b      	ldrh	r3, [r3, #8]
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	4610      	mov	r0, r2
 800a2b8:	f7fc f864 	bl	8006384 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a2bc:	4b71      	ldr	r3, [pc, #452]	; (800a484 <tcp_receive+0xb0c>)
 800a2be:	891c      	ldrh	r4, [r3, #8]
 800a2c0:	4b70      	ldr	r3, [pc, #448]	; (800a484 <tcp_receive+0xb0c>)
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	899b      	ldrh	r3, [r3, #12]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7fa ff46 	bl	800515a <lwip_htons>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	f003 0303 	and.w	r3, r3, #3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d001      	beq.n	800a2de <tcp_receive+0x966>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e000      	b.n	800a2e0 <tcp_receive+0x968>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	4423      	add	r3, r4
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	4b65      	ldr	r3, [pc, #404]	; (800a47c <tcp_receive+0xb04>)
 800a2e6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a2e8:	4b64      	ldr	r3, [pc, #400]	; (800a47c <tcp_receive+0xb04>)
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	4b64      	ldr	r3, [pc, #400]	; (800a480 <tcp_receive+0xb08>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	441a      	add	r2, r3
 800a2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d006      	beq.n	800a30c <tcp_receive+0x994>
 800a2fe:	4b62      	ldr	r3, [pc, #392]	; (800a488 <tcp_receive+0xb10>)
 800a300:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800a304:	4961      	ldr	r1, [pc, #388]	; (800a48c <tcp_receive+0xb14>)
 800a306:	4862      	ldr	r0, [pc, #392]	; (800a490 <tcp_receive+0xb18>)
 800a308:	f004 ff40 	bl	800f18c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a310:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a312:	4b5a      	ldr	r3, [pc, #360]	; (800a47c <tcp_receive+0xb04>)
 800a314:	881b      	ldrh	r3, [r3, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	4b59      	ldr	r3, [pc, #356]	; (800a480 <tcp_receive+0xb08>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	441a      	add	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a326:	4b55      	ldr	r3, [pc, #340]	; (800a47c <tcp_receive+0xb04>)
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d206      	bcs.n	800a33c <tcp_receive+0x9c4>
 800a32e:	4b56      	ldr	r3, [pc, #344]	; (800a488 <tcp_receive+0xb10>)
 800a330:	f240 6207 	movw	r2, #1543	; 0x607
 800a334:	4957      	ldr	r1, [pc, #348]	; (800a494 <tcp_receive+0xb1c>)
 800a336:	4856      	ldr	r0, [pc, #344]	; (800a490 <tcp_receive+0xb18>)
 800a338:	f004 ff28 	bl	800f18c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a340:	4b4e      	ldr	r3, [pc, #312]	; (800a47c <tcp_receive+0xb04>)
 800a342:	881b      	ldrh	r3, [r3, #0]
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	b29a      	uxth	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f7fc ffcd 	bl	80072ec <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a352:	4b4c      	ldr	r3, [pc, #304]	; (800a484 <tcp_receive+0xb0c>)
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	891b      	ldrh	r3, [r3, #8]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d006      	beq.n	800a36a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a35c:	4b49      	ldr	r3, [pc, #292]	; (800a484 <tcp_receive+0xb0c>)
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	4a4d      	ldr	r2, [pc, #308]	; (800a498 <tcp_receive+0xb20>)
 800a362:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a364:	4b47      	ldr	r3, [pc, #284]	; (800a484 <tcp_receive+0xb0c>)
 800a366:	2200      	movs	r2, #0
 800a368:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a36a:	4b46      	ldr	r3, [pc, #280]	; (800a484 <tcp_receive+0xb0c>)
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	899b      	ldrh	r3, [r3, #12]
 800a370:	b29b      	uxth	r3, r3
 800a372:	4618      	mov	r0, r3
 800a374:	f7fa fef1 	bl	800515a <lwip_htons>
 800a378:	4603      	mov	r3, r0
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	f003 0301 	and.w	r3, r3, #1
 800a380:	2b00      	cmp	r3, #0
 800a382:	f000 80b8 	beq.w	800a4f6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a386:	4b45      	ldr	r3, [pc, #276]	; (800a49c <tcp_receive+0xb24>)
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	f043 0320 	orr.w	r3, r3, #32
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	4b42      	ldr	r3, [pc, #264]	; (800a49c <tcp_receive+0xb24>)
 800a392:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a394:	e0af      	b.n	800a4f6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a39a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	4a36      	ldr	r2, [pc, #216]	; (800a480 <tcp_receive+0xb08>)
 800a3a6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	891b      	ldrh	r3, [r3, #8]
 800a3ac:	461c      	mov	r4, r3
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	899b      	ldrh	r3, [r3, #12]
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fa fecf 	bl	800515a <lwip_htons>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	f003 0303 	and.w	r3, r3, #3
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <tcp_receive+0xa54>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e000      	b.n	800a3ce <tcp_receive+0xa56>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	191a      	adds	r2, r3, r4
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d4:	441a      	add	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3de:	461c      	mov	r4, r3
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	891b      	ldrh	r3, [r3, #8]
 800a3e4:	461d      	mov	r5, r3
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	899b      	ldrh	r3, [r3, #12]
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7fa feb3 	bl	800515a <lwip_htons>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	f003 0303 	and.w	r3, r3, #3
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <tcp_receive+0xa8c>
 800a400:	2301      	movs	r3, #1
 800a402:	e000      	b.n	800a406 <tcp_receive+0xa8e>
 800a404:	2300      	movs	r3, #0
 800a406:	442b      	add	r3, r5
 800a408:	429c      	cmp	r4, r3
 800a40a:	d206      	bcs.n	800a41a <tcp_receive+0xaa2>
 800a40c:	4b1e      	ldr	r3, [pc, #120]	; (800a488 <tcp_receive+0xb10>)
 800a40e:	f240 622c 	movw	r2, #1580	; 0x62c
 800a412:	4923      	ldr	r1, [pc, #140]	; (800a4a0 <tcp_receive+0xb28>)
 800a414:	481e      	ldr	r0, [pc, #120]	; (800a490 <tcp_receive+0xb18>)
 800a416:	f004 feb9 	bl	800f18c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	891b      	ldrh	r3, [r3, #8]
 800a41e:	461c      	mov	r4, r3
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	899b      	ldrh	r3, [r3, #12]
 800a426:	b29b      	uxth	r3, r3
 800a428:	4618      	mov	r0, r3
 800a42a:	f7fa fe96 	bl	800515a <lwip_htons>
 800a42e:	4603      	mov	r3, r0
 800a430:	b2db      	uxtb	r3, r3
 800a432:	f003 0303 	and.w	r3, r3, #3
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <tcp_receive+0xac6>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e000      	b.n	800a440 <tcp_receive+0xac8>
 800a43e:	2300      	movs	r3, #0
 800a440:	1919      	adds	r1, r3, r4
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a446:	b28b      	uxth	r3, r1
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f7fc ff4b 	bl	80072ec <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	891b      	ldrh	r3, [r3, #8]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d028      	beq.n	800a4b2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a460:	4b0d      	ldr	r3, [pc, #52]	; (800a498 <tcp_receive+0xb20>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d01d      	beq.n	800a4a4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a468:	4b0b      	ldr	r3, [pc, #44]	; (800a498 <tcp_receive+0xb20>)
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	4619      	mov	r1, r3
 800a472:	4610      	mov	r0, r2
 800a474:	f7fc f9ce 	bl	8006814 <pbuf_cat>
 800a478:	e018      	b.n	800a4ac <tcp_receive+0xb34>
 800a47a:	bf00      	nop
 800a47c:	20000292 	.word	0x20000292
 800a480:	20000288 	.word	0x20000288
 800a484:	20000268 	.word	0x20000268
 800a488:	08011218 	.word	0x08011218
 800a48c:	080115f8 	.word	0x080115f8
 800a490:	08011264 	.word	0x08011264
 800a494:	08011634 	.word	0x08011634
 800a498:	20000298 	.word	0x20000298
 800a49c:	20000295 	.word	0x20000295
 800a4a0:	08011654 	.word	0x08011654
            } else {
              recv_data = cseg->p;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	4a70      	ldr	r2, [pc, #448]	; (800a66c <tcp_receive+0xcf4>)
 800a4aa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	899b      	ldrh	r3, [r3, #12]
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fa fe4d 	bl	800515a <lwip_htons>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	f003 0301 	and.w	r3, r3, #1
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00d      	beq.n	800a4e8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a4cc:	4b68      	ldr	r3, [pc, #416]	; (800a670 <tcp_receive+0xcf8>)
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	f043 0320 	orr.w	r3, r3, #32
 800a4d4:	b2da      	uxtb	r2, r3
 800a4d6:	4b66      	ldr	r3, [pc, #408]	; (800a670 <tcp_receive+0xcf8>)
 800a4d8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	7d1b      	ldrb	r3, [r3, #20]
 800a4de:	2b04      	cmp	r3, #4
 800a4e0:	d102      	bne.n	800a4e8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2207      	movs	r2, #7
 800a4e6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a4f0:	68b8      	ldr	r0, [r7, #8]
 800a4f2:	f7fd fbd7 	bl	8007ca4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d008      	beq.n	800a510 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	685a      	ldr	r2, [r3, #4]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a50a:	429a      	cmp	r2, r3
 800a50c:	f43f af43 	beq.w	800a396 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	8b5b      	ldrh	r3, [r3, #26]
 800a514:	f003 0301 	and.w	r3, r3, #1
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00e      	beq.n	800a53a <tcp_receive+0xbc2>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	8b5b      	ldrh	r3, [r3, #26]
 800a520:	f023 0301 	bic.w	r3, r3, #1
 800a524:	b29a      	uxth	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	835a      	strh	r2, [r3, #26]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	8b5b      	ldrh	r3, [r3, #26]
 800a52e:	f043 0302 	orr.w	r3, r3, #2
 800a532:	b29a      	uxth	r2, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a538:	e188      	b.n	800a84c <tcp_receive+0xed4>
        tcp_ack(pcb);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	8b5b      	ldrh	r3, [r3, #26]
 800a53e:	f043 0301 	orr.w	r3, r3, #1
 800a542:	b29a      	uxth	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a548:	e180      	b.n	800a84c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d106      	bne.n	800a560 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a552:	4848      	ldr	r0, [pc, #288]	; (800a674 <tcp_receive+0xcfc>)
 800a554:	f7fd fbbe 	bl	8007cd4 <tcp_seg_copy>
 800a558:	4602      	mov	r2, r0
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	675a      	str	r2, [r3, #116]	; 0x74
 800a55e:	e16d      	b.n	800a83c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a560:	2300      	movs	r3, #0
 800a562:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a568:	63bb      	str	r3, [r7, #56]	; 0x38
 800a56a:	e157      	b.n	800a81c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800a56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	685a      	ldr	r2, [r3, #4]
 800a572:	4b41      	ldr	r3, [pc, #260]	; (800a678 <tcp_receive+0xd00>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	429a      	cmp	r2, r3
 800a578:	d11d      	bne.n	800a5b6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a57a:	4b3e      	ldr	r3, [pc, #248]	; (800a674 <tcp_receive+0xcfc>)
 800a57c:	891a      	ldrh	r2, [r3, #8]
 800a57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a580:	891b      	ldrh	r3, [r3, #8]
 800a582:	429a      	cmp	r2, r3
 800a584:	f240 814f 	bls.w	800a826 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a588:	483a      	ldr	r0, [pc, #232]	; (800a674 <tcp_receive+0xcfc>)
 800a58a:	f7fd fba3 	bl	8007cd4 <tcp_seg_copy>
 800a58e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	2b00      	cmp	r3, #0
 800a594:	f000 8149 	beq.w	800a82a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800a598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d003      	beq.n	800a5a6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a0:	697a      	ldr	r2, [r7, #20]
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	e002      	b.n	800a5ac <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a5ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a5ae:	6978      	ldr	r0, [r7, #20]
 800a5b0:	f7ff f8de 	bl	8009770 <tcp_oos_insert_segment>
                }
                break;
 800a5b4:	e139      	b.n	800a82a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d117      	bne.n	800a5ec <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a5bc:	4b2e      	ldr	r3, [pc, #184]	; (800a678 <tcp_receive+0xd00>)
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	da57      	bge.n	800a67c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a5cc:	4829      	ldr	r0, [pc, #164]	; (800a674 <tcp_receive+0xcfc>)
 800a5ce:	f7fd fb81 	bl	8007cd4 <tcp_seg_copy>
 800a5d2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f000 8129 	beq.w	800a82e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	69ba      	ldr	r2, [r7, #24]
 800a5e0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a5e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a5e4:	69b8      	ldr	r0, [r7, #24]
 800a5e6:	f7ff f8c3 	bl	8009770 <tcp_oos_insert_segment>
                  }
                  break;
 800a5ea:	e120      	b.n	800a82e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a5ec:	4b22      	ldr	r3, [pc, #136]	; (800a678 <tcp_receive+0xd00>)
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	db3e      	blt.n	800a67c <tcp_receive+0xd04>
 800a5fe:	4b1e      	ldr	r3, [pc, #120]	; (800a678 <tcp_receive+0xd00>)
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	3301      	adds	r3, #1
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	dc35      	bgt.n	800a67c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a610:	4818      	ldr	r0, [pc, #96]	; (800a674 <tcp_receive+0xcfc>)
 800a612:	f7fd fb5f 	bl	8007cd4 <tcp_seg_copy>
 800a616:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f000 8109 	beq.w	800a832 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a628:	8912      	ldrh	r2, [r2, #8]
 800a62a:	441a      	add	r2, r3
 800a62c:	4b12      	ldr	r3, [pc, #72]	; (800a678 <tcp_receive+0xd00>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	1ad3      	subs	r3, r2, r3
 800a632:	2b00      	cmp	r3, #0
 800a634:	dd12      	ble.n	800a65c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a636:	4b10      	ldr	r3, [pc, #64]	; (800a678 <tcp_receive+0xd00>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	b29b      	uxth	r3, r3
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	b29a      	uxth	r2, r3
 800a648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a64a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a64e:	685a      	ldr	r2, [r3, #4]
 800a650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a652:	891b      	ldrh	r3, [r3, #8]
 800a654:	4619      	mov	r1, r3
 800a656:	4610      	mov	r0, r2
 800a658:	f7fb fe94 	bl	8006384 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a65e:	69fa      	ldr	r2, [r7, #28]
 800a660:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a662:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a664:	69f8      	ldr	r0, [r7, #28]
 800a666:	f7ff f883 	bl	8009770 <tcp_oos_insert_segment>
                  }
                  break;
 800a66a:	e0e2      	b.n	800a832 <tcp_receive+0xeba>
 800a66c:	20000298 	.word	0x20000298
 800a670:	20000295 	.word	0x20000295
 800a674:	20000268 	.word	0x20000268
 800a678:	20000288 	.word	0x20000288
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	f040 80c6 	bne.w	800a816 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a68a:	4b80      	ldr	r3, [pc, #512]	; (800a88c <tcp_receive+0xf14>)
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a696:	2b00      	cmp	r3, #0
 800a698:	f340 80bd 	ble.w	800a816 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	899b      	ldrh	r3, [r3, #12]
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fa fd58 	bl	800515a <lwip_htons>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	f003 0301 	and.w	r3, r3, #1
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f040 80bf 	bne.w	800a836 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a6b8:	4875      	ldr	r0, [pc, #468]	; (800a890 <tcp_receive+0xf18>)
 800a6ba:	f7fd fb0b 	bl	8007cd4 <tcp_seg_copy>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f000 80b6 	beq.w	800a83a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6d6:	8912      	ldrh	r2, [r2, #8]
 800a6d8:	441a      	add	r2, r3
 800a6da:	4b6c      	ldr	r3, [pc, #432]	; (800a88c <tcp_receive+0xf14>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	1ad3      	subs	r3, r2, r3
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	dd12      	ble.n	800a70a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a6e4:	4b69      	ldr	r3, [pc, #420]	; (800a88c <tcp_receive+0xf14>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	1ad3      	subs	r3, r2, r3
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fc:	685a      	ldr	r2, [r3, #4]
 800a6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a700:	891b      	ldrh	r3, [r3, #8]
 800a702:	4619      	mov	r1, r3
 800a704:	4610      	mov	r0, r2
 800a706:	f7fb fe3d 	bl	8006384 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a70a:	4b62      	ldr	r3, [pc, #392]	; (800a894 <tcp_receive+0xf1c>)
 800a70c:	881b      	ldrh	r3, [r3, #0]
 800a70e:	461a      	mov	r2, r3
 800a710:	4b5e      	ldr	r3, [pc, #376]	; (800a88c <tcp_receive+0xf14>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	441a      	add	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71a:	6879      	ldr	r1, [r7, #4]
 800a71c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a71e:	440b      	add	r3, r1
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	2b00      	cmp	r3, #0
 800a724:	f340 8089 	ble.w	800a83a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	899b      	ldrh	r3, [r3, #12]
 800a730:	b29b      	uxth	r3, r3
 800a732:	4618      	mov	r0, r3
 800a734:	f7fa fd11 	bl	800515a <lwip_htons>
 800a738:	4603      	mov	r3, r0
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	f003 0301 	and.w	r3, r3, #1
 800a740:	2b00      	cmp	r3, #0
 800a742:	d022      	beq.n	800a78a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	899b      	ldrh	r3, [r3, #12]
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	b21b      	sxth	r3, r3
 800a750:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a754:	b21c      	sxth	r4, r3
 800a756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	899b      	ldrh	r3, [r3, #12]
 800a75e:	b29b      	uxth	r3, r3
 800a760:	4618      	mov	r0, r3
 800a762:	f7fa fcfa 	bl	800515a <lwip_htons>
 800a766:	4603      	mov	r3, r0
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a770:	b29b      	uxth	r3, r3
 800a772:	4618      	mov	r0, r3
 800a774:	f7fa fcf1 	bl	800515a <lwip_htons>
 800a778:	4603      	mov	r3, r0
 800a77a:	b21b      	sxth	r3, r3
 800a77c:	4323      	orrs	r3, r4
 800a77e:	b21a      	sxth	r2, r3
 800a780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	b292      	uxth	r2, r2
 800a788:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	b29a      	uxth	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a794:	4413      	add	r3, r2
 800a796:	b299      	uxth	r1, r3
 800a798:	4b3c      	ldr	r3, [pc, #240]	; (800a88c <tcp_receive+0xf14>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	1a8a      	subs	r2, r1, r2
 800a7a4:	b292      	uxth	r2, r2
 800a7a6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	685a      	ldr	r2, [r3, #4]
 800a7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	891b      	ldrh	r3, [r3, #8]
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4610      	mov	r0, r2
 800a7b8:	f7fb fde4 	bl	8006384 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	891c      	ldrh	r4, [r3, #8]
 800a7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	899b      	ldrh	r3, [r3, #12]
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fa fcc4 	bl	800515a <lwip_htons>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	f003 0303 	and.w	r3, r3, #3
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d001      	beq.n	800a7e2 <tcp_receive+0xe6a>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e000      	b.n	800a7e4 <tcp_receive+0xe6c>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	4423      	add	r3, r4
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	4b2a      	ldr	r3, [pc, #168]	; (800a894 <tcp_receive+0xf1c>)
 800a7ea:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a7ec:	4b29      	ldr	r3, [pc, #164]	; (800a894 <tcp_receive+0xf1c>)
 800a7ee:	881b      	ldrh	r3, [r3, #0]
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	4b26      	ldr	r3, [pc, #152]	; (800a88c <tcp_receive+0xf14>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	441a      	add	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fc:	6879      	ldr	r1, [r7, #4]
 800a7fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a800:	440b      	add	r3, r1
 800a802:	429a      	cmp	r2, r3
 800a804:	d019      	beq.n	800a83a <tcp_receive+0xec2>
 800a806:	4b24      	ldr	r3, [pc, #144]	; (800a898 <tcp_receive+0xf20>)
 800a808:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a80c:	4923      	ldr	r1, [pc, #140]	; (800a89c <tcp_receive+0xf24>)
 800a80e:	4824      	ldr	r0, [pc, #144]	; (800a8a0 <tcp_receive+0xf28>)
 800a810:	f004 fcbc 	bl	800f18c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a814:	e011      	b.n	800a83a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81e:	2b00      	cmp	r3, #0
 800a820:	f47f aea4 	bne.w	800a56c <tcp_receive+0xbf4>
 800a824:	e00a      	b.n	800a83c <tcp_receive+0xec4>
                break;
 800a826:	bf00      	nop
 800a828:	e008      	b.n	800a83c <tcp_receive+0xec4>
                break;
 800a82a:	bf00      	nop
 800a82c:	e006      	b.n	800a83c <tcp_receive+0xec4>
                  break;
 800a82e:	bf00      	nop
 800a830:	e004      	b.n	800a83c <tcp_receive+0xec4>
                  break;
 800a832:	bf00      	nop
 800a834:	e002      	b.n	800a83c <tcp_receive+0xec4>
                  break;
 800a836:	bf00      	nop
 800a838:	e000      	b.n	800a83c <tcp_receive+0xec4>
                break;
 800a83a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f001 fa43 	bl	800bcc8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a842:	e003      	b.n	800a84c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f001 fa3f 	bl	800bcc8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a84a:	e01a      	b.n	800a882 <tcp_receive+0xf0a>
 800a84c:	e019      	b.n	800a882 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a84e:	4b0f      	ldr	r3, [pc, #60]	; (800a88c <tcp_receive+0xf14>)
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a856:	1ad3      	subs	r3, r2, r3
 800a858:	2b00      	cmp	r3, #0
 800a85a:	db0a      	blt.n	800a872 <tcp_receive+0xefa>
 800a85c:	4b0b      	ldr	r3, [pc, #44]	; (800a88c <tcp_receive+0xf14>)
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a864:	6879      	ldr	r1, [r7, #4]
 800a866:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a868:	440b      	add	r3, r1
 800a86a:	1ad3      	subs	r3, r2, r3
 800a86c:	3301      	adds	r3, #1
 800a86e:	2b00      	cmp	r3, #0
 800a870:	dd07      	ble.n	800a882 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	8b5b      	ldrh	r3, [r3, #26]
 800a876:	f043 0302 	orr.w	r3, r3, #2
 800a87a:	b29a      	uxth	r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a880:	e7ff      	b.n	800a882 <tcp_receive+0xf0a>
 800a882:	bf00      	nop
 800a884:	3750      	adds	r7, #80	; 0x50
 800a886:	46bd      	mov	sp, r7
 800a888:	bdb0      	pop	{r4, r5, r7, pc}
 800a88a:	bf00      	nop
 800a88c:	20000288 	.word	0x20000288
 800a890:	20000268 	.word	0x20000268
 800a894:	20000292 	.word	0x20000292
 800a898:	08011218 	.word	0x08011218
 800a89c:	080115c0 	.word	0x080115c0
 800a8a0:	08011264 	.word	0x08011264

0800a8a4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a8aa:	4b15      	ldr	r3, [pc, #84]	; (800a900 <tcp_get_next_optbyte+0x5c>)
 800a8ac:	881b      	ldrh	r3, [r3, #0]
 800a8ae:	1c5a      	adds	r2, r3, #1
 800a8b0:	b291      	uxth	r1, r2
 800a8b2:	4a13      	ldr	r2, [pc, #76]	; (800a900 <tcp_get_next_optbyte+0x5c>)
 800a8b4:	8011      	strh	r1, [r2, #0]
 800a8b6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a8b8:	4b12      	ldr	r3, [pc, #72]	; (800a904 <tcp_get_next_optbyte+0x60>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d004      	beq.n	800a8ca <tcp_get_next_optbyte+0x26>
 800a8c0:	4b11      	ldr	r3, [pc, #68]	; (800a908 <tcp_get_next_optbyte+0x64>)
 800a8c2:	881b      	ldrh	r3, [r3, #0]
 800a8c4:	88fa      	ldrh	r2, [r7, #6]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d208      	bcs.n	800a8dc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a8ca:	4b10      	ldr	r3, [pc, #64]	; (800a90c <tcp_get_next_optbyte+0x68>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	3314      	adds	r3, #20
 800a8d0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a8d2:	88fb      	ldrh	r3, [r7, #6]
 800a8d4:	683a      	ldr	r2, [r7, #0]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	e00b      	b.n	800a8f4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a8dc:	88fb      	ldrh	r3, [r7, #6]
 800a8de:	b2da      	uxtb	r2, r3
 800a8e0:	4b09      	ldr	r3, [pc, #36]	; (800a908 <tcp_get_next_optbyte+0x64>)
 800a8e2:	881b      	ldrh	r3, [r3, #0]
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a8ea:	4b06      	ldr	r3, [pc, #24]	; (800a904 <tcp_get_next_optbyte+0x60>)
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	797b      	ldrb	r3, [r7, #5]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	20000284 	.word	0x20000284
 800a904:	20000280 	.word	0x20000280
 800a908:	2000027e 	.word	0x2000027e
 800a90c:	20000278 	.word	0x20000278

0800a910 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d106      	bne.n	800a92c <tcp_parseopt+0x1c>
 800a91e:	4b31      	ldr	r3, [pc, #196]	; (800a9e4 <tcp_parseopt+0xd4>)
 800a920:	f240 727d 	movw	r2, #1917	; 0x77d
 800a924:	4930      	ldr	r1, [pc, #192]	; (800a9e8 <tcp_parseopt+0xd8>)
 800a926:	4831      	ldr	r0, [pc, #196]	; (800a9ec <tcp_parseopt+0xdc>)
 800a928:	f004 fc30 	bl	800f18c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a92c:	4b30      	ldr	r3, [pc, #192]	; (800a9f0 <tcp_parseopt+0xe0>)
 800a92e:	881b      	ldrh	r3, [r3, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d053      	beq.n	800a9dc <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a934:	4b2f      	ldr	r3, [pc, #188]	; (800a9f4 <tcp_parseopt+0xe4>)
 800a936:	2200      	movs	r2, #0
 800a938:	801a      	strh	r2, [r3, #0]
 800a93a:	e043      	b.n	800a9c4 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800a93c:	f7ff ffb2 	bl	800a8a4 <tcp_get_next_optbyte>
 800a940:	4603      	mov	r3, r0
 800a942:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a944:	7bfb      	ldrb	r3, [r7, #15]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d03c      	beq.n	800a9c4 <tcp_parseopt+0xb4>
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	d002      	beq.n	800a954 <tcp_parseopt+0x44>
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d03f      	beq.n	800a9d2 <tcp_parseopt+0xc2>
 800a952:	e026      	b.n	800a9a2 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a954:	f7ff ffa6 	bl	800a8a4 <tcp_get_next_optbyte>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	d13b      	bne.n	800a9d6 <tcp_parseopt+0xc6>
 800a95e:	4b25      	ldr	r3, [pc, #148]	; (800a9f4 <tcp_parseopt+0xe4>)
 800a960:	881b      	ldrh	r3, [r3, #0]
 800a962:	3302      	adds	r3, #2
 800a964:	4a22      	ldr	r2, [pc, #136]	; (800a9f0 <tcp_parseopt+0xe0>)
 800a966:	8812      	ldrh	r2, [r2, #0]
 800a968:	4293      	cmp	r3, r2
 800a96a:	dc34      	bgt.n	800a9d6 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a96c:	f7ff ff9a 	bl	800a8a4 <tcp_get_next_optbyte>
 800a970:	4603      	mov	r3, r0
 800a972:	b29b      	uxth	r3, r3
 800a974:	021b      	lsls	r3, r3, #8
 800a976:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a978:	f7ff ff94 	bl	800a8a4 <tcp_get_next_optbyte>
 800a97c:	4603      	mov	r3, r0
 800a97e:	b29a      	uxth	r2, r3
 800a980:	89bb      	ldrh	r3, [r7, #12]
 800a982:	4313      	orrs	r3, r2
 800a984:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a986:	89bb      	ldrh	r3, [r7, #12]
 800a988:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a98c:	d804      	bhi.n	800a998 <tcp_parseopt+0x88>
 800a98e:	89bb      	ldrh	r3, [r7, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d001      	beq.n	800a998 <tcp_parseopt+0x88>
 800a994:	89ba      	ldrh	r2, [r7, #12]
 800a996:	e001      	b.n	800a99c <tcp_parseopt+0x8c>
 800a998:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a9a0:	e010      	b.n	800a9c4 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a9a2:	f7ff ff7f 	bl	800a8a4 <tcp_get_next_optbyte>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a9aa:	7afb      	ldrb	r3, [r7, #11]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d914      	bls.n	800a9da <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a9b0:	7afb      	ldrb	r3, [r7, #11]
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	4b0f      	ldr	r3, [pc, #60]	; (800a9f4 <tcp_parseopt+0xe4>)
 800a9b6:	881b      	ldrh	r3, [r3, #0]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	3b02      	subs	r3, #2
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	4b0c      	ldr	r3, [pc, #48]	; (800a9f4 <tcp_parseopt+0xe4>)
 800a9c2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a9c4:	4b0b      	ldr	r3, [pc, #44]	; (800a9f4 <tcp_parseopt+0xe4>)
 800a9c6:	881a      	ldrh	r2, [r3, #0]
 800a9c8:	4b09      	ldr	r3, [pc, #36]	; (800a9f0 <tcp_parseopt+0xe0>)
 800a9ca:	881b      	ldrh	r3, [r3, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d3b5      	bcc.n	800a93c <tcp_parseopt+0x2c>
 800a9d0:	e004      	b.n	800a9dc <tcp_parseopt+0xcc>
          return;
 800a9d2:	bf00      	nop
 800a9d4:	e002      	b.n	800a9dc <tcp_parseopt+0xcc>
            return;
 800a9d6:	bf00      	nop
 800a9d8:	e000      	b.n	800a9dc <tcp_parseopt+0xcc>
            return;
 800a9da:	bf00      	nop
      }
    }
  }
}
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	08011218 	.word	0x08011218
 800a9e8:	0801167c 	.word	0x0801167c
 800a9ec:	08011264 	.word	0x08011264
 800a9f0:	2000027c 	.word	0x2000027c
 800a9f4:	20000284 	.word	0x20000284

0800a9f8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a9fc:	4b05      	ldr	r3, [pc, #20]	; (800aa14 <tcp_trigger_input_pcb_close+0x1c>)
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	f043 0310 	orr.w	r3, r3, #16
 800aa04:	b2da      	uxtb	r2, r3
 800aa06:	4b03      	ldr	r3, [pc, #12]	; (800aa14 <tcp_trigger_input_pcb_close+0x1c>)
 800aa08:	701a      	strb	r2, [r3, #0]
}
 800aa0a:	bf00      	nop
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr
 800aa14:	20000295 	.word	0x20000295

0800aa18 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00a      	beq.n	800aa40 <tcp_route+0x28>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	7a1b      	ldrb	r3, [r3, #8]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d006      	beq.n	800aa40 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	7a1b      	ldrb	r3, [r3, #8]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fb face 	bl	8005fd8 <netif_get_by_index>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	e003      	b.n	800aa48 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f003 f97d 	bl	800dd40 <ip4_route>
 800aa46:	4603      	mov	r3, r0
  }
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800aa50:	b590      	push	{r4, r7, lr}
 800aa52:	b087      	sub	sp, #28
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	603b      	str	r3, [r7, #0]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d105      	bne.n	800aa72 <tcp_create_segment+0x22>
 800aa66:	4b44      	ldr	r3, [pc, #272]	; (800ab78 <tcp_create_segment+0x128>)
 800aa68:	22a3      	movs	r2, #163	; 0xa3
 800aa6a:	4944      	ldr	r1, [pc, #272]	; (800ab7c <tcp_create_segment+0x12c>)
 800aa6c:	4844      	ldr	r0, [pc, #272]	; (800ab80 <tcp_create_segment+0x130>)
 800aa6e:	f004 fb8d 	bl	800f18c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d105      	bne.n	800aa84 <tcp_create_segment+0x34>
 800aa78:	4b3f      	ldr	r3, [pc, #252]	; (800ab78 <tcp_create_segment+0x128>)
 800aa7a:	22a4      	movs	r2, #164	; 0xa4
 800aa7c:	4941      	ldr	r1, [pc, #260]	; (800ab84 <tcp_create_segment+0x134>)
 800aa7e:	4840      	ldr	r0, [pc, #256]	; (800ab80 <tcp_create_segment+0x130>)
 800aa80:	f004 fb84 	bl	800f18c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800aa84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	f003 0304 	and.w	r3, r3, #4
 800aa90:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800aa92:	2003      	movs	r0, #3
 800aa94:	f7fa ffb6 	bl	8005a04 <memp_malloc>
 800aa98:	6138      	str	r0, [r7, #16]
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d104      	bne.n	800aaaa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800aaa0:	68b8      	ldr	r0, [r7, #8]
 800aaa2:	f7fb fdf5 	bl	8006690 <pbuf_free>
    return NULL;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	e061      	b.n	800ab6e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800aab0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	2200      	movs	r2, #0
 800aab6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	68ba      	ldr	r2, [r7, #8]
 800aabc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	891a      	ldrh	r2, [r3, #8]
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d205      	bcs.n	800aad6 <tcp_create_segment+0x86>
 800aaca:	4b2b      	ldr	r3, [pc, #172]	; (800ab78 <tcp_create_segment+0x128>)
 800aacc:	22b0      	movs	r2, #176	; 0xb0
 800aace:	492e      	ldr	r1, [pc, #184]	; (800ab88 <tcp_create_segment+0x138>)
 800aad0:	482b      	ldr	r0, [pc, #172]	; (800ab80 <tcp_create_segment+0x130>)
 800aad2:	f004 fb5b 	bl	800f18c <iprintf>
  seg->len = p->tot_len - optlen;
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	891a      	ldrh	r2, [r3, #8]
 800aada:	7dfb      	ldrb	r3, [r7, #23]
 800aadc:	b29b      	uxth	r3, r3
 800aade:	1ad3      	subs	r3, r2, r3
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800aae6:	2114      	movs	r1, #20
 800aae8:	68b8      	ldr	r0, [r7, #8]
 800aaea:	f7fb fd3b 	bl	8006564 <pbuf_add_header>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d004      	beq.n	800aafe <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800aaf4:	6938      	ldr	r0, [r7, #16]
 800aaf6:	f7fd f8d5 	bl	8007ca4 <tcp_seg_free>
    return NULL;
 800aafa:	2300      	movs	r3, #0
 800aafc:	e037      	b.n	800ab6e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	685a      	ldr	r2, [r3, #4]
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	8ada      	ldrh	r2, [r3, #22]
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	68dc      	ldr	r4, [r3, #12]
 800ab10:	4610      	mov	r0, r2
 800ab12:	f7fa fb22 	bl	800515a <lwip_htons>
 800ab16:	4603      	mov	r3, r0
 800ab18:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	8b1a      	ldrh	r2, [r3, #24]
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	68dc      	ldr	r4, [r3, #12]
 800ab22:	4610      	mov	r0, r2
 800ab24:	f7fa fb19 	bl	800515a <lwip_htons>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	68dc      	ldr	r4, [r3, #12]
 800ab30:	6838      	ldr	r0, [r7, #0]
 800ab32:	f7fa fb27 	bl	8005184 <lwip_htonl>
 800ab36:	4603      	mov	r3, r0
 800ab38:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ab3a:	7dfb      	ldrb	r3, [r7, #23]
 800ab3c:	089b      	lsrs	r3, r3, #2
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	3305      	adds	r3, #5
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	031b      	lsls	r3, r3, #12
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	79fb      	ldrb	r3, [r7, #7]
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	68dc      	ldr	r4, [r3, #12]
 800ab56:	4610      	mov	r0, r2
 800ab58:	f7fa faff 	bl	800515a <lwip_htons>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	2200      	movs	r2, #0
 800ab66:	749a      	strb	r2, [r3, #18]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	74da      	strb	r2, [r3, #19]
  return seg;
 800ab6c:	693b      	ldr	r3, [r7, #16]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	371c      	adds	r7, #28
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd90      	pop	{r4, r7, pc}
 800ab76:	bf00      	nop
 800ab78:	08011698 	.word	0x08011698
 800ab7c:	080116cc 	.word	0x080116cc
 800ab80:	080116ec 	.word	0x080116ec
 800ab84:	08011714 	.word	0x08011714
 800ab88:	08011738 	.word	0x08011738

0800ab8c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ab8c:	b590      	push	{r4, r7, lr}
 800ab8e:	b08b      	sub	sp, #44	; 0x2c
 800ab90:	af02      	add	r7, sp, #8
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	460b      	mov	r3, r1
 800ab96:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	61fb      	str	r3, [r7, #28]
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800aba0:	2300      	movs	r3, #0
 800aba2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d106      	bne.n	800abb8 <tcp_split_unsent_seg+0x2c>
 800abaa:	4b95      	ldr	r3, [pc, #596]	; (800ae00 <tcp_split_unsent_seg+0x274>)
 800abac:	f240 324b 	movw	r2, #843	; 0x34b
 800abb0:	4994      	ldr	r1, [pc, #592]	; (800ae04 <tcp_split_unsent_seg+0x278>)
 800abb2:	4895      	ldr	r0, [pc, #596]	; (800ae08 <tcp_split_unsent_seg+0x27c>)
 800abb4:	f004 faea 	bl	800f18c <iprintf>

  useg = pcb->unsent;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abbc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d102      	bne.n	800abca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800abc4:	f04f 33ff 	mov.w	r3, #4294967295
 800abc8:	e116      	b.n	800adf8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800abca:	887b      	ldrh	r3, [r7, #2]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d109      	bne.n	800abe4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800abd0:	4b8b      	ldr	r3, [pc, #556]	; (800ae00 <tcp_split_unsent_seg+0x274>)
 800abd2:	f240 3253 	movw	r2, #851	; 0x353
 800abd6:	498d      	ldr	r1, [pc, #564]	; (800ae0c <tcp_split_unsent_seg+0x280>)
 800abd8:	488b      	ldr	r0, [pc, #556]	; (800ae08 <tcp_split_unsent_seg+0x27c>)
 800abda:	f004 fad7 	bl	800f18c <iprintf>
    return ERR_VAL;
 800abde:	f06f 0305 	mvn.w	r3, #5
 800abe2:	e109      	b.n	800adf8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	891b      	ldrh	r3, [r3, #8]
 800abe8:	887a      	ldrh	r2, [r7, #2]
 800abea:	429a      	cmp	r2, r3
 800abec:	d301      	bcc.n	800abf2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800abee:	2300      	movs	r3, #0
 800abf0:	e102      	b.n	800adf8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abf6:	887a      	ldrh	r2, [r7, #2]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d906      	bls.n	800ac0a <tcp_split_unsent_seg+0x7e>
 800abfc:	4b80      	ldr	r3, [pc, #512]	; (800ae00 <tcp_split_unsent_seg+0x274>)
 800abfe:	f240 325b 	movw	r2, #859	; 0x35b
 800ac02:	4983      	ldr	r1, [pc, #524]	; (800ae10 <tcp_split_unsent_seg+0x284>)
 800ac04:	4880      	ldr	r0, [pc, #512]	; (800ae08 <tcp_split_unsent_seg+0x27c>)
 800ac06:	f004 fac1 	bl	800f18c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	891b      	ldrh	r3, [r3, #8]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d106      	bne.n	800ac20 <tcp_split_unsent_seg+0x94>
 800ac12:	4b7b      	ldr	r3, [pc, #492]	; (800ae00 <tcp_split_unsent_seg+0x274>)
 800ac14:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ac18:	497e      	ldr	r1, [pc, #504]	; (800ae14 <tcp_split_unsent_seg+0x288>)
 800ac1a:	487b      	ldr	r0, [pc, #492]	; (800ae08 <tcp_split_unsent_seg+0x27c>)
 800ac1c:	f004 fab6 	bl	800f18c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	7a9b      	ldrb	r3, [r3, #10]
 800ac24:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ac26:	7bfb      	ldrb	r3, [r7, #15]
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	f003 0304 	and.w	r3, r3, #4
 800ac30:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	891a      	ldrh	r2, [r3, #8]
 800ac36:	887b      	ldrh	r3, [r7, #2]
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ac3c:	7bbb      	ldrb	r3, [r7, #14]
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	89bb      	ldrh	r3, [r7, #12]
 800ac42:	4413      	add	r3, r2
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	2036      	movs	r0, #54	; 0x36
 800ac4e:	f7fb fa3f 	bl	80060d0 <pbuf_alloc>
 800ac52:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f000 80b7 	beq.w	800adca <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	891a      	ldrh	r2, [r3, #8]
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	891b      	ldrh	r3, [r3, #8]
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	887b      	ldrh	r3, [r7, #2]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	6858      	ldr	r0, [r3, #4]
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	685a      	ldr	r2, [r3, #4]
 800ac78:	7bbb      	ldrb	r3, [r7, #14]
 800ac7a:	18d1      	adds	r1, r2, r3
 800ac7c:	897b      	ldrh	r3, [r7, #10]
 800ac7e:	89ba      	ldrh	r2, [r7, #12]
 800ac80:	f7fb ff00 	bl	8006a84 <pbuf_copy_partial>
 800ac84:	4603      	mov	r3, r0
 800ac86:	461a      	mov	r2, r3
 800ac88:	89bb      	ldrh	r3, [r7, #12]
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	f040 809f 	bne.w	800adce <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	899b      	ldrh	r3, [r3, #12]
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fa fa5e 	bl	800515a <lwip_htons>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aca6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800aca8:	2300      	movs	r3, #0
 800acaa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800acac:	7efb      	ldrb	r3, [r7, #27]
 800acae:	f003 0308 	and.w	r3, r3, #8
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d007      	beq.n	800acc6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800acb6:	7efb      	ldrb	r3, [r7, #27]
 800acb8:	f023 0308 	bic.w	r3, r3, #8
 800acbc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800acbe:	7ebb      	ldrb	r3, [r7, #26]
 800acc0:	f043 0308 	orr.w	r3, r3, #8
 800acc4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800acc6:	7efb      	ldrb	r3, [r7, #27]
 800acc8:	f003 0301 	and.w	r3, r3, #1
 800accc:	2b00      	cmp	r3, #0
 800acce:	d007      	beq.n	800ace0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800acd0:	7efb      	ldrb	r3, [r7, #27]
 800acd2:	f023 0301 	bic.w	r3, r3, #1
 800acd6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800acd8:	7ebb      	ldrb	r3, [r7, #26]
 800acda:	f043 0301 	orr.w	r3, r3, #1
 800acde:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7fa fa4c 	bl	8005184 <lwip_htonl>
 800acec:	4602      	mov	r2, r0
 800acee:	887b      	ldrh	r3, [r7, #2]
 800acf0:	18d1      	adds	r1, r2, r3
 800acf2:	7eba      	ldrb	r2, [r7, #26]
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
 800acf6:	9300      	str	r3, [sp, #0]
 800acf8:	460b      	mov	r3, r1
 800acfa:	6939      	ldr	r1, [r7, #16]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7ff fea7 	bl	800aa50 <tcp_create_segment>
 800ad02:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d063      	beq.n	800add2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fb fd46 	bl	80067a0 <pbuf_clen>
 800ad14:	4603      	mov	r3, r0
 800ad16:	461a      	mov	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ad1e:	1a9b      	subs	r3, r3, r2
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	6858      	ldr	r0, [r3, #4]
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	891a      	ldrh	r2, [r3, #8]
 800ad32:	89bb      	ldrh	r3, [r7, #12]
 800ad34:	1ad3      	subs	r3, r2, r3
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	4619      	mov	r1, r3
 800ad3a:	f7fb fb23 	bl	8006384 <pbuf_realloc>
  useg->len -= remainder;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	891a      	ldrh	r2, [r3, #8]
 800ad42:	89bb      	ldrh	r3, [r7, #12]
 800ad44:	1ad3      	subs	r3, r2, r3
 800ad46:	b29a      	uxth	r2, r3
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	899b      	ldrh	r3, [r3, #12]
 800ad52:	b29c      	uxth	r4, r3
 800ad54:	7efb      	ldrb	r3, [r7, #27]
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7fa f9fe 	bl	800515a <lwip_htons>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	461a      	mov	r2, r3
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	4322      	orrs	r2, r4
 800ad68:	b292      	uxth	r2, r2
 800ad6a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7fb fd15 	bl	80067a0 <pbuf_clen>
 800ad76:	4603      	mov	r3, r0
 800ad78:	461a      	mov	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ad80:	4413      	add	r3, r2
 800ad82:	b29a      	uxth	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fb fd06 	bl	80067a0 <pbuf_clen>
 800ad94:	4603      	mov	r3, r0
 800ad96:	461a      	mov	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ad9e:	4413      	add	r3, r2
 800ada0:	b29a      	uxth	r2, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	69fa      	ldr	r2, [r7, #28]
 800adb4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d103      	bne.n	800adc6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	e016      	b.n	800adf8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800adca:	bf00      	nop
 800adcc:	e002      	b.n	800add4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800adce:	bf00      	nop
 800add0:	e000      	b.n	800add4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800add2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d006      	beq.n	800ade8 <tcp_split_unsent_seg+0x25c>
 800adda:	4b09      	ldr	r3, [pc, #36]	; (800ae00 <tcp_split_unsent_seg+0x274>)
 800addc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ade0:	490d      	ldr	r1, [pc, #52]	; (800ae18 <tcp_split_unsent_seg+0x28c>)
 800ade2:	4809      	ldr	r0, [pc, #36]	; (800ae08 <tcp_split_unsent_seg+0x27c>)
 800ade4:	f004 f9d2 	bl	800f18c <iprintf>
  if (p != NULL) {
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d002      	beq.n	800adf4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800adee:	6938      	ldr	r0, [r7, #16]
 800adf0:	f7fb fc4e 	bl	8006690 <pbuf_free>
  }

  return ERR_MEM;
 800adf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3724      	adds	r7, #36	; 0x24
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd90      	pop	{r4, r7, pc}
 800ae00:	08011698 	.word	0x08011698
 800ae04:	08011a2c 	.word	0x08011a2c
 800ae08:	080116ec 	.word	0x080116ec
 800ae0c:	08011a50 	.word	0x08011a50
 800ae10:	08011a74 	.word	0x08011a74
 800ae14:	08011a84 	.word	0x08011a84
 800ae18:	08011a94 	.word	0x08011a94

0800ae1c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ae1c:	b590      	push	{r4, r7, lr}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d106      	bne.n	800ae38 <tcp_send_fin+0x1c>
 800ae2a:	4b21      	ldr	r3, [pc, #132]	; (800aeb0 <tcp_send_fin+0x94>)
 800ae2c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ae30:	4920      	ldr	r1, [pc, #128]	; (800aeb4 <tcp_send_fin+0x98>)
 800ae32:	4821      	ldr	r0, [pc, #132]	; (800aeb8 <tcp_send_fin+0x9c>)
 800ae34:	f004 f9aa 	bl	800f18c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d02e      	beq.n	800ae9e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae44:	60fb      	str	r3, [r7, #12]
 800ae46:	e002      	b.n	800ae4e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1f8      	bne.n	800ae48 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	899b      	ldrh	r3, [r3, #12]
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7fa f97b 	bl	800515a <lwip_htons>
 800ae64:	4603      	mov	r3, r0
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	f003 0307 	and.w	r3, r3, #7
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d116      	bne.n	800ae9e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	899b      	ldrh	r3, [r3, #12]
 800ae76:	b29c      	uxth	r4, r3
 800ae78:	2001      	movs	r0, #1
 800ae7a:	f7fa f96e 	bl	800515a <lwip_htons>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	461a      	mov	r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	4322      	orrs	r2, r4
 800ae88:	b292      	uxth	r2, r2
 800ae8a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	8b5b      	ldrh	r3, [r3, #26]
 800ae90:	f043 0320 	orr.w	r3, r3, #32
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	e004      	b.n	800aea8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ae9e:	2101      	movs	r1, #1
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 f80b 	bl	800aebc <tcp_enqueue_flags>
 800aea6:	4603      	mov	r3, r0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd90      	pop	{r4, r7, pc}
 800aeb0:	08011698 	.word	0x08011698
 800aeb4:	08011aa0 	.word	0x08011aa0
 800aeb8:	080116ec 	.word	0x080116ec

0800aebc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b08a      	sub	sp, #40	; 0x28
 800aec0:	af02      	add	r7, sp, #8
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	460b      	mov	r3, r1
 800aec6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800aed0:	78fb      	ldrb	r3, [r7, #3]
 800aed2:	f003 0303 	and.w	r3, r3, #3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d106      	bne.n	800aee8 <tcp_enqueue_flags+0x2c>
 800aeda:	4b67      	ldr	r3, [pc, #412]	; (800b078 <tcp_enqueue_flags+0x1bc>)
 800aedc:	f240 4212 	movw	r2, #1042	; 0x412
 800aee0:	4966      	ldr	r1, [pc, #408]	; (800b07c <tcp_enqueue_flags+0x1c0>)
 800aee2:	4867      	ldr	r0, [pc, #412]	; (800b080 <tcp_enqueue_flags+0x1c4>)
 800aee4:	f004 f952 	bl	800f18c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d106      	bne.n	800aefc <tcp_enqueue_flags+0x40>
 800aeee:	4b62      	ldr	r3, [pc, #392]	; (800b078 <tcp_enqueue_flags+0x1bc>)
 800aef0:	f240 4213 	movw	r2, #1043	; 0x413
 800aef4:	4963      	ldr	r1, [pc, #396]	; (800b084 <tcp_enqueue_flags+0x1c8>)
 800aef6:	4862      	ldr	r0, [pc, #392]	; (800b080 <tcp_enqueue_flags+0x1c4>)
 800aef8:	f004 f948 	bl	800f18c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800aefc:	78fb      	ldrb	r3, [r7, #3]
 800aefe:	f003 0302 	and.w	r3, r3, #2
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800af06:	2301      	movs	r3, #1
 800af08:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800af0a:	7ffb      	ldrb	r3, [r7, #31]
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	f003 0304 	and.w	r3, r3, #4
 800af14:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800af16:	7dfb      	ldrb	r3, [r7, #23]
 800af18:	b29b      	uxth	r3, r3
 800af1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800af1e:	4619      	mov	r1, r3
 800af20:	2036      	movs	r0, #54	; 0x36
 800af22:	f7fb f8d5 	bl	80060d0 <pbuf_alloc>
 800af26:	6138      	str	r0, [r7, #16]
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d109      	bne.n	800af42 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	8b5b      	ldrh	r3, [r3, #26]
 800af32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af36:	b29a      	uxth	r2, r3
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800af3c:	f04f 33ff 	mov.w	r3, #4294967295
 800af40:	e095      	b.n	800b06e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	895a      	ldrh	r2, [r3, #10]
 800af46:	7dfb      	ldrb	r3, [r7, #23]
 800af48:	b29b      	uxth	r3, r3
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d206      	bcs.n	800af5c <tcp_enqueue_flags+0xa0>
 800af4e:	4b4a      	ldr	r3, [pc, #296]	; (800b078 <tcp_enqueue_flags+0x1bc>)
 800af50:	f240 423a 	movw	r2, #1082	; 0x43a
 800af54:	494c      	ldr	r1, [pc, #304]	; (800b088 <tcp_enqueue_flags+0x1cc>)
 800af56:	484a      	ldr	r0, [pc, #296]	; (800b080 <tcp_enqueue_flags+0x1c4>)
 800af58:	f004 f918 	bl	800f18c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800af60:	78fa      	ldrb	r2, [r7, #3]
 800af62:	7ffb      	ldrb	r3, [r7, #31]
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	460b      	mov	r3, r1
 800af68:	6939      	ldr	r1, [r7, #16]
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7ff fd70 	bl	800aa50 <tcp_create_segment>
 800af70:	60f8      	str	r0, [r7, #12]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d109      	bne.n	800af8c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	8b5b      	ldrh	r3, [r3, #26]
 800af7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af80:	b29a      	uxth	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800af86:	f04f 33ff 	mov.w	r3, #4294967295
 800af8a:	e070      	b.n	800b06e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	f003 0303 	and.w	r3, r3, #3
 800af94:	2b00      	cmp	r3, #0
 800af96:	d006      	beq.n	800afa6 <tcp_enqueue_flags+0xea>
 800af98:	4b37      	ldr	r3, [pc, #220]	; (800b078 <tcp_enqueue_flags+0x1bc>)
 800af9a:	f240 4242 	movw	r2, #1090	; 0x442
 800af9e:	493b      	ldr	r1, [pc, #236]	; (800b08c <tcp_enqueue_flags+0x1d0>)
 800afa0:	4837      	ldr	r0, [pc, #220]	; (800b080 <tcp_enqueue_flags+0x1c4>)
 800afa2:	f004 f8f3 	bl	800f18c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	891b      	ldrh	r3, [r3, #8]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d006      	beq.n	800afbc <tcp_enqueue_flags+0x100>
 800afae:	4b32      	ldr	r3, [pc, #200]	; (800b078 <tcp_enqueue_flags+0x1bc>)
 800afb0:	f240 4243 	movw	r2, #1091	; 0x443
 800afb4:	4936      	ldr	r1, [pc, #216]	; (800b090 <tcp_enqueue_flags+0x1d4>)
 800afb6:	4832      	ldr	r0, [pc, #200]	; (800b080 <tcp_enqueue_flags+0x1c4>)
 800afb8:	f004 f8e8 	bl	800f18c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d103      	bne.n	800afcc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	66da      	str	r2, [r3, #108]	; 0x6c
 800afca:	e00d      	b.n	800afe8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afd0:	61bb      	str	r3, [r7, #24]
 800afd2:	e002      	b.n	800afda <tcp_enqueue_flags+0x11e>
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	61bb      	str	r3, [r7, #24]
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1f8      	bne.n	800afd4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800aff0:	78fb      	ldrb	r3, [r7, #3]
 800aff2:	f003 0302 	and.w	r3, r3, #2
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d104      	bne.n	800b004 <tcp_enqueue_flags+0x148>
 800affa:	78fb      	ldrb	r3, [r7, #3]
 800affc:	f003 0301 	and.w	r3, r3, #1
 800b000:	2b00      	cmp	r3, #0
 800b002:	d004      	beq.n	800b00e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b008:	1c5a      	adds	r2, r3, #1
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b00e:	78fb      	ldrb	r3, [r7, #3]
 800b010:	f003 0301 	and.w	r3, r3, #1
 800b014:	2b00      	cmp	r3, #0
 800b016:	d006      	beq.n	800b026 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	8b5b      	ldrh	r3, [r3, #26]
 800b01c:	f043 0320 	orr.w	r3, r3, #32
 800b020:	b29a      	uxth	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fb fbb8 	bl	80067a0 <pbuf_clen>
 800b030:	4603      	mov	r3, r0
 800b032:	461a      	mov	r2, r3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b03a:	4413      	add	r3, r2
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00e      	beq.n	800b06c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10a      	bne.n	800b06c <tcp_enqueue_flags+0x1b0>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d106      	bne.n	800b06c <tcp_enqueue_flags+0x1b0>
 800b05e:	4b06      	ldr	r3, [pc, #24]	; (800b078 <tcp_enqueue_flags+0x1bc>)
 800b060:	f240 4266 	movw	r2, #1126	; 0x466
 800b064:	490b      	ldr	r1, [pc, #44]	; (800b094 <tcp_enqueue_flags+0x1d8>)
 800b066:	4806      	ldr	r0, [pc, #24]	; (800b080 <tcp_enqueue_flags+0x1c4>)
 800b068:	f004 f890 	bl	800f18c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3720      	adds	r7, #32
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	08011698 	.word	0x08011698
 800b07c:	08011abc 	.word	0x08011abc
 800b080:	080116ec 	.word	0x080116ec
 800b084:	08011b14 	.word	0x08011b14
 800b088:	08011b34 	.word	0x08011b34
 800b08c:	08011b70 	.word	0x08011b70
 800b090:	08011b88 	.word	0x08011b88
 800b094:	08011bb4 	.word	0x08011bb4

0800b098 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b098:	b5b0      	push	{r4, r5, r7, lr}
 800b09a:	b08a      	sub	sp, #40	; 0x28
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d106      	bne.n	800b0b4 <tcp_output+0x1c>
 800b0a6:	4ba0      	ldr	r3, [pc, #640]	; (800b328 <tcp_output+0x290>)
 800b0a8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b0ac:	499f      	ldr	r1, [pc, #636]	; (800b32c <tcp_output+0x294>)
 800b0ae:	48a0      	ldr	r0, [pc, #640]	; (800b330 <tcp_output+0x298>)
 800b0b0:	f004 f86c 	bl	800f18c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	7d1b      	ldrb	r3, [r3, #20]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d106      	bne.n	800b0ca <tcp_output+0x32>
 800b0bc:	4b9a      	ldr	r3, [pc, #616]	; (800b328 <tcp_output+0x290>)
 800b0be:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800b0c2:	499c      	ldr	r1, [pc, #624]	; (800b334 <tcp_output+0x29c>)
 800b0c4:	489a      	ldr	r0, [pc, #616]	; (800b330 <tcp_output+0x298>)
 800b0c6:	f004 f861 	bl	800f18c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b0ca:	4b9b      	ldr	r3, [pc, #620]	; (800b338 <tcp_output+0x2a0>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d101      	bne.n	800b0d8 <tcp_output+0x40>
    return ERR_OK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	e1d2      	b.n	800b47e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d203      	bcs.n	800b0f0 <tcp_output+0x58>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b0ee:	e002      	b.n	800b0f6 <tcp_output+0x5e>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b0f6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0fc:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b100:	2b00      	cmp	r3, #0
 800b102:	d10b      	bne.n	800b11c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	8b5b      	ldrh	r3, [r3, #26]
 800b108:	f003 0302 	and.w	r3, r3, #2
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 81a9 	beq.w	800b464 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 fdd8 	bl	800bcc8 <tcp_send_empty_ack>
 800b118:	4603      	mov	r3, r0
 800b11a:	e1b0      	b.n	800b47e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b11c:	6879      	ldr	r1, [r7, #4]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	3304      	adds	r3, #4
 800b122:	461a      	mov	r2, r3
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f7ff fc77 	bl	800aa18 <tcp_route>
 800b12a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d102      	bne.n	800b138 <tcp_output+0xa0>
    return ERR_RTE;
 800b132:	f06f 0303 	mvn.w	r3, #3
 800b136:	e1a2      	b.n	800b47e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d003      	beq.n	800b146 <tcp_output+0xae>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d111      	bne.n	800b16a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <tcp_output+0xba>
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	3304      	adds	r3, #4
 800b150:	e000      	b.n	800b154 <tcp_output+0xbc>
 800b152:	2300      	movs	r3, #0
 800b154:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d102      	bne.n	800b162 <tcp_output+0xca>
      return ERR_RTE;
 800b15c:	f06f 0303 	mvn.w	r3, #3
 800b160:	e18d      	b.n	800b47e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	4618      	mov	r0, r3
 800b172:	f7fa f807 	bl	8005184 <lwip_htonl>
 800b176:	4602      	mov	r2, r0
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b17c:	1ad3      	subs	r3, r2, r3
 800b17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b180:	8912      	ldrh	r2, [r2, #8]
 800b182:	4413      	add	r3, r2
 800b184:	69ba      	ldr	r2, [r7, #24]
 800b186:	429a      	cmp	r2, r3
 800b188:	d227      	bcs.n	800b1da <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b190:	461a      	mov	r2, r3
 800b192:	69bb      	ldr	r3, [r7, #24]
 800b194:	4293      	cmp	r3, r2
 800b196:	d114      	bne.n	800b1c2 <tcp_output+0x12a>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d110      	bne.n	800b1c2 <tcp_output+0x12a>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d10b      	bne.n	800b1c2 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	8b5b      	ldrh	r3, [r3, #26]
 800b1c6:	f003 0302 	and.w	r3, r3, #2
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f000 814c 	beq.w	800b468 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fd79 	bl	800bcc8 <tcp_send_empty_ack>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	e151      	b.n	800b47e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b1e8:	6a3b      	ldr	r3, [r7, #32]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f000 811b 	beq.w	800b426 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800b1f0:	e002      	b.n	800b1f8 <tcp_output+0x160>
 800b1f2:	6a3b      	ldr	r3, [r7, #32]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	623b      	str	r3, [r7, #32]
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1f8      	bne.n	800b1f2 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b200:	e111      	b.n	800b426 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	899b      	ldrh	r3, [r3, #12]
 800b208:	b29b      	uxth	r3, r3
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7f9 ffa5 	bl	800515a <lwip_htons>
 800b210:	4603      	mov	r3, r0
 800b212:	b2db      	uxtb	r3, r3
 800b214:	f003 0304 	and.w	r3, r3, #4
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d006      	beq.n	800b22a <tcp_output+0x192>
 800b21c:	4b42      	ldr	r3, [pc, #264]	; (800b328 <tcp_output+0x290>)
 800b21e:	f240 5237 	movw	r2, #1335	; 0x537
 800b222:	4946      	ldr	r1, [pc, #280]	; (800b33c <tcp_output+0x2a4>)
 800b224:	4842      	ldr	r0, [pc, #264]	; (800b330 <tcp_output+0x298>)
 800b226:	f003 ffb1 	bl	800f18c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d01f      	beq.n	800b272 <tcp_output+0x1da>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	8b5b      	ldrh	r3, [r3, #26]
 800b236:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d119      	bne.n	800b272 <tcp_output+0x1da>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00b      	beq.n	800b25e <tcp_output+0x1c6>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d110      	bne.n	800b272 <tcp_output+0x1da>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b254:	891a      	ldrh	r2, [r3, #8]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d209      	bcs.n	800b272 <tcp_output+0x1da>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b264:	2b00      	cmp	r3, #0
 800b266:	d004      	beq.n	800b272 <tcp_output+0x1da>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b26e:	2b08      	cmp	r3, #8
 800b270:	d901      	bls.n	800b276 <tcp_output+0x1de>
 800b272:	2301      	movs	r3, #1
 800b274:	e000      	b.n	800b278 <tcp_output+0x1e0>
 800b276:	2300      	movs	r3, #0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d106      	bne.n	800b28a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	8b5b      	ldrh	r3, [r3, #26]
 800b280:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b284:	2b00      	cmp	r3, #0
 800b286:	f000 80e3 	beq.w	800b450 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	7d1b      	ldrb	r3, [r3, #20]
 800b28e:	2b02      	cmp	r3, #2
 800b290:	d00d      	beq.n	800b2ae <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	899b      	ldrh	r3, [r3, #12]
 800b298:	b29c      	uxth	r4, r3
 800b29a:	2010      	movs	r0, #16
 800b29c:	f7f9 ff5d 	bl	800515a <lwip_htons>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	4322      	orrs	r2, r4
 800b2aa:	b292      	uxth	r2, r2
 800b2ac:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b2ae:	697a      	ldr	r2, [r7, #20]
 800b2b0:	6879      	ldr	r1, [r7, #4]
 800b2b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2b4:	f000 f908 	bl	800b4c8 <tcp_output_segment>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b2bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d009      	beq.n	800b2d8 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	8b5b      	ldrh	r3, [r3, #26]
 800b2c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	835a      	strh	r2, [r3, #26]
      return err;
 800b2d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2d6:	e0d2      	b.n	800b47e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	7d1b      	ldrb	r3, [r3, #20]
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	d006      	beq.n	800b2f6 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	8b5b      	ldrh	r3, [r3, #26]
 800b2ec:	f023 0303 	bic.w	r3, r3, #3
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7f9 ff41 	bl	8005184 <lwip_htonl>
 800b302:	4604      	mov	r4, r0
 800b304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b306:	891b      	ldrh	r3, [r3, #8]
 800b308:	461d      	mov	r5, r3
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	899b      	ldrh	r3, [r3, #12]
 800b310:	b29b      	uxth	r3, r3
 800b312:	4618      	mov	r0, r3
 800b314:	f7f9 ff21 	bl	800515a <lwip_htons>
 800b318:	4603      	mov	r3, r0
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	f003 0303 	and.w	r3, r3, #3
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00d      	beq.n	800b340 <tcp_output+0x2a8>
 800b324:	2301      	movs	r3, #1
 800b326:	e00c      	b.n	800b342 <tcp_output+0x2aa>
 800b328:	08011698 	.word	0x08011698
 800b32c:	08011bdc 	.word	0x08011bdc
 800b330:	080116ec 	.word	0x080116ec
 800b334:	08011bf4 	.word	0x08011bf4
 800b338:	20006ed8 	.word	0x20006ed8
 800b33c:	08011c1c 	.word	0x08011c1c
 800b340:	2300      	movs	r3, #0
 800b342:	442b      	add	r3, r5
 800b344:	4423      	add	r3, r4
 800b346:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	2b00      	cmp	r3, #0
 800b352:	da02      	bge.n	800b35a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35c:	891b      	ldrh	r3, [r3, #8]
 800b35e:	461c      	mov	r4, r3
 800b360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	899b      	ldrh	r3, [r3, #12]
 800b366:	b29b      	uxth	r3, r3
 800b368:	4618      	mov	r0, r3
 800b36a:	f7f9 fef6 	bl	800515a <lwip_htons>
 800b36e:	4603      	mov	r3, r0
 800b370:	b2db      	uxtb	r3, r3
 800b372:	f003 0303 	and.w	r3, r3, #3
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <tcp_output+0x2e6>
 800b37a:	2301      	movs	r3, #1
 800b37c:	e000      	b.n	800b380 <tcp_output+0x2e8>
 800b37e:	2300      	movs	r3, #0
 800b380:	4423      	add	r3, r4
 800b382:	2b00      	cmp	r3, #0
 800b384:	d049      	beq.n	800b41a <tcp_output+0x382>
      seg->next = NULL;
 800b386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b390:	2b00      	cmp	r3, #0
 800b392:	d105      	bne.n	800b3a0 <tcp_output+0x308>
        pcb->unacked = seg;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b398:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39c:	623b      	str	r3, [r7, #32]
 800b39e:	e03f      	b.n	800b420 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7f9 feec 	bl	8005184 <lwip_htonl>
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	6a3b      	ldr	r3, [r7, #32]
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7f9 fee5 	bl	8005184 <lwip_htonl>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	1ae3      	subs	r3, r4, r3
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	da24      	bge.n	800b40c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	3370      	adds	r3, #112	; 0x70
 800b3c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b3c8:	e002      	b.n	800b3d0 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d011      	beq.n	800b3fc <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7f9 fecf 	bl	8005184 <lwip_htonl>
 800b3e6:	4604      	mov	r4, r0
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7f9 fec8 	bl	8005184 <lwip_htonl>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	dbe6      	blt.n	800b3ca <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b402:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b408:	601a      	str	r2, [r3, #0]
 800b40a:	e009      	b.n	800b420 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b40c:	6a3b      	ldr	r3, [r7, #32]
 800b40e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b410:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b412:	6a3b      	ldr	r3, [r7, #32]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	623b      	str	r3, [r7, #32]
 800b418:	e002      	b.n	800b420 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b41a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b41c:	f7fc fc42 	bl	8007ca4 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b424:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d012      	beq.n	800b452 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	4618      	mov	r0, r3
 800b434:	f7f9 fea6 	bl	8005184 <lwip_htonl>
 800b438:	4602      	mov	r2, r0
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b442:	8912      	ldrh	r2, [r2, #8]
 800b444:	4413      	add	r3, r2
  while (seg != NULL &&
 800b446:	69ba      	ldr	r2, [r7, #24]
 800b448:	429a      	cmp	r2, r3
 800b44a:	f4bf aeda 	bcs.w	800b202 <tcp_output+0x16a>
 800b44e:	e000      	b.n	800b452 <tcp_output+0x3ba>
      break;
 800b450:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b456:	2b00      	cmp	r3, #0
 800b458:	d108      	bne.n	800b46c <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b462:	e004      	b.n	800b46e <tcp_output+0x3d6>
    goto output_done;
 800b464:	bf00      	nop
 800b466:	e002      	b.n	800b46e <tcp_output+0x3d6>
    goto output_done;
 800b468:	bf00      	nop
 800b46a:	e000      	b.n	800b46e <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b46c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	8b5b      	ldrh	r3, [r3, #26]
 800b472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b476:	b29a      	uxth	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b47c:	2300      	movs	r3, #0
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3728      	adds	r7, #40	; 0x28
 800b482:	46bd      	mov	sp, r7
 800b484:	bdb0      	pop	{r4, r5, r7, pc}
 800b486:	bf00      	nop

0800b488 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d106      	bne.n	800b4a4 <tcp_output_segment_busy+0x1c>
 800b496:	4b09      	ldr	r3, [pc, #36]	; (800b4bc <tcp_output_segment_busy+0x34>)
 800b498:	f240 529a 	movw	r2, #1434	; 0x59a
 800b49c:	4908      	ldr	r1, [pc, #32]	; (800b4c0 <tcp_output_segment_busy+0x38>)
 800b49e:	4809      	ldr	r0, [pc, #36]	; (800b4c4 <tcp_output_segment_busy+0x3c>)
 800b4a0:	f003 fe74 	bl	800f18c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	7b9b      	ldrb	r3, [r3, #14]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d001      	beq.n	800b4b2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e000      	b.n	800b4b4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	08011698 	.word	0x08011698
 800b4c0:	08011c34 	.word	0x08011c34
 800b4c4:	080116ec 	.word	0x080116ec

0800b4c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b4c8:	b5b0      	push	{r4, r5, r7, lr}
 800b4ca:	b08c      	sub	sp, #48	; 0x30
 800b4cc:	af04      	add	r7, sp, #16
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d106      	bne.n	800b4e8 <tcp_output_segment+0x20>
 800b4da:	4b64      	ldr	r3, [pc, #400]	; (800b66c <tcp_output_segment+0x1a4>)
 800b4dc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b4e0:	4963      	ldr	r1, [pc, #396]	; (800b670 <tcp_output_segment+0x1a8>)
 800b4e2:	4864      	ldr	r0, [pc, #400]	; (800b674 <tcp_output_segment+0x1ac>)
 800b4e4:	f003 fe52 	bl	800f18c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d106      	bne.n	800b4fc <tcp_output_segment+0x34>
 800b4ee:	4b5f      	ldr	r3, [pc, #380]	; (800b66c <tcp_output_segment+0x1a4>)
 800b4f0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b4f4:	4960      	ldr	r1, [pc, #384]	; (800b678 <tcp_output_segment+0x1b0>)
 800b4f6:	485f      	ldr	r0, [pc, #380]	; (800b674 <tcp_output_segment+0x1ac>)
 800b4f8:	f003 fe48 	bl	800f18c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d106      	bne.n	800b510 <tcp_output_segment+0x48>
 800b502:	4b5a      	ldr	r3, [pc, #360]	; (800b66c <tcp_output_segment+0x1a4>)
 800b504:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b508:	495c      	ldr	r1, [pc, #368]	; (800b67c <tcp_output_segment+0x1b4>)
 800b50a:	485a      	ldr	r0, [pc, #360]	; (800b674 <tcp_output_segment+0x1ac>)
 800b50c:	f003 fe3e 	bl	800f18c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f7ff ffb9 	bl	800b488 <tcp_output_segment_busy>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d001      	beq.n	800b520 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b51c:	2300      	movs	r3, #0
 800b51e:	e0a0      	b.n	800b662 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	68dc      	ldr	r4, [r3, #12]
 800b528:	4610      	mov	r0, r2
 800b52a:	f7f9 fe2b 	bl	8005184 <lwip_htonl>
 800b52e:	4603      	mov	r3, r0
 800b530:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	68dc      	ldr	r4, [r3, #12]
 800b53a:	4610      	mov	r0, r2
 800b53c:	f7f9 fe0d 	bl	800515a <lwip_htons>
 800b540:	4603      	mov	r3, r0
 800b542:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b548:	68ba      	ldr	r2, [r7, #8]
 800b54a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b54c:	441a      	add	r2, r3
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	3314      	adds	r3, #20
 800b558:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	7a9b      	ldrb	r3, [r3, #10]
 800b55e:	f003 0301 	and.w	r3, r3, #1
 800b562:	2b00      	cmp	r3, #0
 800b564:	d015      	beq.n	800b592 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	3304      	adds	r3, #4
 800b56a:	461a      	mov	r2, r3
 800b56c:	6879      	ldr	r1, [r7, #4]
 800b56e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b572:	f7fc fe8d 	bl	8008290 <tcp_eff_send_mss_netif>
 800b576:	4603      	mov	r3, r0
 800b578:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b57a:	8b7b      	ldrh	r3, [r7, #26]
 800b57c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b580:	4618      	mov	r0, r3
 800b582:	f7f9 fdff 	bl	8005184 <lwip_htonl>
 800b586:	4602      	mov	r2, r0
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	3304      	adds	r3, #4
 800b590:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b598:	2b00      	cmp	r3, #0
 800b59a:	da02      	bge.n	800b5a2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10c      	bne.n	800b5c4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b5aa:	4b35      	ldr	r3, [pc, #212]	; (800b680 <tcp_output_segment+0x1b8>)
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7f9 fde3 	bl	8005184 <lwip_htonl>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	8959      	ldrh	r1, [r3, #10]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	8b3a      	ldrh	r2, [r7, #24]
 800b5e0:	1a8a      	subs	r2, r1, r2
 800b5e2:	b292      	uxth	r2, r2
 800b5e4:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	8919      	ldrh	r1, [r3, #8]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	8b3a      	ldrh	r2, [r7, #24]
 800b5f2:	1a8a      	subs	r2, r1, r2
 800b5f4:	b292      	uxth	r2, r2
 800b5f6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	68d2      	ldr	r2, [r2, #12]
 800b600:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	2200      	movs	r2, #0
 800b608:	741a      	strb	r2, [r3, #16]
 800b60a:	2200      	movs	r2, #0
 800b60c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	f103 0214 	add.w	r2, r3, #20
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	7a9b      	ldrb	r3, [r3, #10]
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	f003 0304 	and.w	r3, r3, #4
 800b620:	4413      	add	r3, r2
 800b622:	69fa      	ldr	r2, [r7, #28]
 800b624:	429a      	cmp	r2, r3
 800b626:	d006      	beq.n	800b636 <tcp_output_segment+0x16e>
 800b628:	4b10      	ldr	r3, [pc, #64]	; (800b66c <tcp_output_segment+0x1a4>)
 800b62a:	f240 621c 	movw	r2, #1564	; 0x61c
 800b62e:	4915      	ldr	r1, [pc, #84]	; (800b684 <tcp_output_segment+0x1bc>)
 800b630:	4810      	ldr	r0, [pc, #64]	; (800b674 <tcp_output_segment+0x1ac>)
 800b632:	f003 fdab 	bl	800f18c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6858      	ldr	r0, [r3, #4]
 800b63a:	68b9      	ldr	r1, [r7, #8]
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	1d1c      	adds	r4, r3, #4
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	7add      	ldrb	r5, [r3, #11]
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	7a9b      	ldrb	r3, [r3, #10]
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	9202      	str	r2, [sp, #8]
 800b64c:	2206      	movs	r2, #6
 800b64e:	9201      	str	r2, [sp, #4]
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	462b      	mov	r3, r5
 800b654:	4622      	mov	r2, r4
 800b656:	f002 fd2f 	bl	800e0b8 <ip4_output_if>
 800b65a:	4603      	mov	r3, r0
 800b65c:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b65e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3720      	adds	r7, #32
 800b666:	46bd      	mov	sp, r7
 800b668:	bdb0      	pop	{r4, r5, r7, pc}
 800b66a:	bf00      	nop
 800b66c:	08011698 	.word	0x08011698
 800b670:	08011c5c 	.word	0x08011c5c
 800b674:	080116ec 	.word	0x080116ec
 800b678:	08011c7c 	.word	0x08011c7c
 800b67c:	08011c9c 	.word	0x08011c9c
 800b680:	20006ec8 	.word	0x20006ec8
 800b684:	08011cc0 	.word	0x08011cc0

0800b688 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b688:	b5b0      	push	{r4, r5, r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d106      	bne.n	800b6a4 <tcp_rexmit_rto_prepare+0x1c>
 800b696:	4b31      	ldr	r3, [pc, #196]	; (800b75c <tcp_rexmit_rto_prepare+0xd4>)
 800b698:	f240 6263 	movw	r2, #1635	; 0x663
 800b69c:	4930      	ldr	r1, [pc, #192]	; (800b760 <tcp_rexmit_rto_prepare+0xd8>)
 800b69e:	4831      	ldr	r0, [pc, #196]	; (800b764 <tcp_rexmit_rto_prepare+0xdc>)
 800b6a0:	f003 fd74 	bl	800f18c <iprintf>

  if (pcb->unacked == NULL) {
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d102      	bne.n	800b6b2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b6ac:	f06f 0305 	mvn.w	r3, #5
 800b6b0:	e050      	b.n	800b754 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6b6:	60fb      	str	r3, [r7, #12]
 800b6b8:	e00b      	b.n	800b6d2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f7ff fee4 	bl	800b488 <tcp_output_segment_busy>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d002      	beq.n	800b6cc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b6c6:	f06f 0305 	mvn.w	r3, #5
 800b6ca:	e043      	b.n	800b754 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d1ef      	bne.n	800b6ba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f7ff fed4 	bl	800b488 <tcp_output_segment_busy>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d002      	beq.n	800b6ec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b6e6:	f06f 0305 	mvn.w	r3, #5
 800b6ea:	e033      	b.n	800b754 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	8b5b      	ldrh	r3, [r3, #26]
 800b706:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	4618      	mov	r0, r3
 800b718:	f7f9 fd34 	bl	8005184 <lwip_htonl>
 800b71c:	4604      	mov	r4, r0
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	891b      	ldrh	r3, [r3, #8]
 800b722:	461d      	mov	r5, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	899b      	ldrh	r3, [r3, #12]
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7f9 fd14 	bl	800515a <lwip_htons>
 800b732:	4603      	mov	r3, r0
 800b734:	b2db      	uxtb	r3, r3
 800b736:	f003 0303 	and.w	r3, r3, #3
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d001      	beq.n	800b742 <tcp_rexmit_rto_prepare+0xba>
 800b73e:	2301      	movs	r3, #1
 800b740:	e000      	b.n	800b744 <tcp_rexmit_rto_prepare+0xbc>
 800b742:	2300      	movs	r3, #0
 800b744:	442b      	add	r3, r5
 800b746:	18e2      	adds	r2, r4, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bdb0      	pop	{r4, r5, r7, pc}
 800b75c:	08011698 	.word	0x08011698
 800b760:	08011cd4 	.word	0x08011cd4
 800b764:	080116ec 	.word	0x080116ec

0800b768 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d106      	bne.n	800b784 <tcp_rexmit_rto_commit+0x1c>
 800b776:	4b0d      	ldr	r3, [pc, #52]	; (800b7ac <tcp_rexmit_rto_commit+0x44>)
 800b778:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b77c:	490c      	ldr	r1, [pc, #48]	; (800b7b0 <tcp_rexmit_rto_commit+0x48>)
 800b77e:	480d      	ldr	r0, [pc, #52]	; (800b7b4 <tcp_rexmit_rto_commit+0x4c>)
 800b780:	f003 fd04 	bl	800f18c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b78a:	2bff      	cmp	r3, #255	; 0xff
 800b78c:	d007      	beq.n	800b79e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b794:	3301      	adds	r3, #1
 800b796:	b2da      	uxtb	r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f7ff fc7a 	bl	800b098 <tcp_output>
}
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	08011698 	.word	0x08011698
 800b7b0:	08011cf8 	.word	0x08011cf8
 800b7b4:	080116ec 	.word	0x080116ec

0800b7b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d106      	bne.n	800b7d4 <tcp_rexmit_rto+0x1c>
 800b7c6:	4b0a      	ldr	r3, [pc, #40]	; (800b7f0 <tcp_rexmit_rto+0x38>)
 800b7c8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b7cc:	4909      	ldr	r1, [pc, #36]	; (800b7f4 <tcp_rexmit_rto+0x3c>)
 800b7ce:	480a      	ldr	r0, [pc, #40]	; (800b7f8 <tcp_rexmit_rto+0x40>)
 800b7d0:	f003 fcdc 	bl	800f18c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f7ff ff57 	bl	800b688 <tcp_rexmit_rto_prepare>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d102      	bne.n	800b7e6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7ff ffc1 	bl	800b768 <tcp_rexmit_rto_commit>
  }
}
 800b7e6:	bf00      	nop
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	08011698 	.word	0x08011698
 800b7f4:	08011d1c 	.word	0x08011d1c
 800b7f8:	080116ec 	.word	0x080116ec

0800b7fc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b7fc:	b590      	push	{r4, r7, lr}
 800b7fe:	b085      	sub	sp, #20
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d106      	bne.n	800b818 <tcp_rexmit+0x1c>
 800b80a:	4b2f      	ldr	r3, [pc, #188]	; (800b8c8 <tcp_rexmit+0xcc>)
 800b80c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b810:	492e      	ldr	r1, [pc, #184]	; (800b8cc <tcp_rexmit+0xd0>)
 800b812:	482f      	ldr	r0, [pc, #188]	; (800b8d0 <tcp_rexmit+0xd4>)
 800b814:	f003 fcba 	bl	800f18c <iprintf>

  if (pcb->unacked == NULL) {
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d102      	bne.n	800b826 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b820:	f06f 0305 	mvn.w	r3, #5
 800b824:	e04c      	b.n	800b8c0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b82a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b82c:	68b8      	ldr	r0, [r7, #8]
 800b82e:	f7ff fe2b 	bl	800b488 <tcp_output_segment_busy>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d002      	beq.n	800b83e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b838:	f06f 0305 	mvn.w	r3, #5
 800b83c:	e040      	b.n	800b8c0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	336c      	adds	r3, #108	; 0x6c
 800b84a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b84c:	e002      	b.n	800b854 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d011      	beq.n	800b880 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	4618      	mov	r0, r3
 800b866:	f7f9 fc8d 	bl	8005184 <lwip_htonl>
 800b86a:	4604      	mov	r4, r0
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	4618      	mov	r0, r3
 800b874:	f7f9 fc86 	bl	8005184 <lwip_htonl>
 800b878:	4603      	mov	r3, r0
 800b87a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	dbe6      	blt.n	800b84e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d103      	bne.n	800b89e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b8a4:	2bff      	cmp	r3, #255	; 0xff
 800b8a6:	d007      	beq.n	800b8b8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	b2da      	uxtb	r2, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b8be:	2300      	movs	r3, #0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3714      	adds	r7, #20
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd90      	pop	{r4, r7, pc}
 800b8c8:	08011698 	.word	0x08011698
 800b8cc:	08011d38 	.word	0x08011d38
 800b8d0:	080116ec 	.word	0x080116ec

0800b8d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d106      	bne.n	800b8f0 <tcp_rexmit_fast+0x1c>
 800b8e2:	4b2f      	ldr	r3, [pc, #188]	; (800b9a0 <tcp_rexmit_fast+0xcc>)
 800b8e4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b8e8:	492e      	ldr	r1, [pc, #184]	; (800b9a4 <tcp_rexmit_fast+0xd0>)
 800b8ea:	482f      	ldr	r0, [pc, #188]	; (800b9a8 <tcp_rexmit_fast+0xd4>)
 800b8ec:	f003 fc4e 	bl	800f18c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d04f      	beq.n	800b998 <tcp_rexmit_fast+0xc4>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	8b5b      	ldrh	r3, [r3, #26]
 800b8fc:	f003 0304 	and.w	r3, r3, #4
 800b900:	2b00      	cmp	r3, #0
 800b902:	d149      	bne.n	800b998 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7ff ff79 	bl	800b7fc <tcp_rexmit>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d143      	bne.n	800b998 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d208      	bcs.n	800b932 <tcp_rexmit_fast+0x5e>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b926:	2b00      	cmp	r3, #0
 800b928:	da00      	bge.n	800b92c <tcp_rexmit_fast+0x58>
 800b92a:	3301      	adds	r3, #1
 800b92c:	105b      	asrs	r3, r3, #1
 800b92e:	b29b      	uxth	r3, r3
 800b930:	e007      	b.n	800b942 <tcp_rexmit_fast+0x6e>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b938:	2b00      	cmp	r3, #0
 800b93a:	da00      	bge.n	800b93e <tcp_rexmit_fast+0x6a>
 800b93c:	3301      	adds	r3, #1
 800b93e:	105b      	asrs	r3, r3, #1
 800b940:	b29b      	uxth	r3, r3
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b94e:	461a      	mov	r2, r3
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b954:	005b      	lsls	r3, r3, #1
 800b956:	429a      	cmp	r2, r3
 800b958:	d206      	bcs.n	800b968 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b95e:	005b      	lsls	r3, r3, #1
 800b960:	b29a      	uxth	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b972:	4619      	mov	r1, r3
 800b974:	0049      	lsls	r1, r1, #1
 800b976:	440b      	add	r3, r1
 800b978:	b29b      	uxth	r3, r3
 800b97a:	4413      	add	r3, r2
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	8b5b      	ldrh	r3, [r3, #26]
 800b988:	f043 0304 	orr.w	r3, r3, #4
 800b98c:	b29a      	uxth	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b998:	bf00      	nop
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	08011698 	.word	0x08011698
 800b9a4:	08011d50 	.word	0x08011d50
 800b9a8:	080116ec 	.word	0x080116ec

0800b9ac <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b086      	sub	sp, #24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	607b      	str	r3, [r7, #4]
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	817b      	strh	r3, [r7, #10]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b9be:	897a      	ldrh	r2, [r7, #10]
 800b9c0:	893b      	ldrh	r3, [r7, #8]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	3314      	adds	r3, #20
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	2022      	movs	r0, #34	; 0x22
 800b9d2:	f7fa fb7d 	bl	80060d0 <pbuf_alloc>
 800b9d6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d04e      	beq.n	800ba7c <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	895b      	ldrh	r3, [r3, #10]
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	897b      	ldrh	r3, [r7, #10]
 800b9e6:	3314      	adds	r3, #20
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	da06      	bge.n	800b9fa <tcp_output_alloc_header_common+0x4e>
 800b9ec:	4b26      	ldr	r3, [pc, #152]	; (800ba88 <tcp_output_alloc_header_common+0xdc>)
 800b9ee:	f240 7224 	movw	r2, #1828	; 0x724
 800b9f2:	4926      	ldr	r1, [pc, #152]	; (800ba8c <tcp_output_alloc_header_common+0xe0>)
 800b9f4:	4826      	ldr	r0, [pc, #152]	; (800ba90 <tcp_output_alloc_header_common+0xe4>)
 800b9f6:	f003 fbc9 	bl	800f18c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ba00:	8c3b      	ldrh	r3, [r7, #32]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7f9 fba9 	bl	800515a <lwip_htons>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ba10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7f9 fba1 	bl	800515a <lwip_htons>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f7f9 fbac 	bl	8005184 <lwip_htonl>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ba32:	897b      	ldrh	r3, [r7, #10]
 800ba34:	089b      	lsrs	r3, r3, #2
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	3305      	adds	r3, #5
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	031b      	lsls	r3, r3, #12
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	4313      	orrs	r3, r2
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7f9 fb85 	bl	800515a <lwip_htons>
 800ba50:	4603      	mov	r3, r0
 800ba52:	461a      	mov	r2, r3
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ba58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7f9 fb7d 	bl	800515a <lwip_htons>
 800ba60:	4603      	mov	r3, r0
 800ba62:	461a      	mov	r2, r3
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	741a      	strb	r2, [r3, #16]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	2200      	movs	r2, #0
 800ba76:	749a      	strb	r2, [r3, #18]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ba7c:	697b      	ldr	r3, [r7, #20]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3718      	adds	r7, #24
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	08011698 	.word	0x08011698
 800ba8c:	08011d70 	.word	0x08011d70
 800ba90:	080116ec 	.word	0x080116ec

0800ba94 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ba94:	b5b0      	push	{r4, r5, r7, lr}
 800ba96:	b08a      	sub	sp, #40	; 0x28
 800ba98:	af04      	add	r7, sp, #16
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	607b      	str	r3, [r7, #4]
 800ba9e:	460b      	mov	r3, r1
 800baa0:	817b      	strh	r3, [r7, #10]
 800baa2:	4613      	mov	r3, r2
 800baa4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d106      	bne.n	800baba <tcp_output_alloc_header+0x26>
 800baac:	4b15      	ldr	r3, [pc, #84]	; (800bb04 <tcp_output_alloc_header+0x70>)
 800baae:	f240 7242 	movw	r2, #1858	; 0x742
 800bab2:	4915      	ldr	r1, [pc, #84]	; (800bb08 <tcp_output_alloc_header+0x74>)
 800bab4:	4815      	ldr	r0, [pc, #84]	; (800bb0c <tcp_output_alloc_header+0x78>)
 800bab6:	f003 fb69 	bl	800f18c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	8adb      	ldrh	r3, [r3, #22]
 800bac2:	68fa      	ldr	r2, [r7, #12]
 800bac4:	8b12      	ldrh	r2, [r2, #24]
 800bac6:	68f9      	ldr	r1, [r7, #12]
 800bac8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800baca:	893d      	ldrh	r5, [r7, #8]
 800bacc:	897c      	ldrh	r4, [r7, #10]
 800bace:	9103      	str	r1, [sp, #12]
 800bad0:	2110      	movs	r1, #16
 800bad2:	9102      	str	r1, [sp, #8]
 800bad4:	9201      	str	r2, [sp, #4]
 800bad6:	9300      	str	r3, [sp, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	462a      	mov	r2, r5
 800badc:	4621      	mov	r1, r4
 800bade:	f7ff ff65 	bl	800b9ac <tcp_output_alloc_header_common>
 800bae2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d006      	beq.n	800baf8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800baf2:	441a      	add	r2, r3
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800baf8:	697b      	ldr	r3, [r7, #20]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3718      	adds	r7, #24
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bdb0      	pop	{r4, r5, r7, pc}
 800bb02:	bf00      	nop
 800bb04:	08011698 	.word	0x08011698
 800bb08:	08011da0 	.word	0x08011da0
 800bb0c:	080116ec 	.word	0x080116ec

0800bb10 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b088      	sub	sp, #32
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	460b      	mov	r3, r1
 800bb20:	71fb      	strb	r3, [r7, #7]
 800bb22:	4613      	mov	r3, r2
 800bb24:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800bb26:	2300      	movs	r3, #0
 800bb28:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d106      	bne.n	800bb3e <tcp_output_fill_options+0x2e>
 800bb30:	4b13      	ldr	r3, [pc, #76]	; (800bb80 <tcp_output_fill_options+0x70>)
 800bb32:	f240 7256 	movw	r2, #1878	; 0x756
 800bb36:	4913      	ldr	r1, [pc, #76]	; (800bb84 <tcp_output_fill_options+0x74>)
 800bb38:	4813      	ldr	r0, [pc, #76]	; (800bb88 <tcp_output_fill_options+0x78>)
 800bb3a:	f003 fb27 	bl	800f18c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	3314      	adds	r3, #20
 800bb48:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	f103 0214 	add.w	r2, r3, #20
 800bb50:	8bfb      	ldrh	r3, [r7, #30]
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	4619      	mov	r1, r3
 800bb56:	79fb      	ldrb	r3, [r7, #7]
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	f003 0304 	and.w	r3, r3, #4
 800bb5e:	440b      	add	r3, r1
 800bb60:	4413      	add	r3, r2
 800bb62:	697a      	ldr	r2, [r7, #20]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d006      	beq.n	800bb76 <tcp_output_fill_options+0x66>
 800bb68:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <tcp_output_fill_options+0x70>)
 800bb6a:	f240 7275 	movw	r2, #1909	; 0x775
 800bb6e:	4907      	ldr	r1, [pc, #28]	; (800bb8c <tcp_output_fill_options+0x7c>)
 800bb70:	4805      	ldr	r0, [pc, #20]	; (800bb88 <tcp_output_fill_options+0x78>)
 800bb72:	f003 fb0b 	bl	800f18c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800bb76:	bf00      	nop
 800bb78:	3720      	adds	r7, #32
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	08011698 	.word	0x08011698
 800bb84:	08011dc8 	.word	0x08011dc8
 800bb88:	080116ec 	.word	0x080116ec
 800bb8c:	08011cc0 	.word	0x08011cc0

0800bb90 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b08a      	sub	sp, #40	; 0x28
 800bb94:	af04      	add	r7, sp, #16
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
 800bb9c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d106      	bne.n	800bbb2 <tcp_output_control_segment+0x22>
 800bba4:	4b1c      	ldr	r3, [pc, #112]	; (800bc18 <tcp_output_control_segment+0x88>)
 800bba6:	f240 7287 	movw	r2, #1927	; 0x787
 800bbaa:	491c      	ldr	r1, [pc, #112]	; (800bc1c <tcp_output_control_segment+0x8c>)
 800bbac:	481c      	ldr	r0, [pc, #112]	; (800bc20 <tcp_output_control_segment+0x90>)
 800bbae:	f003 faed 	bl	800f18c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800bbb2:	683a      	ldr	r2, [r7, #0]
 800bbb4:	6879      	ldr	r1, [r7, #4]
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f7fe ff2e 	bl	800aa18 <tcp_route>
 800bbbc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d102      	bne.n	800bbca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800bbc4:	23fc      	movs	r3, #252	; 0xfc
 800bbc6:	75fb      	strb	r3, [r7, #23]
 800bbc8:	e01c      	b.n	800bc04 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d006      	beq.n	800bbde <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	7adb      	ldrb	r3, [r3, #11]
 800bbd4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	7a9b      	ldrb	r3, [r3, #10]
 800bbda:	757b      	strb	r3, [r7, #21]
 800bbdc:	e003      	b.n	800bbe6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800bbde:	23ff      	movs	r3, #255	; 0xff
 800bbe0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800bbe6:	7dba      	ldrb	r2, [r7, #22]
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	9302      	str	r3, [sp, #8]
 800bbec:	2306      	movs	r3, #6
 800bbee:	9301      	str	r3, [sp, #4]
 800bbf0:	7d7b      	ldrb	r3, [r7, #21]
 800bbf2:	9300      	str	r3, [sp, #0]
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	6879      	ldr	r1, [r7, #4]
 800bbfa:	68b8      	ldr	r0, [r7, #8]
 800bbfc:	f002 fa5c 	bl	800e0b8 <ip4_output_if>
 800bc00:	4603      	mov	r3, r0
 800bc02:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800bc04:	68b8      	ldr	r0, [r7, #8]
 800bc06:	f7fa fd43 	bl	8006690 <pbuf_free>
  return err;
 800bc0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3718      	adds	r7, #24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	08011698 	.word	0x08011698
 800bc1c:	08011df0 	.word	0x08011df0
 800bc20:	080116ec 	.word	0x080116ec

0800bc24 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800bc24:	b590      	push	{r4, r7, lr}
 800bc26:	b08b      	sub	sp, #44	; 0x2c
 800bc28:	af04      	add	r7, sp, #16
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
 800bc30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d106      	bne.n	800bc46 <tcp_rst+0x22>
 800bc38:	4b1f      	ldr	r3, [pc, #124]	; (800bcb8 <tcp_rst+0x94>)
 800bc3a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800bc3e:	491f      	ldr	r1, [pc, #124]	; (800bcbc <tcp_rst+0x98>)
 800bc40:	481f      	ldr	r0, [pc, #124]	; (800bcc0 <tcp_rst+0x9c>)
 800bc42:	f003 faa3 	bl	800f18c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d106      	bne.n	800bc5a <tcp_rst+0x36>
 800bc4c:	4b1a      	ldr	r3, [pc, #104]	; (800bcb8 <tcp_rst+0x94>)
 800bc4e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800bc52:	491c      	ldr	r1, [pc, #112]	; (800bcc4 <tcp_rst+0xa0>)
 800bc54:	481a      	ldr	r0, [pc, #104]	; (800bcc0 <tcp_rst+0x9c>)
 800bc56:	f003 fa99 	bl	800f18c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800bc5e:	f246 0308 	movw	r3, #24584	; 0x6008
 800bc62:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bc64:	7dfb      	ldrb	r3, [r7, #23]
 800bc66:	b29c      	uxth	r4, r3
 800bc68:	68b8      	ldr	r0, [r7, #8]
 800bc6a:	f7f9 fa8b 	bl	8005184 <lwip_htonl>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	8abb      	ldrh	r3, [r7, #20]
 800bc72:	9303      	str	r3, [sp, #12]
 800bc74:	2314      	movs	r3, #20
 800bc76:	9302      	str	r3, [sp, #8]
 800bc78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bc7a:	9301      	str	r3, [sp, #4]
 800bc7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bc7e:	9300      	str	r3, [sp, #0]
 800bc80:	4613      	mov	r3, r2
 800bc82:	2200      	movs	r2, #0
 800bc84:	4621      	mov	r1, r4
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7ff fe90 	bl	800b9ac <tcp_output_alloc_header_common>
 800bc8c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00c      	beq.n	800bcae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bc94:	7dfb      	ldrb	r3, [r7, #23]
 800bc96:	2200      	movs	r2, #0
 800bc98:	6939      	ldr	r1, [r7, #16]
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f7ff ff38 	bl	800bb10 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca2:	683a      	ldr	r2, [r7, #0]
 800bca4:	6939      	ldr	r1, [r7, #16]
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f7ff ff72 	bl	800bb90 <tcp_output_control_segment>
 800bcac:	e000      	b.n	800bcb0 <tcp_rst+0x8c>
    return;
 800bcae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bcb0:	371c      	adds	r7, #28
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd90      	pop	{r4, r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	08011698 	.word	0x08011698
 800bcbc:	08011e1c 	.word	0x08011e1c
 800bcc0:	080116ec 	.word	0x080116ec
 800bcc4:	08011e38 	.word	0x08011e38

0800bcc8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bcc8:	b590      	push	{r4, r7, lr}
 800bcca:	b087      	sub	sp, #28
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d106      	bne.n	800bcec <tcp_send_empty_ack+0x24>
 800bcde:	4b28      	ldr	r3, [pc, #160]	; (800bd80 <tcp_send_empty_ack+0xb8>)
 800bce0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800bce4:	4927      	ldr	r1, [pc, #156]	; (800bd84 <tcp_send_empty_ack+0xbc>)
 800bce6:	4828      	ldr	r0, [pc, #160]	; (800bd88 <tcp_send_empty_ack+0xc0>)
 800bce8:	f003 fa50 	bl	800f18c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bcec:	7dfb      	ldrb	r3, [r7, #23]
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	f003 0304 	and.w	r3, r3, #4
 800bcf6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bcf8:	7d7b      	ldrb	r3, [r7, #21]
 800bcfa:	b29c      	uxth	r4, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7f9 fa3f 	bl	8005184 <lwip_htonl>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2200      	movs	r2, #0
 800bd0a:	4621      	mov	r1, r4
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f7ff fec1 	bl	800ba94 <tcp_output_alloc_header>
 800bd12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d109      	bne.n	800bd2e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	8b5b      	ldrh	r3, [r3, #26]
 800bd1e:	f043 0303 	orr.w	r3, r3, #3
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bd28:	f06f 0301 	mvn.w	r3, #1
 800bd2c:	e023      	b.n	800bd76 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800bd2e:	7dbb      	ldrb	r3, [r7, #22]
 800bd30:	7dfa      	ldrb	r2, [r7, #23]
 800bd32:	6939      	ldr	r1, [r7, #16]
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f7ff feeb 	bl	800bb10 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	3304      	adds	r3, #4
 800bd40:	6939      	ldr	r1, [r7, #16]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f7ff ff24 	bl	800bb90 <tcp_output_control_segment>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bd4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d007      	beq.n	800bd64 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	8b5b      	ldrh	r3, [r3, #26]
 800bd58:	f043 0303 	orr.w	r3, r3, #3
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	835a      	strh	r2, [r3, #26]
 800bd62:	e006      	b.n	800bd72 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	8b5b      	ldrh	r3, [r3, #26]
 800bd68:	f023 0303 	bic.w	r3, r3, #3
 800bd6c:	b29a      	uxth	r2, r3
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800bd72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	371c      	adds	r7, #28
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd90      	pop	{r4, r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	08011698 	.word	0x08011698
 800bd84:	08011e54 	.word	0x08011e54
 800bd88:	080116ec 	.word	0x080116ec

0800bd8c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800bd8c:	b590      	push	{r4, r7, lr}
 800bd8e:	b087      	sub	sp, #28
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bd94:	2300      	movs	r3, #0
 800bd96:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d106      	bne.n	800bdac <tcp_keepalive+0x20>
 800bd9e:	4b18      	ldr	r3, [pc, #96]	; (800be00 <tcp_keepalive+0x74>)
 800bda0:	f640 0224 	movw	r2, #2084	; 0x824
 800bda4:	4917      	ldr	r1, [pc, #92]	; (800be04 <tcp_keepalive+0x78>)
 800bda6:	4818      	ldr	r0, [pc, #96]	; (800be08 <tcp_keepalive+0x7c>)
 800bda8:	f003 f9f0 	bl	800f18c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800bdac:	7dfb      	ldrb	r3, [r7, #23]
 800bdae:	b29c      	uxth	r4, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7f9 f9e4 	bl	8005184 <lwip_htonl>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	4621      	mov	r1, r4
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f7ff fe66 	bl	800ba94 <tcp_output_alloc_header>
 800bdc8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d102      	bne.n	800bdd6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800bdd0:	f04f 33ff 	mov.w	r3, #4294967295
 800bdd4:	e010      	b.n	800bdf8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bdd6:	7dfb      	ldrb	r3, [r7, #23]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	6939      	ldr	r1, [r7, #16]
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f7ff fe97 	bl	800bb10 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	3304      	adds	r3, #4
 800bde8:	6939      	ldr	r1, [r7, #16]
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f7ff fed0 	bl	800bb90 <tcp_output_control_segment>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bdf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	371c      	adds	r7, #28
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd90      	pop	{r4, r7, pc}
 800be00:	08011698 	.word	0x08011698
 800be04:	08011e74 	.word	0x08011e74
 800be08:	080116ec 	.word	0x080116ec

0800be0c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800be0c:	b590      	push	{r4, r7, lr}
 800be0e:	b08b      	sub	sp, #44	; 0x2c
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800be14:	2300      	movs	r3, #0
 800be16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d106      	bne.n	800be2e <tcp_zero_window_probe+0x22>
 800be20:	4b4c      	ldr	r3, [pc, #304]	; (800bf54 <tcp_zero_window_probe+0x148>)
 800be22:	f640 024f 	movw	r2, #2127	; 0x84f
 800be26:	494c      	ldr	r1, [pc, #304]	; (800bf58 <tcp_zero_window_probe+0x14c>)
 800be28:	484c      	ldr	r0, [pc, #304]	; (800bf5c <tcp_zero_window_probe+0x150>)
 800be2a:	f003 f9af 	bl	800f18c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be32:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800be34:	6a3b      	ldr	r3, [r7, #32]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d101      	bne.n	800be3e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800be3a:	2300      	movs	r3, #0
 800be3c:	e086      	b.n	800bf4c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800be44:	2bff      	cmp	r3, #255	; 0xff
 800be46:	d007      	beq.n	800be58 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800be4e:	3301      	adds	r3, #1
 800be50:	b2da      	uxtb	r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800be58:	6a3b      	ldr	r3, [r7, #32]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	899b      	ldrh	r3, [r3, #12]
 800be5e:	b29b      	uxth	r3, r3
 800be60:	4618      	mov	r0, r3
 800be62:	f7f9 f97a 	bl	800515a <lwip_htons>
 800be66:	4603      	mov	r3, r0
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	f003 0301 	and.w	r3, r3, #1
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d005      	beq.n	800be7e <tcp_zero_window_probe+0x72>
 800be72:	6a3b      	ldr	r3, [r7, #32]
 800be74:	891b      	ldrh	r3, [r3, #8]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d101      	bne.n	800be7e <tcp_zero_window_probe+0x72>
 800be7a:	2301      	movs	r3, #1
 800be7c:	e000      	b.n	800be80 <tcp_zero_window_probe+0x74>
 800be7e:	2300      	movs	r3, #0
 800be80:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800be82:	7ffb      	ldrb	r3, [r7, #31]
 800be84:	2b00      	cmp	r3, #0
 800be86:	bf0c      	ite	eq
 800be88:	2301      	moveq	r3, #1
 800be8a:	2300      	movne	r3, #0
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800be90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be94:	b299      	uxth	r1, r3
 800be96:	6a3b      	ldr	r3, [r7, #32]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	8bba      	ldrh	r2, [r7, #28]
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f7ff fdf8 	bl	800ba94 <tcp_output_alloc_header>
 800bea4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d102      	bne.n	800beb2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800beac:	f04f 33ff 	mov.w	r3, #4294967295
 800beb0:	e04c      	b.n	800bf4c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800beb8:	7ffb      	ldrb	r3, [r7, #31]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d011      	beq.n	800bee2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	899b      	ldrh	r3, [r3, #12]
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	b21b      	sxth	r3, r3
 800bec6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800beca:	b21c      	sxth	r4, r3
 800becc:	2011      	movs	r0, #17
 800bece:	f7f9 f944 	bl	800515a <lwip_htons>
 800bed2:	4603      	mov	r3, r0
 800bed4:	b21b      	sxth	r3, r3
 800bed6:	4323      	orrs	r3, r4
 800bed8:	b21b      	sxth	r3, r3
 800beda:	b29a      	uxth	r2, r3
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	819a      	strh	r2, [r3, #12]
 800bee0:	e010      	b.n	800bf04 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	3314      	adds	r3, #20
 800bee8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800beea:	6a3b      	ldr	r3, [r7, #32]
 800beec:	6858      	ldr	r0, [r3, #4]
 800beee:	6a3b      	ldr	r3, [r7, #32]
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	891a      	ldrh	r2, [r3, #8]
 800bef4:	6a3b      	ldr	r3, [r7, #32]
 800bef6:	891b      	ldrh	r3, [r3, #8]
 800bef8:	1ad3      	subs	r3, r2, r3
 800befa:	b29b      	uxth	r3, r3
 800befc:	2201      	movs	r2, #1
 800befe:	6939      	ldr	r1, [r7, #16]
 800bf00:	f7fa fdc0 	bl	8006a84 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bf04:	6a3b      	ldr	r3, [r7, #32]
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7f9 f93a 	bl	8005184 <lwip_htonl>
 800bf10:	4603      	mov	r3, r0
 800bf12:	3301      	adds	r3, #1
 800bf14:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	da02      	bge.n	800bf28 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bf28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	69b9      	ldr	r1, [r7, #24]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f7ff fded 	bl	800bb10 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	3304      	adds	r3, #4
 800bf3c:	69b9      	ldr	r1, [r7, #24]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f7ff fe26 	bl	800bb90 <tcp_output_control_segment>
 800bf44:	4603      	mov	r3, r0
 800bf46:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bf48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	372c      	adds	r7, #44	; 0x2c
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd90      	pop	{r4, r7, pc}
 800bf54:	08011698 	.word	0x08011698
 800bf58:	08011e90 	.word	0x08011e90
 800bf5c:	080116ec 	.word	0x080116ec

0800bf60 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bf68:	f7fa ff0c 	bl	8006d84 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bf6c:	4b0a      	ldr	r3, [pc, #40]	; (800bf98 <tcpip_tcp_timer+0x38>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d103      	bne.n	800bf7c <tcpip_tcp_timer+0x1c>
 800bf74:	4b09      	ldr	r3, [pc, #36]	; (800bf9c <tcpip_tcp_timer+0x3c>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d005      	beq.n	800bf88 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	4908      	ldr	r1, [pc, #32]	; (800bfa0 <tcpip_tcp_timer+0x40>)
 800bf80:	20fa      	movs	r0, #250	; 0xfa
 800bf82:	f000 f8f1 	bl	800c168 <sys_timeout>
 800bf86:	e002      	b.n	800bf8e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bf88:	4b06      	ldr	r3, [pc, #24]	; (800bfa4 <tcpip_tcp_timer+0x44>)
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	601a      	str	r2, [r3, #0]
  }
}
 800bf8e:	bf00      	nop
 800bf90:	3708      	adds	r7, #8
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	20006ec4 	.word	0x20006ec4
 800bf9c:	20006ed4 	.word	0x20006ed4
 800bfa0:	0800bf61 	.word	0x0800bf61
 800bfa4:	200002a4 	.word	0x200002a4

0800bfa8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bfac:	4b0a      	ldr	r3, [pc, #40]	; (800bfd8 <tcp_timer_needed+0x30>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d10f      	bne.n	800bfd4 <tcp_timer_needed+0x2c>
 800bfb4:	4b09      	ldr	r3, [pc, #36]	; (800bfdc <tcp_timer_needed+0x34>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d103      	bne.n	800bfc4 <tcp_timer_needed+0x1c>
 800bfbc:	4b08      	ldr	r3, [pc, #32]	; (800bfe0 <tcp_timer_needed+0x38>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d007      	beq.n	800bfd4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bfc4:	4b04      	ldr	r3, [pc, #16]	; (800bfd8 <tcp_timer_needed+0x30>)
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bfca:	2200      	movs	r2, #0
 800bfcc:	4905      	ldr	r1, [pc, #20]	; (800bfe4 <tcp_timer_needed+0x3c>)
 800bfce:	20fa      	movs	r0, #250	; 0xfa
 800bfd0:	f000 f8ca 	bl	800c168 <sys_timeout>
  }
}
 800bfd4:	bf00      	nop
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	200002a4 	.word	0x200002a4
 800bfdc:	20006ec4 	.word	0x20006ec4
 800bfe0:	20006ed4 	.word	0x20006ed4
 800bfe4:	0800bf61 	.word	0x0800bf61

0800bfe8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b086      	sub	sp, #24
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bff4:	2006      	movs	r0, #6
 800bff6:	f7f9 fd05 	bl	8005a04 <memp_malloc>
 800bffa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d109      	bne.n	800c016 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d151      	bne.n	800c0ac <sys_timeout_abs+0xc4>
 800c008:	4b2a      	ldr	r3, [pc, #168]	; (800c0b4 <sys_timeout_abs+0xcc>)
 800c00a:	22be      	movs	r2, #190	; 0xbe
 800c00c:	492a      	ldr	r1, [pc, #168]	; (800c0b8 <sys_timeout_abs+0xd0>)
 800c00e:	482b      	ldr	r0, [pc, #172]	; (800c0bc <sys_timeout_abs+0xd4>)
 800c010:	f003 f8bc 	bl	800f18c <iprintf>
    return;
 800c014:	e04a      	b.n	800c0ac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	2200      	movs	r2, #0
 800c01a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	68ba      	ldr	r2, [r7, #8]
 800c020:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c02e:	4b24      	ldr	r3, [pc, #144]	; (800c0c0 <sys_timeout_abs+0xd8>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d103      	bne.n	800c03e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c036:	4a22      	ldr	r2, [pc, #136]	; (800c0c0 <sys_timeout_abs+0xd8>)
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	6013      	str	r3, [r2, #0]
    return;
 800c03c:	e037      	b.n	800c0ae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	685a      	ldr	r2, [r3, #4]
 800c042:	4b1f      	ldr	r3, [pc, #124]	; (800c0c0 <sys_timeout_abs+0xd8>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	0fdb      	lsrs	r3, r3, #31
 800c04c:	f003 0301 	and.w	r3, r3, #1
 800c050:	b2db      	uxtb	r3, r3
 800c052:	2b00      	cmp	r3, #0
 800c054:	d007      	beq.n	800c066 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c056:	4b1a      	ldr	r3, [pc, #104]	; (800c0c0 <sys_timeout_abs+0xd8>)
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c05e:	4a18      	ldr	r2, [pc, #96]	; (800c0c0 <sys_timeout_abs+0xd8>)
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	6013      	str	r3, [r2, #0]
 800c064:	e023      	b.n	800c0ae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c066:	4b16      	ldr	r3, [pc, #88]	; (800c0c0 <sys_timeout_abs+0xd8>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	617b      	str	r3, [r7, #20]
 800c06c:	e01a      	b.n	800c0a4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00b      	beq.n	800c08e <sys_timeout_abs+0xa6>
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	685a      	ldr	r2, [r3, #4]
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	0fdb      	lsrs	r3, r3, #31
 800c084:	f003 0301 	and.w	r3, r3, #1
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d007      	beq.n	800c09e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	601a      	str	r2, [r3, #0]
        break;
 800c09c:	e007      	b.n	800c0ae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	617b      	str	r3, [r7, #20]
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d1e1      	bne.n	800c06e <sys_timeout_abs+0x86>
 800c0aa:	e000      	b.n	800c0ae <sys_timeout_abs+0xc6>
    return;
 800c0ac:	bf00      	nop
      }
    }
  }
}
 800c0ae:	3718      	adds	r7, #24
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	08011eb4 	.word	0x08011eb4
 800c0b8:	08011ee8 	.word	0x08011ee8
 800c0bc:	08011f28 	.word	0x08011f28
 800c0c0:	2000029c 	.word	0x2000029c

0800c0c4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	4798      	blx	r3

  now = sys_now();
 800c0d6:	f7f9 f839 	bl	800514c <sys_now>
 800c0da:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	4b0f      	ldr	r3, [pc, #60]	; (800c120 <lwip_cyclic_timer+0x5c>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	1ad3      	subs	r3, r2, r3
 800c0ee:	0fdb      	lsrs	r3, r3, #31
 800c0f0:	f003 0301 	and.w	r3, r3, #1
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d009      	beq.n	800c10e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	4413      	add	r3, r2
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	4907      	ldr	r1, [pc, #28]	; (800c124 <lwip_cyclic_timer+0x60>)
 800c106:	4618      	mov	r0, r3
 800c108:	f7ff ff6e 	bl	800bfe8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c10c:	e004      	b.n	800c118 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	4904      	ldr	r1, [pc, #16]	; (800c124 <lwip_cyclic_timer+0x60>)
 800c112:	68f8      	ldr	r0, [r7, #12]
 800c114:	f7ff ff68 	bl	800bfe8 <sys_timeout_abs>
}
 800c118:	bf00      	nop
 800c11a:	3718      	adds	r7, #24
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	200002a0 	.word	0x200002a0
 800c124:	0800c0c5 	.word	0x0800c0c5

0800c128 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c12e:	2301      	movs	r3, #1
 800c130:	607b      	str	r3, [r7, #4]
 800c132:	e00e      	b.n	800c152 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c134:	4a0a      	ldr	r2, [pc, #40]	; (800c160 <sys_timeouts_init+0x38>)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	00db      	lsls	r3, r3, #3
 800c140:	4a07      	ldr	r2, [pc, #28]	; (800c160 <sys_timeouts_init+0x38>)
 800c142:	4413      	add	r3, r2
 800c144:	461a      	mov	r2, r3
 800c146:	4907      	ldr	r1, [pc, #28]	; (800c164 <sys_timeouts_init+0x3c>)
 800c148:	f000 f80e 	bl	800c168 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	3301      	adds	r3, #1
 800c150:	607b      	str	r3, [r7, #4]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2b02      	cmp	r3, #2
 800c156:	d9ed      	bls.n	800c134 <sys_timeouts_init+0xc>
  }
}
 800c158:	bf00      	nop
 800c15a:	3708      	adds	r7, #8
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	08012a94 	.word	0x08012a94
 800c164:	0800c0c5 	.word	0x0800c0c5

0800c168 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b086      	sub	sp, #24
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c17a:	d306      	bcc.n	800c18a <sys_timeout+0x22>
 800c17c:	4b0a      	ldr	r3, [pc, #40]	; (800c1a8 <sys_timeout+0x40>)
 800c17e:	f240 1229 	movw	r2, #297	; 0x129
 800c182:	490a      	ldr	r1, [pc, #40]	; (800c1ac <sys_timeout+0x44>)
 800c184:	480a      	ldr	r0, [pc, #40]	; (800c1b0 <sys_timeout+0x48>)
 800c186:	f003 f801 	bl	800f18c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c18a:	f7f8 ffdf 	bl	800514c <sys_now>
 800c18e:	4602      	mov	r2, r0
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	4413      	add	r3, r2
 800c194:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	68b9      	ldr	r1, [r7, #8]
 800c19a:	6978      	ldr	r0, [r7, #20]
 800c19c:	f7ff ff24 	bl	800bfe8 <sys_timeout_abs>
#endif
}
 800c1a0:	bf00      	nop
 800c1a2:	3718      	adds	r7, #24
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	08011eb4 	.word	0x08011eb4
 800c1ac:	08011f50 	.word	0x08011f50
 800c1b0:	08011f28 	.word	0x08011f28

0800c1b4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c1ba:	f7f8 ffc7 	bl	800514c <sys_now>
 800c1be:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c1c0:	4b1a      	ldr	r3, [pc, #104]	; (800c22c <sys_check_timeouts+0x78>)
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d001      	beq.n	800c1ce <sys_check_timeouts+0x1a>
 800c1ca:	f7f9 ff2b 	bl	8006024 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c1ce:	4b18      	ldr	r3, [pc, #96]	; (800c230 <sys_check_timeouts+0x7c>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d022      	beq.n	800c220 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	68fa      	ldr	r2, [r7, #12]
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	0fdb      	lsrs	r3, r3, #31
 800c1e4:	f003 0301 	and.w	r3, r3, #1
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d11a      	bne.n	800c224 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a0f      	ldr	r2, [pc, #60]	; (800c230 <sys_check_timeouts+0x7c>)
 800c1f4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	68db      	ldr	r3, [r3, #12]
 800c200:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	4a0b      	ldr	r2, [pc, #44]	; (800c234 <sys_check_timeouts+0x80>)
 800c208:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c20a:	68b9      	ldr	r1, [r7, #8]
 800c20c:	2006      	movs	r0, #6
 800c20e:	f7f9 fc45 	bl	8005a9c <memp_free>
    if (handler != NULL) {
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d0d3      	beq.n	800c1c0 <sys_check_timeouts+0xc>
      handler(arg);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6838      	ldr	r0, [r7, #0]
 800c21c:	4798      	blx	r3
  do {
 800c21e:	e7cf      	b.n	800c1c0 <sys_check_timeouts+0xc>
      return;
 800c220:	bf00      	nop
 800c222:	e000      	b.n	800c226 <sys_check_timeouts+0x72>
      return;
 800c224:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	20006ebc 	.word	0x20006ebc
 800c230:	2000029c 	.word	0x2000029c
 800c234:	200002a0 	.word	0x200002a0

0800c238 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c23c:	f002 ffbe 	bl	800f1bc <rand>
 800c240:	4603      	mov	r3, r0
 800c242:	b29b      	uxth	r3, r3
 800c244:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c248:	b29b      	uxth	r3, r3
 800c24a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c24e:	b29a      	uxth	r2, r3
 800c250:	4b01      	ldr	r3, [pc, #4]	; (800c258 <udp_init+0x20>)
 800c252:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c254:	bf00      	nop
 800c256:	bd80      	pop	{r7, pc}
 800c258:	20000078 	.word	0x20000078

0800c25c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800c262:	2300      	movs	r3, #0
 800c264:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c266:	4b17      	ldr	r3, [pc, #92]	; (800c2c4 <udp_new_port+0x68>)
 800c268:	881b      	ldrh	r3, [r3, #0]
 800c26a:	1c5a      	adds	r2, r3, #1
 800c26c:	b291      	uxth	r1, r2
 800c26e:	4a15      	ldr	r2, [pc, #84]	; (800c2c4 <udp_new_port+0x68>)
 800c270:	8011      	strh	r1, [r2, #0]
 800c272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c276:	4293      	cmp	r3, r2
 800c278:	d103      	bne.n	800c282 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c27a:	4b12      	ldr	r3, [pc, #72]	; (800c2c4 <udp_new_port+0x68>)
 800c27c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c280:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c282:	4b11      	ldr	r3, [pc, #68]	; (800c2c8 <udp_new_port+0x6c>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	603b      	str	r3, [r7, #0]
 800c288:	e011      	b.n	800c2ae <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	8a5a      	ldrh	r2, [r3, #18]
 800c28e:	4b0d      	ldr	r3, [pc, #52]	; (800c2c4 <udp_new_port+0x68>)
 800c290:	881b      	ldrh	r3, [r3, #0]
 800c292:	429a      	cmp	r2, r3
 800c294:	d108      	bne.n	800c2a8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c296:	88fb      	ldrh	r3, [r7, #6]
 800c298:	3301      	adds	r3, #1
 800c29a:	80fb      	strh	r3, [r7, #6]
 800c29c:	88fb      	ldrh	r3, [r7, #6]
 800c29e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2a2:	d3e0      	bcc.n	800c266 <udp_new_port+0xa>
        return 0;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	e007      	b.n	800c2b8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	603b      	str	r3, [r7, #0]
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d1ea      	bne.n	800c28a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800c2b4:	4b03      	ldr	r3, [pc, #12]	; (800c2c4 <udp_new_port+0x68>)
 800c2b6:	881b      	ldrh	r3, [r3, #0]
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr
 800c2c4:	20000078 	.word	0x20000078
 800c2c8:	20006edc 	.word	0x20006edc

0800c2cc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d105      	bne.n	800c2ec <udp_input_local_match+0x20>
 800c2e0:	4b27      	ldr	r3, [pc, #156]	; (800c380 <udp_input_local_match+0xb4>)
 800c2e2:	2287      	movs	r2, #135	; 0x87
 800c2e4:	4927      	ldr	r1, [pc, #156]	; (800c384 <udp_input_local_match+0xb8>)
 800c2e6:	4828      	ldr	r0, [pc, #160]	; (800c388 <udp_input_local_match+0xbc>)
 800c2e8:	f002 ff50 	bl	800f18c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d105      	bne.n	800c2fe <udp_input_local_match+0x32>
 800c2f2:	4b23      	ldr	r3, [pc, #140]	; (800c380 <udp_input_local_match+0xb4>)
 800c2f4:	2288      	movs	r2, #136	; 0x88
 800c2f6:	4925      	ldr	r1, [pc, #148]	; (800c38c <udp_input_local_match+0xc0>)
 800c2f8:	4823      	ldr	r0, [pc, #140]	; (800c388 <udp_input_local_match+0xbc>)
 800c2fa:	f002 ff47 	bl	800f18c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	7a1b      	ldrb	r3, [r3, #8]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00b      	beq.n	800c31e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	7a1a      	ldrb	r2, [r3, #8]
 800c30a:	4b21      	ldr	r3, [pc, #132]	; (800c390 <udp_input_local_match+0xc4>)
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c312:	3301      	adds	r3, #1
 800c314:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c316:	429a      	cmp	r2, r3
 800c318:	d001      	beq.n	800c31e <udp_input_local_match+0x52>
    return 0;
 800c31a:	2300      	movs	r3, #0
 800c31c:	e02b      	b.n	800c376 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c31e:	79fb      	ldrb	r3, [r7, #7]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d018      	beq.n	800c356 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d013      	beq.n	800c352 <udp_input_local_match+0x86>
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d00f      	beq.n	800c352 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c332:	4b17      	ldr	r3, [pc, #92]	; (800c390 <udp_input_local_match+0xc4>)
 800c334:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c33a:	d00a      	beq.n	800c352 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	4b13      	ldr	r3, [pc, #76]	; (800c390 <udp_input_local_match+0xc4>)
 800c342:	695b      	ldr	r3, [r3, #20]
 800c344:	405a      	eors	r2, r3
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	3308      	adds	r3, #8
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d110      	bne.n	800c374 <udp_input_local_match+0xa8>
          return 1;
 800c352:	2301      	movs	r3, #1
 800c354:	e00f      	b.n	800c376 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d009      	beq.n	800c370 <udp_input_local_match+0xa4>
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d005      	beq.n	800c370 <udp_input_local_match+0xa4>
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	4b09      	ldr	r3, [pc, #36]	; (800c390 <udp_input_local_match+0xc4>)
 800c36a:	695b      	ldr	r3, [r3, #20]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d101      	bne.n	800c374 <udp_input_local_match+0xa8>
        return 1;
 800c370:	2301      	movs	r3, #1
 800c372:	e000      	b.n	800c376 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c374:	2300      	movs	r3, #0
}
 800c376:	4618      	mov	r0, r3
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	08011f9c 	.word	0x08011f9c
 800c384:	08011fcc 	.word	0x08011fcc
 800c388:	08011ff0 	.word	0x08011ff0
 800c38c:	08012018 	.word	0x08012018
 800c390:	20003980 	.word	0x20003980

0800c394 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c394:	b590      	push	{r4, r7, lr}
 800c396:	b08d      	sub	sp, #52	; 0x34
 800c398:	af02      	add	r7, sp, #8
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d105      	bne.n	800c3b4 <udp_input+0x20>
 800c3a8:	4b7c      	ldr	r3, [pc, #496]	; (800c59c <udp_input+0x208>)
 800c3aa:	22cf      	movs	r2, #207	; 0xcf
 800c3ac:	497c      	ldr	r1, [pc, #496]	; (800c5a0 <udp_input+0x20c>)
 800c3ae:	487d      	ldr	r0, [pc, #500]	; (800c5a4 <udp_input+0x210>)
 800c3b0:	f002 feec 	bl	800f18c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d105      	bne.n	800c3c6 <udp_input+0x32>
 800c3ba:	4b78      	ldr	r3, [pc, #480]	; (800c59c <udp_input+0x208>)
 800c3bc:	22d0      	movs	r2, #208	; 0xd0
 800c3be:	497a      	ldr	r1, [pc, #488]	; (800c5a8 <udp_input+0x214>)
 800c3c0:	4878      	ldr	r0, [pc, #480]	; (800c5a4 <udp_input+0x210>)
 800c3c2:	f002 fee3 	bl	800f18c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	895b      	ldrh	r3, [r3, #10]
 800c3ca:	2b07      	cmp	r3, #7
 800c3cc:	d803      	bhi.n	800c3d6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7fa f95e 	bl	8006690 <pbuf_free>
    goto end;
 800c3d4:	e0de      	b.n	800c594 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c3dc:	4b73      	ldr	r3, [pc, #460]	; (800c5ac <udp_input+0x218>)
 800c3de:	695a      	ldr	r2, [r3, #20]
 800c3e0:	4b72      	ldr	r3, [pc, #456]	; (800c5ac <udp_input+0x218>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	4610      	mov	r0, r2
 800c3e8:	f001 ff3e 	bl	800e268 <ip4_addr_isbroadcast_u32>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	881b      	ldrh	r3, [r3, #0]
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7f8 feaf 	bl	800515a <lwip_htons>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	885b      	ldrh	r3, [r3, #2]
 800c404:	b29b      	uxth	r3, r3
 800c406:	4618      	mov	r0, r3
 800c408:	f7f8 fea7 	bl	800515a <lwip_htons>
 800c40c:	4603      	mov	r3, r0
 800c40e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c410:	2300      	movs	r3, #0
 800c412:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c414:	2300      	movs	r3, #0
 800c416:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c418:	2300      	movs	r3, #0
 800c41a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c41c:	4b64      	ldr	r3, [pc, #400]	; (800c5b0 <udp_input+0x21c>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	627b      	str	r3, [r7, #36]	; 0x24
 800c422:	e054      	b.n	800c4ce <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c426:	8a5b      	ldrh	r3, [r3, #18]
 800c428:	89fa      	ldrh	r2, [r7, #14]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d14a      	bne.n	800c4c4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c42e:	7cfb      	ldrb	r3, [r7, #19]
 800c430:	461a      	mov	r2, r3
 800c432:	6839      	ldr	r1, [r7, #0]
 800c434:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c436:	f7ff ff49 	bl	800c2cc <udp_input_local_match>
 800c43a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d041      	beq.n	800c4c4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c442:	7c1b      	ldrb	r3, [r3, #16]
 800c444:	f003 0304 	and.w	r3, r3, #4
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d11d      	bne.n	800c488 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d102      	bne.n	800c458 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c454:	61fb      	str	r3, [r7, #28]
 800c456:	e017      	b.n	800c488 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c458:	7cfb      	ldrb	r3, [r7, #19]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d014      	beq.n	800c488 <udp_input+0xf4>
 800c45e:	4b53      	ldr	r3, [pc, #332]	; (800c5ac <udp_input+0x218>)
 800c460:	695b      	ldr	r3, [r3, #20]
 800c462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c466:	d10f      	bne.n	800c488 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	3304      	adds	r3, #4
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	429a      	cmp	r2, r3
 800c474:	d008      	beq.n	800c488 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c478:	681a      	ldr	r2, [r3, #0]
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	3304      	adds	r3, #4
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	429a      	cmp	r2, r3
 800c482:	d101      	bne.n	800c488 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c486:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48a:	8a9b      	ldrh	r3, [r3, #20]
 800c48c:	8a3a      	ldrh	r2, [r7, #16]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d118      	bne.n	800c4c4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c494:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c496:	2b00      	cmp	r3, #0
 800c498:	d005      	beq.n	800c4a6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49c:	685a      	ldr	r2, [r3, #4]
 800c49e:	4b43      	ldr	r3, [pc, #268]	; (800c5ac <udp_input+0x218>)
 800c4a0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d10e      	bne.n	800c4c4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c4a6:	6a3b      	ldr	r3, [r7, #32]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d014      	beq.n	800c4d6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ae:	68da      	ldr	r2, [r3, #12]
 800c4b0:	6a3b      	ldr	r3, [r7, #32]
 800c4b2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c4b4:	4b3e      	ldr	r3, [pc, #248]	; (800c5b0 <udp_input+0x21c>)
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ba:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c4bc:	4a3c      	ldr	r2, [pc, #240]	; (800c5b0 <udp_input+0x21c>)
 800c4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c4c2:	e008      	b.n	800c4d6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	627b      	str	r3, [r7, #36]	; 0x24
 800c4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d1a7      	bne.n	800c424 <udp_input+0x90>
 800c4d4:	e000      	b.n	800c4d8 <udp_input+0x144>
        break;
 800c4d6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d101      	bne.n	800c4e2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d002      	beq.n	800c4ee <udp_input+0x15a>
    for_us = 1;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	76fb      	strb	r3, [r7, #27]
 800c4ec:	e00a      	b.n	800c504 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	3304      	adds	r3, #4
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	4b2d      	ldr	r3, [pc, #180]	; (800c5ac <udp_input+0x218>)
 800c4f6:	695b      	ldr	r3, [r3, #20]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	bf0c      	ite	eq
 800c4fc:	2301      	moveq	r3, #1
 800c4fe:	2300      	movne	r3, #0
 800c500:	b2db      	uxtb	r3, r3
 800c502:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c504:	7efb      	ldrb	r3, [r7, #27]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d041      	beq.n	800c58e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c50a:	2108      	movs	r1, #8
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7fa f839 	bl	8006584 <pbuf_remove_header>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d00a      	beq.n	800c52e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c518:	4b20      	ldr	r3, [pc, #128]	; (800c59c <udp_input+0x208>)
 800c51a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c51e:	4925      	ldr	r1, [pc, #148]	; (800c5b4 <udp_input+0x220>)
 800c520:	4820      	ldr	r0, [pc, #128]	; (800c5a4 <udp_input+0x210>)
 800c522:	f002 fe33 	bl	800f18c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f7fa f8b2 	bl	8006690 <pbuf_free>
      goto end;
 800c52c:	e032      	b.n	800c594 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c530:	2b00      	cmp	r3, #0
 800c532:	d012      	beq.n	800c55a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c536:	699b      	ldr	r3, [r3, #24]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d00a      	beq.n	800c552 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53e:	699c      	ldr	r4, [r3, #24]
 800c540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c542:	69d8      	ldr	r0, [r3, #28]
 800c544:	8a3b      	ldrh	r3, [r7, #16]
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	4b1b      	ldr	r3, [pc, #108]	; (800c5b8 <udp_input+0x224>)
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c54e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c550:	e021      	b.n	800c596 <udp_input+0x202>
        pbuf_free(p);
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f7fa f89c 	bl	8006690 <pbuf_free>
        goto end;
 800c558:	e01c      	b.n	800c594 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c55a:	7cfb      	ldrb	r3, [r7, #19]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d112      	bne.n	800c586 <udp_input+0x1f2>
 800c560:	4b12      	ldr	r3, [pc, #72]	; (800c5ac <udp_input+0x218>)
 800c562:	695b      	ldr	r3, [r3, #20]
 800c564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c568:	2be0      	cmp	r3, #224	; 0xe0
 800c56a:	d00c      	beq.n	800c586 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c56c:	4b0f      	ldr	r3, [pc, #60]	; (800c5ac <udp_input+0x218>)
 800c56e:	899b      	ldrh	r3, [r3, #12]
 800c570:	3308      	adds	r3, #8
 800c572:	b29b      	uxth	r3, r3
 800c574:	b21b      	sxth	r3, r3
 800c576:	4619      	mov	r1, r3
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7fa f876 	bl	800666a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c57e:	2103      	movs	r1, #3
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f001 fb53 	bl	800dc2c <icmp_dest_unreach>
      pbuf_free(p);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f7fa f882 	bl	8006690 <pbuf_free>
  return;
 800c58c:	e003      	b.n	800c596 <udp_input+0x202>
    pbuf_free(p);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7fa f87e 	bl	8006690 <pbuf_free>
  return;
 800c594:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c596:	372c      	adds	r7, #44	; 0x2c
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd90      	pop	{r4, r7, pc}
 800c59c:	08011f9c 	.word	0x08011f9c
 800c5a0:	08012040 	.word	0x08012040
 800c5a4:	08011ff0 	.word	0x08011ff0
 800c5a8:	08012058 	.word	0x08012058
 800c5ac:	20003980 	.word	0x20003980
 800c5b0:	20006edc 	.word	0x20006edc
 800c5b4:	08012074 	.word	0x08012074
 800c5b8:	20003990 	.word	0x20003990

0800c5bc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b088      	sub	sp, #32
 800c5c0:	af02      	add	r7, sp, #8
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
 800c5c8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d109      	bne.n	800c5e4 <udp_sendto+0x28>
 800c5d0:	4b23      	ldr	r3, [pc, #140]	; (800c660 <udp_sendto+0xa4>)
 800c5d2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c5d6:	4923      	ldr	r1, [pc, #140]	; (800c664 <udp_sendto+0xa8>)
 800c5d8:	4823      	ldr	r0, [pc, #140]	; (800c668 <udp_sendto+0xac>)
 800c5da:	f002 fdd7 	bl	800f18c <iprintf>
 800c5de:	f06f 030f 	mvn.w	r3, #15
 800c5e2:	e038      	b.n	800c656 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d109      	bne.n	800c5fe <udp_sendto+0x42>
 800c5ea:	4b1d      	ldr	r3, [pc, #116]	; (800c660 <udp_sendto+0xa4>)
 800c5ec:	f240 2219 	movw	r2, #537	; 0x219
 800c5f0:	491e      	ldr	r1, [pc, #120]	; (800c66c <udp_sendto+0xb0>)
 800c5f2:	481d      	ldr	r0, [pc, #116]	; (800c668 <udp_sendto+0xac>)
 800c5f4:	f002 fdca 	bl	800f18c <iprintf>
 800c5f8:	f06f 030f 	mvn.w	r3, #15
 800c5fc:	e02b      	b.n	800c656 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d109      	bne.n	800c618 <udp_sendto+0x5c>
 800c604:	4b16      	ldr	r3, [pc, #88]	; (800c660 <udp_sendto+0xa4>)
 800c606:	f240 221a 	movw	r2, #538	; 0x21a
 800c60a:	4919      	ldr	r1, [pc, #100]	; (800c670 <udp_sendto+0xb4>)
 800c60c:	4816      	ldr	r0, [pc, #88]	; (800c668 <udp_sendto+0xac>)
 800c60e:	f002 fdbd 	bl	800f18c <iprintf>
 800c612:	f06f 030f 	mvn.w	r3, #15
 800c616:	e01e      	b.n	800c656 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	7a1b      	ldrb	r3, [r3, #8]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d006      	beq.n	800c62e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	7a1b      	ldrb	r3, [r3, #8]
 800c624:	4618      	mov	r0, r3
 800c626:	f7f9 fcd7 	bl	8005fd8 <netif_get_by_index>
 800c62a:	6178      	str	r0, [r7, #20]
 800c62c:	e003      	b.n	800c636 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f001 fb86 	bl	800dd40 <ip4_route>
 800c634:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d102      	bne.n	800c642 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800c63c:	f06f 0303 	mvn.w	r3, #3
 800c640:	e009      	b.n	800c656 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c642:	887a      	ldrh	r2, [r7, #2]
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	4613      	mov	r3, r2
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	68b9      	ldr	r1, [r7, #8]
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f000 f810 	bl	800c674 <udp_sendto_if>
 800c654:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c656:	4618      	mov	r0, r3
 800c658:	3718      	adds	r7, #24
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	08011f9c 	.word	0x08011f9c
 800c664:	080120c0 	.word	0x080120c0
 800c668:	08011ff0 	.word	0x08011ff0
 800c66c:	080120d8 	.word	0x080120d8
 800c670:	080120f4 	.word	0x080120f4

0800c674 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b088      	sub	sp, #32
 800c678:	af02      	add	r7, sp, #8
 800c67a:	60f8      	str	r0, [r7, #12]
 800c67c:	60b9      	str	r1, [r7, #8]
 800c67e:	607a      	str	r2, [r7, #4]
 800c680:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d109      	bne.n	800c69c <udp_sendto_if+0x28>
 800c688:	4b2e      	ldr	r3, [pc, #184]	; (800c744 <udp_sendto_if+0xd0>)
 800c68a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c68e:	492e      	ldr	r1, [pc, #184]	; (800c748 <udp_sendto_if+0xd4>)
 800c690:	482e      	ldr	r0, [pc, #184]	; (800c74c <udp_sendto_if+0xd8>)
 800c692:	f002 fd7b 	bl	800f18c <iprintf>
 800c696:	f06f 030f 	mvn.w	r3, #15
 800c69a:	e04f      	b.n	800c73c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d109      	bne.n	800c6b6 <udp_sendto_if+0x42>
 800c6a2:	4b28      	ldr	r3, [pc, #160]	; (800c744 <udp_sendto_if+0xd0>)
 800c6a4:	f240 2281 	movw	r2, #641	; 0x281
 800c6a8:	4929      	ldr	r1, [pc, #164]	; (800c750 <udp_sendto_if+0xdc>)
 800c6aa:	4828      	ldr	r0, [pc, #160]	; (800c74c <udp_sendto_if+0xd8>)
 800c6ac:	f002 fd6e 	bl	800f18c <iprintf>
 800c6b0:	f06f 030f 	mvn.w	r3, #15
 800c6b4:	e042      	b.n	800c73c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d109      	bne.n	800c6d0 <udp_sendto_if+0x5c>
 800c6bc:	4b21      	ldr	r3, [pc, #132]	; (800c744 <udp_sendto_if+0xd0>)
 800c6be:	f240 2282 	movw	r2, #642	; 0x282
 800c6c2:	4924      	ldr	r1, [pc, #144]	; (800c754 <udp_sendto_if+0xe0>)
 800c6c4:	4821      	ldr	r0, [pc, #132]	; (800c74c <udp_sendto_if+0xd8>)
 800c6c6:	f002 fd61 	bl	800f18c <iprintf>
 800c6ca:	f06f 030f 	mvn.w	r3, #15
 800c6ce:	e035      	b.n	800c73c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c6d0:	6a3b      	ldr	r3, [r7, #32]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d109      	bne.n	800c6ea <udp_sendto_if+0x76>
 800c6d6:	4b1b      	ldr	r3, [pc, #108]	; (800c744 <udp_sendto_if+0xd0>)
 800c6d8:	f240 2283 	movw	r2, #643	; 0x283
 800c6dc:	491e      	ldr	r1, [pc, #120]	; (800c758 <udp_sendto_if+0xe4>)
 800c6de:	481b      	ldr	r0, [pc, #108]	; (800c74c <udp_sendto_if+0xd8>)
 800c6e0:	f002 fd54 	bl	800f18c <iprintf>
 800c6e4:	f06f 030f 	mvn.w	r3, #15
 800c6e8:	e028      	b.n	800c73c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d009      	beq.n	800c704 <udp_sendto_if+0x90>
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d005      	beq.n	800c704 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c700:	2be0      	cmp	r3, #224	; 0xe0
 800c702:	d103      	bne.n	800c70c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c704:	6a3b      	ldr	r3, [r7, #32]
 800c706:	3304      	adds	r3, #4
 800c708:	617b      	str	r3, [r7, #20]
 800c70a:	e00b      	b.n	800c724 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	6a3b      	ldr	r3, [r7, #32]
 800c712:	3304      	adds	r3, #4
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	429a      	cmp	r2, r3
 800c718:	d002      	beq.n	800c720 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c71a:	f06f 0303 	mvn.w	r3, #3
 800c71e:	e00d      	b.n	800c73c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c724:	887a      	ldrh	r2, [r7, #2]
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	9301      	str	r3, [sp, #4]
 800c72a:	6a3b      	ldr	r3, [r7, #32]
 800c72c:	9300      	str	r3, [sp, #0]
 800c72e:	4613      	mov	r3, r2
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	68b9      	ldr	r1, [r7, #8]
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f000 f811 	bl	800c75c <udp_sendto_if_src>
 800c73a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3718      	adds	r7, #24
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}
 800c744:	08011f9c 	.word	0x08011f9c
 800c748:	08012110 	.word	0x08012110
 800c74c:	08011ff0 	.word	0x08011ff0
 800c750:	0801212c 	.word	0x0801212c
 800c754:	08012148 	.word	0x08012148
 800c758:	08012168 	.word	0x08012168

0800c75c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b08c      	sub	sp, #48	; 0x30
 800c760:	af04      	add	r7, sp, #16
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
 800c768:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d109      	bne.n	800c784 <udp_sendto_if_src+0x28>
 800c770:	4b65      	ldr	r3, [pc, #404]	; (800c908 <udp_sendto_if_src+0x1ac>)
 800c772:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c776:	4965      	ldr	r1, [pc, #404]	; (800c90c <udp_sendto_if_src+0x1b0>)
 800c778:	4865      	ldr	r0, [pc, #404]	; (800c910 <udp_sendto_if_src+0x1b4>)
 800c77a:	f002 fd07 	bl	800f18c <iprintf>
 800c77e:	f06f 030f 	mvn.w	r3, #15
 800c782:	e0bc      	b.n	800c8fe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d109      	bne.n	800c79e <udp_sendto_if_src+0x42>
 800c78a:	4b5f      	ldr	r3, [pc, #380]	; (800c908 <udp_sendto_if_src+0x1ac>)
 800c78c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c790:	4960      	ldr	r1, [pc, #384]	; (800c914 <udp_sendto_if_src+0x1b8>)
 800c792:	485f      	ldr	r0, [pc, #380]	; (800c910 <udp_sendto_if_src+0x1b4>)
 800c794:	f002 fcfa 	bl	800f18c <iprintf>
 800c798:	f06f 030f 	mvn.w	r3, #15
 800c79c:	e0af      	b.n	800c8fe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d109      	bne.n	800c7b8 <udp_sendto_if_src+0x5c>
 800c7a4:	4b58      	ldr	r3, [pc, #352]	; (800c908 <udp_sendto_if_src+0x1ac>)
 800c7a6:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c7aa:	495b      	ldr	r1, [pc, #364]	; (800c918 <udp_sendto_if_src+0x1bc>)
 800c7ac:	4858      	ldr	r0, [pc, #352]	; (800c910 <udp_sendto_if_src+0x1b4>)
 800c7ae:	f002 fced 	bl	800f18c <iprintf>
 800c7b2:	f06f 030f 	mvn.w	r3, #15
 800c7b6:	e0a2      	b.n	800c8fe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d109      	bne.n	800c7d2 <udp_sendto_if_src+0x76>
 800c7be:	4b52      	ldr	r3, [pc, #328]	; (800c908 <udp_sendto_if_src+0x1ac>)
 800c7c0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c7c4:	4955      	ldr	r1, [pc, #340]	; (800c91c <udp_sendto_if_src+0x1c0>)
 800c7c6:	4852      	ldr	r0, [pc, #328]	; (800c910 <udp_sendto_if_src+0x1b4>)
 800c7c8:	f002 fce0 	bl	800f18c <iprintf>
 800c7cc:	f06f 030f 	mvn.w	r3, #15
 800c7d0:	e095      	b.n	800c8fe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d109      	bne.n	800c7ec <udp_sendto_if_src+0x90>
 800c7d8:	4b4b      	ldr	r3, [pc, #300]	; (800c908 <udp_sendto_if_src+0x1ac>)
 800c7da:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c7de:	4950      	ldr	r1, [pc, #320]	; (800c920 <udp_sendto_if_src+0x1c4>)
 800c7e0:	484b      	ldr	r0, [pc, #300]	; (800c910 <udp_sendto_if_src+0x1b4>)
 800c7e2:	f002 fcd3 	bl	800f18c <iprintf>
 800c7e6:	f06f 030f 	mvn.w	r3, #15
 800c7ea:	e088      	b.n	800c8fe <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	8a5b      	ldrh	r3, [r3, #18]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10f      	bne.n	800c814 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c7f4:	68f9      	ldr	r1, [r7, #12]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	8a5b      	ldrh	r3, [r3, #18]
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f000 f893 	bl	800c928 <udp_bind>
 800c802:	4603      	mov	r3, r0
 800c804:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c806:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d002      	beq.n	800c814 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c80e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c812:	e074      	b.n	800c8fe <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	891b      	ldrh	r3, [r3, #8]
 800c818:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d902      	bls.n	800c826 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c820:	f04f 33ff 	mov.w	r3, #4294967295
 800c824:	e06b      	b.n	800c8fe <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c826:	2108      	movs	r1, #8
 800c828:	68b8      	ldr	r0, [r7, #8]
 800c82a:	f7f9 fe9b 	bl	8006564 <pbuf_add_header>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d015      	beq.n	800c860 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c834:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c838:	2108      	movs	r1, #8
 800c83a:	2022      	movs	r0, #34	; 0x22
 800c83c:	f7f9 fc48 	bl	80060d0 <pbuf_alloc>
 800c840:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d102      	bne.n	800c84e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c848:	f04f 33ff 	mov.w	r3, #4294967295
 800c84c:	e057      	b.n	800c8fe <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	891b      	ldrh	r3, [r3, #8]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d006      	beq.n	800c864 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c856:	68b9      	ldr	r1, [r7, #8]
 800c858:	69f8      	ldr	r0, [r7, #28]
 800c85a:	f7fa f831 	bl	80068c0 <pbuf_chain>
 800c85e:	e001      	b.n	800c864 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	895b      	ldrh	r3, [r3, #10]
 800c868:	2b07      	cmp	r3, #7
 800c86a:	d806      	bhi.n	800c87a <udp_sendto_if_src+0x11e>
 800c86c:	4b26      	ldr	r3, [pc, #152]	; (800c908 <udp_sendto_if_src+0x1ac>)
 800c86e:	f240 320e 	movw	r2, #782	; 0x30e
 800c872:	492c      	ldr	r1, [pc, #176]	; (800c924 <udp_sendto_if_src+0x1c8>)
 800c874:	4826      	ldr	r0, [pc, #152]	; (800c910 <udp_sendto_if_src+0x1b4>)
 800c876:	f002 fc89 	bl	800f18c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c87a:	69fb      	ldr	r3, [r7, #28]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	8a5b      	ldrh	r3, [r3, #18]
 800c884:	4618      	mov	r0, r3
 800c886:	f7f8 fc68 	bl	800515a <lwip_htons>
 800c88a:	4603      	mov	r3, r0
 800c88c:	461a      	mov	r2, r3
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c892:	887b      	ldrh	r3, [r7, #2]
 800c894:	4618      	mov	r0, r3
 800c896:	f7f8 fc60 	bl	800515a <lwip_htons>
 800c89a:	4603      	mov	r3, r0
 800c89c:	461a      	mov	r2, r3
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	719a      	strb	r2, [r3, #6]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	891b      	ldrh	r3, [r3, #8]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7f8 fc52 	bl	800515a <lwip_htons>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c8be:	2311      	movs	r3, #17
 800c8c0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	7adb      	ldrb	r3, [r3, #11]
 800c8c6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	7a9b      	ldrb	r3, [r3, #10]
 800c8cc:	7cb9      	ldrb	r1, [r7, #18]
 800c8ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8d0:	9202      	str	r2, [sp, #8]
 800c8d2:	7cfa      	ldrb	r2, [r7, #19]
 800c8d4:	9201      	str	r2, [sp, #4]
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	460b      	mov	r3, r1
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8de:	69f8      	ldr	r0, [r7, #28]
 800c8e0:	f001 fc14 	bl	800e10c <ip4_output_if_src>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c8e8:	69fa      	ldr	r2, [r7, #28]
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d004      	beq.n	800c8fa <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c8f0:	69f8      	ldr	r0, [r7, #28]
 800c8f2:	f7f9 fecd 	bl	8006690 <pbuf_free>
    q = NULL;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c8fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3720      	adds	r7, #32
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	08011f9c 	.word	0x08011f9c
 800c90c:	08012188 	.word	0x08012188
 800c910:	08011ff0 	.word	0x08011ff0
 800c914:	080121a8 	.word	0x080121a8
 800c918:	080121c8 	.word	0x080121c8
 800c91c:	080121ec 	.word	0x080121ec
 800c920:	08012210 	.word	0x08012210
 800c924:	08012234 	.word	0x08012234

0800c928 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b086      	sub	sp, #24
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	4613      	mov	r3, r2
 800c934:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d101      	bne.n	800c940 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c93c:	4b39      	ldr	r3, [pc, #228]	; (800ca24 <udp_bind+0xfc>)
 800c93e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d109      	bne.n	800c95a <udp_bind+0x32>
 800c946:	4b38      	ldr	r3, [pc, #224]	; (800ca28 <udp_bind+0x100>)
 800c948:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c94c:	4937      	ldr	r1, [pc, #220]	; (800ca2c <udp_bind+0x104>)
 800c94e:	4838      	ldr	r0, [pc, #224]	; (800ca30 <udp_bind+0x108>)
 800c950:	f002 fc1c 	bl	800f18c <iprintf>
 800c954:	f06f 030f 	mvn.w	r3, #15
 800c958:	e060      	b.n	800ca1c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c95a:	2300      	movs	r3, #0
 800c95c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c95e:	4b35      	ldr	r3, [pc, #212]	; (800ca34 <udp_bind+0x10c>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	617b      	str	r3, [r7, #20]
 800c964:	e009      	b.n	800c97a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c966:	68fa      	ldr	r2, [r7, #12]
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d102      	bne.n	800c974 <udp_bind+0x4c>
      rebind = 1;
 800c96e:	2301      	movs	r3, #1
 800c970:	74fb      	strb	r3, [r7, #19]
      break;
 800c972:	e005      	b.n	800c980 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	617b      	str	r3, [r7, #20]
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d1f2      	bne.n	800c966 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c980:	88fb      	ldrh	r3, [r7, #6]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d109      	bne.n	800c99a <udp_bind+0x72>
    port = udp_new_port();
 800c986:	f7ff fc69 	bl	800c25c <udp_new_port>
 800c98a:	4603      	mov	r3, r0
 800c98c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c98e:	88fb      	ldrh	r3, [r7, #6]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d12c      	bne.n	800c9ee <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c994:	f06f 0307 	mvn.w	r3, #7
 800c998:	e040      	b.n	800ca1c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c99a:	4b26      	ldr	r3, [pc, #152]	; (800ca34 <udp_bind+0x10c>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	617b      	str	r3, [r7, #20]
 800c9a0:	e022      	b.n	800c9e8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d01b      	beq.n	800c9e2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	8a5b      	ldrh	r3, [r3, #18]
 800c9ae:	88fa      	ldrh	r2, [r7, #6]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d116      	bne.n	800c9e2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	681a      	ldr	r2, [r3, #0]
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d00d      	beq.n	800c9dc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00a      	beq.n	800c9dc <udp_bind+0xb4>
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d006      	beq.n	800c9dc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c9ce:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d003      	beq.n	800c9dc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d102      	bne.n	800c9e2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c9dc:	f06f 0307 	mvn.w	r3, #7
 800c9e0:	e01c      	b.n	800ca1c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	68db      	ldr	r3, [r3, #12]
 800c9e6:	617b      	str	r3, [r7, #20]
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1d9      	bne.n	800c9a2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d002      	beq.n	800c9fa <udp_bind+0xd2>
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	e000      	b.n	800c9fc <udp_bind+0xd4>
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	88fa      	ldrh	r2, [r7, #6]
 800ca04:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800ca06:	7cfb      	ldrb	r3, [r7, #19]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d106      	bne.n	800ca1a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800ca0c:	4b09      	ldr	r3, [pc, #36]	; (800ca34 <udp_bind+0x10c>)
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800ca14:	4a07      	ldr	r2, [pc, #28]	; (800ca34 <udp_bind+0x10c>)
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800ca1a:	2300      	movs	r3, #0
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3718      	adds	r7, #24
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	08012aac 	.word	0x08012aac
 800ca28:	08011f9c 	.word	0x08011f9c
 800ca2c:	08012264 	.word	0x08012264
 800ca30:	08011ff0 	.word	0x08011ff0
 800ca34:	20006edc 	.word	0x20006edc

0800ca38 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d107      	bne.n	800ca5a <udp_recv+0x22>
 800ca4a:	4b08      	ldr	r3, [pc, #32]	; (800ca6c <udp_recv+0x34>)
 800ca4c:	f240 428a 	movw	r2, #1162	; 0x48a
 800ca50:	4907      	ldr	r1, [pc, #28]	; (800ca70 <udp_recv+0x38>)
 800ca52:	4808      	ldr	r0, [pc, #32]	; (800ca74 <udp_recv+0x3c>)
 800ca54:	f002 fb9a 	bl	800f18c <iprintf>
 800ca58:	e005      	b.n	800ca66 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	68ba      	ldr	r2, [r7, #8]
 800ca5e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	61da      	str	r2, [r3, #28]
}
 800ca66:	3710      	adds	r7, #16
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	08011f9c 	.word	0x08011f9c
 800ca70:	080122d0 	.word	0x080122d0
 800ca74:	08011ff0 	.word	0x08011ff0

0800ca78 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d107      	bne.n	800ca96 <udp_remove+0x1e>
 800ca86:	4b19      	ldr	r3, [pc, #100]	; (800caec <udp_remove+0x74>)
 800ca88:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800ca8c:	4918      	ldr	r1, [pc, #96]	; (800caf0 <udp_remove+0x78>)
 800ca8e:	4819      	ldr	r0, [pc, #100]	; (800caf4 <udp_remove+0x7c>)
 800ca90:	f002 fb7c 	bl	800f18c <iprintf>
 800ca94:	e026      	b.n	800cae4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800ca96:	4b18      	ldr	r3, [pc, #96]	; (800caf8 <udp_remove+0x80>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d105      	bne.n	800caac <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800caa0:	4b15      	ldr	r3, [pc, #84]	; (800caf8 <udp_remove+0x80>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	4a14      	ldr	r2, [pc, #80]	; (800caf8 <udp_remove+0x80>)
 800caa8:	6013      	str	r3, [r2, #0]
 800caaa:	e017      	b.n	800cadc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800caac:	4b12      	ldr	r3, [pc, #72]	; (800caf8 <udp_remove+0x80>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	60fb      	str	r3, [r7, #12]
 800cab2:	e010      	b.n	800cad6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d009      	beq.n	800cad0 <udp_remove+0x58>
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d104      	bne.n	800cad0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	68da      	ldr	r2, [r3, #12]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	60da      	str	r2, [r3, #12]
        break;
 800cace:	e005      	b.n	800cadc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	68db      	ldr	r3, [r3, #12]
 800cad4:	60fb      	str	r3, [r7, #12]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1eb      	bne.n	800cab4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800cadc:	6879      	ldr	r1, [r7, #4]
 800cade:	2000      	movs	r0, #0
 800cae0:	f7f8 ffdc 	bl	8005a9c <memp_free>
}
 800cae4:	3710      	adds	r7, #16
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	08011f9c 	.word	0x08011f9c
 800caf0:	080122e8 	.word	0x080122e8
 800caf4:	08011ff0 	.word	0x08011ff0
 800caf8:	20006edc 	.word	0x20006edc

0800cafc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800cb02:	2000      	movs	r0, #0
 800cb04:	f7f8 ff7e 	bl	8005a04 <memp_malloc>
 800cb08:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d007      	beq.n	800cb20 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800cb10:	2220      	movs	r2, #32
 800cb12:	2100      	movs	r1, #0
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f002 fb31 	bl	800f17c <memset>
    pcb->ttl = UDP_TTL;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	22ff      	movs	r2, #255	; 0xff
 800cb1e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800cb20:	687b      	ldr	r3, [r7, #4]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
	...

0800cb2c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b085      	sub	sp, #20
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d01e      	beq.n	800cb7a <udp_netif_ip_addr_changed+0x4e>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d01a      	beq.n	800cb7a <udp_netif_ip_addr_changed+0x4e>
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d017      	beq.n	800cb7a <udp_netif_ip_addr_changed+0x4e>
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d013      	beq.n	800cb7a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cb52:	4b0d      	ldr	r3, [pc, #52]	; (800cb88 <udp_netif_ip_addr_changed+0x5c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	60fb      	str	r3, [r7, #12]
 800cb58:	e00c      	b.n	800cb74 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d103      	bne.n	800cb6e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	68db      	ldr	r3, [r3, #12]
 800cb72:	60fb      	str	r3, [r7, #12]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d1ef      	bne.n	800cb5a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cb7a:	bf00      	nop
 800cb7c:	3714      	adds	r7, #20
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	20006edc 	.word	0x20006edc

0800cb8c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cb94:	4915      	ldr	r1, [pc, #84]	; (800cbec <etharp_free_entry+0x60>)
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	4613      	mov	r3, r2
 800cb9a:	005b      	lsls	r3, r3, #1
 800cb9c:	4413      	add	r3, r2
 800cb9e:	00db      	lsls	r3, r3, #3
 800cba0:	440b      	add	r3, r1
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d013      	beq.n	800cbd0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cba8:	4910      	ldr	r1, [pc, #64]	; (800cbec <etharp_free_entry+0x60>)
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	4613      	mov	r3, r2
 800cbae:	005b      	lsls	r3, r3, #1
 800cbb0:	4413      	add	r3, r2
 800cbb2:	00db      	lsls	r3, r3, #3
 800cbb4:	440b      	add	r3, r1
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7f9 fd69 	bl	8006690 <pbuf_free>
    arp_table[i].q = NULL;
 800cbbe:	490b      	ldr	r1, [pc, #44]	; (800cbec <etharp_free_entry+0x60>)
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	4613      	mov	r3, r2
 800cbc4:	005b      	lsls	r3, r3, #1
 800cbc6:	4413      	add	r3, r2
 800cbc8:	00db      	lsls	r3, r3, #3
 800cbca:	440b      	add	r3, r1
 800cbcc:	2200      	movs	r2, #0
 800cbce:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cbd0:	4906      	ldr	r1, [pc, #24]	; (800cbec <etharp_free_entry+0x60>)
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	005b      	lsls	r3, r3, #1
 800cbd8:	4413      	add	r3, r2
 800cbda:	00db      	lsls	r3, r3, #3
 800cbdc:	440b      	add	r3, r1
 800cbde:	3314      	adds	r3, #20
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cbe4:	bf00      	nop
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	200002a8 	.word	0x200002a8

0800cbf0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	607b      	str	r3, [r7, #4]
 800cbfa:	e096      	b.n	800cd2a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cbfc:	494f      	ldr	r1, [pc, #316]	; (800cd3c <etharp_tmr+0x14c>)
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	4613      	mov	r3, r2
 800cc02:	005b      	lsls	r3, r3, #1
 800cc04:	4413      	add	r3, r2
 800cc06:	00db      	lsls	r3, r3, #3
 800cc08:	440b      	add	r3, r1
 800cc0a:	3314      	adds	r3, #20
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cc10:	78fb      	ldrb	r3, [r7, #3]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f000 8086 	beq.w	800cd24 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cc18:	4948      	ldr	r1, [pc, #288]	; (800cd3c <etharp_tmr+0x14c>)
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	005b      	lsls	r3, r3, #1
 800cc20:	4413      	add	r3, r2
 800cc22:	00db      	lsls	r3, r3, #3
 800cc24:	440b      	add	r3, r1
 800cc26:	3312      	adds	r3, #18
 800cc28:	881b      	ldrh	r3, [r3, #0]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	b298      	uxth	r0, r3
 800cc2e:	4943      	ldr	r1, [pc, #268]	; (800cd3c <etharp_tmr+0x14c>)
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	4613      	mov	r3, r2
 800cc34:	005b      	lsls	r3, r3, #1
 800cc36:	4413      	add	r3, r2
 800cc38:	00db      	lsls	r3, r3, #3
 800cc3a:	440b      	add	r3, r1
 800cc3c:	3312      	adds	r3, #18
 800cc3e:	4602      	mov	r2, r0
 800cc40:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cc42:	493e      	ldr	r1, [pc, #248]	; (800cd3c <etharp_tmr+0x14c>)
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	4613      	mov	r3, r2
 800cc48:	005b      	lsls	r3, r3, #1
 800cc4a:	4413      	add	r3, r2
 800cc4c:	00db      	lsls	r3, r3, #3
 800cc4e:	440b      	add	r3, r1
 800cc50:	3312      	adds	r3, #18
 800cc52:	881b      	ldrh	r3, [r3, #0]
 800cc54:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cc58:	d215      	bcs.n	800cc86 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cc5a:	4938      	ldr	r1, [pc, #224]	; (800cd3c <etharp_tmr+0x14c>)
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	4613      	mov	r3, r2
 800cc60:	005b      	lsls	r3, r3, #1
 800cc62:	4413      	add	r3, r2
 800cc64:	00db      	lsls	r3, r3, #3
 800cc66:	440b      	add	r3, r1
 800cc68:	3314      	adds	r3, #20
 800cc6a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d10e      	bne.n	800cc8e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cc70:	4932      	ldr	r1, [pc, #200]	; (800cd3c <etharp_tmr+0x14c>)
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	4613      	mov	r3, r2
 800cc76:	005b      	lsls	r3, r3, #1
 800cc78:	4413      	add	r3, r2
 800cc7a:	00db      	lsls	r3, r3, #3
 800cc7c:	440b      	add	r3, r1
 800cc7e:	3312      	adds	r3, #18
 800cc80:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cc82:	2b04      	cmp	r3, #4
 800cc84:	d903      	bls.n	800cc8e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f7ff ff80 	bl	800cb8c <etharp_free_entry>
 800cc8c:	e04a      	b.n	800cd24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cc8e:	492b      	ldr	r1, [pc, #172]	; (800cd3c <etharp_tmr+0x14c>)
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	4613      	mov	r3, r2
 800cc94:	005b      	lsls	r3, r3, #1
 800cc96:	4413      	add	r3, r2
 800cc98:	00db      	lsls	r3, r3, #3
 800cc9a:	440b      	add	r3, r1
 800cc9c:	3314      	adds	r3, #20
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	2b03      	cmp	r3, #3
 800cca2:	d10a      	bne.n	800ccba <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cca4:	4925      	ldr	r1, [pc, #148]	; (800cd3c <etharp_tmr+0x14c>)
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	4613      	mov	r3, r2
 800ccaa:	005b      	lsls	r3, r3, #1
 800ccac:	4413      	add	r3, r2
 800ccae:	00db      	lsls	r3, r3, #3
 800ccb0:	440b      	add	r3, r1
 800ccb2:	3314      	adds	r3, #20
 800ccb4:	2204      	movs	r2, #4
 800ccb6:	701a      	strb	r2, [r3, #0]
 800ccb8:	e034      	b.n	800cd24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ccba:	4920      	ldr	r1, [pc, #128]	; (800cd3c <etharp_tmr+0x14c>)
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	4613      	mov	r3, r2
 800ccc0:	005b      	lsls	r3, r3, #1
 800ccc2:	4413      	add	r3, r2
 800ccc4:	00db      	lsls	r3, r3, #3
 800ccc6:	440b      	add	r3, r1
 800ccc8:	3314      	adds	r3, #20
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	2b04      	cmp	r3, #4
 800ccce:	d10a      	bne.n	800cce6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ccd0:	491a      	ldr	r1, [pc, #104]	; (800cd3c <etharp_tmr+0x14c>)
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	005b      	lsls	r3, r3, #1
 800ccd8:	4413      	add	r3, r2
 800ccda:	00db      	lsls	r3, r3, #3
 800ccdc:	440b      	add	r3, r1
 800ccde:	3314      	adds	r3, #20
 800cce0:	2202      	movs	r2, #2
 800cce2:	701a      	strb	r2, [r3, #0]
 800cce4:	e01e      	b.n	800cd24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cce6:	4915      	ldr	r1, [pc, #84]	; (800cd3c <etharp_tmr+0x14c>)
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	4613      	mov	r3, r2
 800ccec:	005b      	lsls	r3, r3, #1
 800ccee:	4413      	add	r3, r2
 800ccf0:	00db      	lsls	r3, r3, #3
 800ccf2:	440b      	add	r3, r1
 800ccf4:	3314      	adds	r3, #20
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d113      	bne.n	800cd24 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ccfc:	490f      	ldr	r1, [pc, #60]	; (800cd3c <etharp_tmr+0x14c>)
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	4613      	mov	r3, r2
 800cd02:	005b      	lsls	r3, r3, #1
 800cd04:	4413      	add	r3, r2
 800cd06:	00db      	lsls	r3, r3, #3
 800cd08:	440b      	add	r3, r1
 800cd0a:	3308      	adds	r3, #8
 800cd0c:	6818      	ldr	r0, [r3, #0]
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	4613      	mov	r3, r2
 800cd12:	005b      	lsls	r3, r3, #1
 800cd14:	4413      	add	r3, r2
 800cd16:	00db      	lsls	r3, r3, #3
 800cd18:	4a08      	ldr	r2, [pc, #32]	; (800cd3c <etharp_tmr+0x14c>)
 800cd1a:	4413      	add	r3, r2
 800cd1c:	3304      	adds	r3, #4
 800cd1e:	4619      	mov	r1, r3
 800cd20:	f000 fe6e 	bl	800da00 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	3301      	adds	r3, #1
 800cd28:	607b      	str	r3, [r7, #4]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2b09      	cmp	r3, #9
 800cd2e:	f77f af65 	ble.w	800cbfc <etharp_tmr+0xc>
      }
    }
  }
}
 800cd32:	bf00      	nop
 800cd34:	3708      	adds	r7, #8
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	200002a8 	.word	0x200002a8

0800cd40 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b08a      	sub	sp, #40	; 0x28
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	460b      	mov	r3, r1
 800cd4a:	607a      	str	r2, [r7, #4]
 800cd4c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cd4e:	230a      	movs	r3, #10
 800cd50:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cd52:	230a      	movs	r3, #10
 800cd54:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cd56:	230a      	movs	r3, #10
 800cd58:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cd5e:	230a      	movs	r3, #10
 800cd60:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cd62:	2300      	movs	r3, #0
 800cd64:	83bb      	strh	r3, [r7, #28]
 800cd66:	2300      	movs	r3, #0
 800cd68:	837b      	strh	r3, [r7, #26]
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd6e:	2300      	movs	r3, #0
 800cd70:	843b      	strh	r3, [r7, #32]
 800cd72:	e0ae      	b.n	800ced2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cd74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd78:	49a6      	ldr	r1, [pc, #664]	; (800d014 <etharp_find_entry+0x2d4>)
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	005b      	lsls	r3, r3, #1
 800cd7e:	4413      	add	r3, r2
 800cd80:	00db      	lsls	r3, r3, #3
 800cd82:	440b      	add	r3, r1
 800cd84:	3314      	adds	r3, #20
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cd8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cd8e:	2b0a      	cmp	r3, #10
 800cd90:	d105      	bne.n	800cd9e <etharp_find_entry+0x5e>
 800cd92:	7dfb      	ldrb	r3, [r7, #23]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d102      	bne.n	800cd9e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cd98:	8c3b      	ldrh	r3, [r7, #32]
 800cd9a:	847b      	strh	r3, [r7, #34]	; 0x22
 800cd9c:	e095      	b.n	800ceca <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cd9e:	7dfb      	ldrb	r3, [r7, #23]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f000 8092 	beq.w	800ceca <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cda6:	7dfb      	ldrb	r3, [r7, #23]
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d009      	beq.n	800cdc0 <etharp_find_entry+0x80>
 800cdac:	7dfb      	ldrb	r3, [r7, #23]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d806      	bhi.n	800cdc0 <etharp_find_entry+0x80>
 800cdb2:	4b99      	ldr	r3, [pc, #612]	; (800d018 <etharp_find_entry+0x2d8>)
 800cdb4:	f44f 7292 	mov.w	r2, #292	; 0x124
 800cdb8:	4998      	ldr	r1, [pc, #608]	; (800d01c <etharp_find_entry+0x2dc>)
 800cdba:	4899      	ldr	r0, [pc, #612]	; (800d020 <etharp_find_entry+0x2e0>)
 800cdbc:	f002 f9e6 	bl	800f18c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d020      	beq.n	800ce08 <etharp_find_entry+0xc8>
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	6819      	ldr	r1, [r3, #0]
 800cdca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdce:	4891      	ldr	r0, [pc, #580]	; (800d014 <etharp_find_entry+0x2d4>)
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	4413      	add	r3, r2
 800cdd6:	00db      	lsls	r3, r3, #3
 800cdd8:	4403      	add	r3, r0
 800cdda:	3304      	adds	r3, #4
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4299      	cmp	r1, r3
 800cde0:	d112      	bne.n	800ce08 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d00c      	beq.n	800ce02 <etharp_find_entry+0xc2>
 800cde8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdec:	4989      	ldr	r1, [pc, #548]	; (800d014 <etharp_find_entry+0x2d4>)
 800cdee:	4613      	mov	r3, r2
 800cdf0:	005b      	lsls	r3, r3, #1
 800cdf2:	4413      	add	r3, r2
 800cdf4:	00db      	lsls	r3, r3, #3
 800cdf6:	440b      	add	r3, r1
 800cdf8:	3308      	adds	r3, #8
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d102      	bne.n	800ce08 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ce02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ce06:	e100      	b.n	800d00a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ce08:	7dfb      	ldrb	r3, [r7, #23]
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d140      	bne.n	800ce90 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ce0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce12:	4980      	ldr	r1, [pc, #512]	; (800d014 <etharp_find_entry+0x2d4>)
 800ce14:	4613      	mov	r3, r2
 800ce16:	005b      	lsls	r3, r3, #1
 800ce18:	4413      	add	r3, r2
 800ce1a:	00db      	lsls	r3, r3, #3
 800ce1c:	440b      	add	r3, r1
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d01a      	beq.n	800ce5a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ce24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce28:	497a      	ldr	r1, [pc, #488]	; (800d014 <etharp_find_entry+0x2d4>)
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	005b      	lsls	r3, r3, #1
 800ce2e:	4413      	add	r3, r2
 800ce30:	00db      	lsls	r3, r3, #3
 800ce32:	440b      	add	r3, r1
 800ce34:	3312      	adds	r3, #18
 800ce36:	881b      	ldrh	r3, [r3, #0]
 800ce38:	8bba      	ldrh	r2, [r7, #28]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d845      	bhi.n	800ceca <etharp_find_entry+0x18a>
            old_queue = i;
 800ce3e:	8c3b      	ldrh	r3, [r7, #32]
 800ce40:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ce42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce46:	4973      	ldr	r1, [pc, #460]	; (800d014 <etharp_find_entry+0x2d4>)
 800ce48:	4613      	mov	r3, r2
 800ce4a:	005b      	lsls	r3, r3, #1
 800ce4c:	4413      	add	r3, r2
 800ce4e:	00db      	lsls	r3, r3, #3
 800ce50:	440b      	add	r3, r1
 800ce52:	3312      	adds	r3, #18
 800ce54:	881b      	ldrh	r3, [r3, #0]
 800ce56:	83bb      	strh	r3, [r7, #28]
 800ce58:	e037      	b.n	800ceca <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ce5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce5e:	496d      	ldr	r1, [pc, #436]	; (800d014 <etharp_find_entry+0x2d4>)
 800ce60:	4613      	mov	r3, r2
 800ce62:	005b      	lsls	r3, r3, #1
 800ce64:	4413      	add	r3, r2
 800ce66:	00db      	lsls	r3, r3, #3
 800ce68:	440b      	add	r3, r1
 800ce6a:	3312      	adds	r3, #18
 800ce6c:	881b      	ldrh	r3, [r3, #0]
 800ce6e:	8b7a      	ldrh	r2, [r7, #26]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d82a      	bhi.n	800ceca <etharp_find_entry+0x18a>
            old_pending = i;
 800ce74:	8c3b      	ldrh	r3, [r7, #32]
 800ce76:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ce78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce7c:	4965      	ldr	r1, [pc, #404]	; (800d014 <etharp_find_entry+0x2d4>)
 800ce7e:	4613      	mov	r3, r2
 800ce80:	005b      	lsls	r3, r3, #1
 800ce82:	4413      	add	r3, r2
 800ce84:	00db      	lsls	r3, r3, #3
 800ce86:	440b      	add	r3, r1
 800ce88:	3312      	adds	r3, #18
 800ce8a:	881b      	ldrh	r3, [r3, #0]
 800ce8c:	837b      	strh	r3, [r7, #26]
 800ce8e:	e01c      	b.n	800ceca <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ce90:	7dfb      	ldrb	r3, [r7, #23]
 800ce92:	2b01      	cmp	r3, #1
 800ce94:	d919      	bls.n	800ceca <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ce96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce9a:	495e      	ldr	r1, [pc, #376]	; (800d014 <etharp_find_entry+0x2d4>)
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	005b      	lsls	r3, r3, #1
 800cea0:	4413      	add	r3, r2
 800cea2:	00db      	lsls	r3, r3, #3
 800cea4:	440b      	add	r3, r1
 800cea6:	3312      	adds	r3, #18
 800cea8:	881b      	ldrh	r3, [r3, #0]
 800ceaa:	8b3a      	ldrh	r2, [r7, #24]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d80c      	bhi.n	800ceca <etharp_find_entry+0x18a>
            old_stable = i;
 800ceb0:	8c3b      	ldrh	r3, [r7, #32]
 800ceb2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ceb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ceb8:	4956      	ldr	r1, [pc, #344]	; (800d014 <etharp_find_entry+0x2d4>)
 800ceba:	4613      	mov	r3, r2
 800cebc:	005b      	lsls	r3, r3, #1
 800cebe:	4413      	add	r3, r2
 800cec0:	00db      	lsls	r3, r3, #3
 800cec2:	440b      	add	r3, r1
 800cec4:	3312      	adds	r3, #18
 800cec6:	881b      	ldrh	r3, [r3, #0]
 800cec8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ceca:	8c3b      	ldrh	r3, [r7, #32]
 800cecc:	3301      	adds	r3, #1
 800cece:	b29b      	uxth	r3, r3
 800ced0:	843b      	strh	r3, [r7, #32]
 800ced2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ced6:	2b09      	cmp	r3, #9
 800ced8:	f77f af4c 	ble.w	800cd74 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cedc:	7afb      	ldrb	r3, [r7, #11]
 800cede:	f003 0302 	and.w	r3, r3, #2
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d108      	bne.n	800cef8 <etharp_find_entry+0x1b8>
 800cee6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ceea:	2b0a      	cmp	r3, #10
 800ceec:	d107      	bne.n	800cefe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ceee:	7afb      	ldrb	r3, [r7, #11]
 800cef0:	f003 0301 	and.w	r3, r3, #1
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d102      	bne.n	800cefe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cef8:	f04f 33ff 	mov.w	r3, #4294967295
 800cefc:	e085      	b.n	800d00a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cefe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cf02:	2b09      	cmp	r3, #9
 800cf04:	dc02      	bgt.n	800cf0c <etharp_find_entry+0x1cc>
    i = empty;
 800cf06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf08:	843b      	strh	r3, [r7, #32]
 800cf0a:	e039      	b.n	800cf80 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cf0c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cf10:	2b09      	cmp	r3, #9
 800cf12:	dc14      	bgt.n	800cf3e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cf14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf16:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cf18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf1c:	493d      	ldr	r1, [pc, #244]	; (800d014 <etharp_find_entry+0x2d4>)
 800cf1e:	4613      	mov	r3, r2
 800cf20:	005b      	lsls	r3, r3, #1
 800cf22:	4413      	add	r3, r2
 800cf24:	00db      	lsls	r3, r3, #3
 800cf26:	440b      	add	r3, r1
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d018      	beq.n	800cf60 <etharp_find_entry+0x220>
 800cf2e:	4b3a      	ldr	r3, [pc, #232]	; (800d018 <etharp_find_entry+0x2d8>)
 800cf30:	f240 126d 	movw	r2, #365	; 0x16d
 800cf34:	493b      	ldr	r1, [pc, #236]	; (800d024 <etharp_find_entry+0x2e4>)
 800cf36:	483a      	ldr	r0, [pc, #232]	; (800d020 <etharp_find_entry+0x2e0>)
 800cf38:	f002 f928 	bl	800f18c <iprintf>
 800cf3c:	e010      	b.n	800cf60 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cf3e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cf42:	2b09      	cmp	r3, #9
 800cf44:	dc02      	bgt.n	800cf4c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cf46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cf48:	843b      	strh	r3, [r7, #32]
 800cf4a:	e009      	b.n	800cf60 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cf4c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cf50:	2b09      	cmp	r3, #9
 800cf52:	dc02      	bgt.n	800cf5a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cf54:	8bfb      	ldrh	r3, [r7, #30]
 800cf56:	843b      	strh	r3, [r7, #32]
 800cf58:	e002      	b.n	800cf60 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cf5a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf5e:	e054      	b.n	800d00a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cf60:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf64:	2b09      	cmp	r3, #9
 800cf66:	dd06      	ble.n	800cf76 <etharp_find_entry+0x236>
 800cf68:	4b2b      	ldr	r3, [pc, #172]	; (800d018 <etharp_find_entry+0x2d8>)
 800cf6a:	f240 127f 	movw	r2, #383	; 0x17f
 800cf6e:	492e      	ldr	r1, [pc, #184]	; (800d028 <etharp_find_entry+0x2e8>)
 800cf70:	482b      	ldr	r0, [pc, #172]	; (800d020 <etharp_find_entry+0x2e0>)
 800cf72:	f002 f90b 	bl	800f18c <iprintf>
    etharp_free_entry(i);
 800cf76:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7ff fe06 	bl	800cb8c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cf80:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf84:	2b09      	cmp	r3, #9
 800cf86:	dd06      	ble.n	800cf96 <etharp_find_entry+0x256>
 800cf88:	4b23      	ldr	r3, [pc, #140]	; (800d018 <etharp_find_entry+0x2d8>)
 800cf8a:	f240 1283 	movw	r2, #387	; 0x183
 800cf8e:	4926      	ldr	r1, [pc, #152]	; (800d028 <etharp_find_entry+0x2e8>)
 800cf90:	4823      	ldr	r0, [pc, #140]	; (800d020 <etharp_find_entry+0x2e0>)
 800cf92:	f002 f8fb 	bl	800f18c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cf96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf9a:	491e      	ldr	r1, [pc, #120]	; (800d014 <etharp_find_entry+0x2d4>)
 800cf9c:	4613      	mov	r3, r2
 800cf9e:	005b      	lsls	r3, r3, #1
 800cfa0:	4413      	add	r3, r2
 800cfa2:	00db      	lsls	r3, r3, #3
 800cfa4:	440b      	add	r3, r1
 800cfa6:	3314      	adds	r3, #20
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d006      	beq.n	800cfbc <etharp_find_entry+0x27c>
 800cfae:	4b1a      	ldr	r3, [pc, #104]	; (800d018 <etharp_find_entry+0x2d8>)
 800cfb0:	f240 1285 	movw	r2, #389	; 0x185
 800cfb4:	491d      	ldr	r1, [pc, #116]	; (800d02c <etharp_find_entry+0x2ec>)
 800cfb6:	481a      	ldr	r0, [pc, #104]	; (800d020 <etharp_find_entry+0x2e0>)
 800cfb8:	f002 f8e8 	bl	800f18c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00b      	beq.n	800cfda <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cfc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	6819      	ldr	r1, [r3, #0]
 800cfca:	4812      	ldr	r0, [pc, #72]	; (800d014 <etharp_find_entry+0x2d4>)
 800cfcc:	4613      	mov	r3, r2
 800cfce:	005b      	lsls	r3, r3, #1
 800cfd0:	4413      	add	r3, r2
 800cfd2:	00db      	lsls	r3, r3, #3
 800cfd4:	4403      	add	r3, r0
 800cfd6:	3304      	adds	r3, #4
 800cfd8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cfda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfde:	490d      	ldr	r1, [pc, #52]	; (800d014 <etharp_find_entry+0x2d4>)
 800cfe0:	4613      	mov	r3, r2
 800cfe2:	005b      	lsls	r3, r3, #1
 800cfe4:	4413      	add	r3, r2
 800cfe6:	00db      	lsls	r3, r3, #3
 800cfe8:	440b      	add	r3, r1
 800cfea:	3312      	adds	r3, #18
 800cfec:	2200      	movs	r2, #0
 800cfee:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cff0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cff4:	4907      	ldr	r1, [pc, #28]	; (800d014 <etharp_find_entry+0x2d4>)
 800cff6:	4613      	mov	r3, r2
 800cff8:	005b      	lsls	r3, r3, #1
 800cffa:	4413      	add	r3, r2
 800cffc:	00db      	lsls	r3, r3, #3
 800cffe:	440b      	add	r3, r1
 800d000:	3308      	adds	r3, #8
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d006:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3728      	adds	r7, #40	; 0x28
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	200002a8 	.word	0x200002a8
 800d018:	08012300 	.word	0x08012300
 800d01c:	08012338 	.word	0x08012338
 800d020:	08012378 	.word	0x08012378
 800d024:	080123a0 	.word	0x080123a0
 800d028:	080123b8 	.word	0x080123b8
 800d02c:	080123cc 	.word	0x080123cc

0800d030 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b088      	sub	sp, #32
 800d034:	af02      	add	r7, sp, #8
 800d036:	60f8      	str	r0, [r7, #12]
 800d038:	60b9      	str	r1, [r7, #8]
 800d03a:	607a      	str	r2, [r7, #4]
 800d03c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d044:	2b06      	cmp	r3, #6
 800d046:	d006      	beq.n	800d056 <etharp_update_arp_entry+0x26>
 800d048:	4b48      	ldr	r3, [pc, #288]	; (800d16c <etharp_update_arp_entry+0x13c>)
 800d04a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d04e:	4948      	ldr	r1, [pc, #288]	; (800d170 <etharp_update_arp_entry+0x140>)
 800d050:	4848      	ldr	r0, [pc, #288]	; (800d174 <etharp_update_arp_entry+0x144>)
 800d052:	f002 f89b 	bl	800f18c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d012      	beq.n	800d082 <etharp_update_arp_entry+0x52>
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00e      	beq.n	800d082 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	68f9      	ldr	r1, [r7, #12]
 800d06a:	4618      	mov	r0, r3
 800d06c:	f001 f8fc 	bl	800e268 <ip4_addr_isbroadcast_u32>
 800d070:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d072:	2b00      	cmp	r3, #0
 800d074:	d105      	bne.n	800d082 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d07e:	2be0      	cmp	r3, #224	; 0xe0
 800d080:	d102      	bne.n	800d088 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d082:	f06f 030f 	mvn.w	r3, #15
 800d086:	e06c      	b.n	800d162 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d088:	78fb      	ldrb	r3, [r7, #3]
 800d08a:	68fa      	ldr	r2, [r7, #12]
 800d08c:	4619      	mov	r1, r3
 800d08e:	68b8      	ldr	r0, [r7, #8]
 800d090:	f7ff fe56 	bl	800cd40 <etharp_find_entry>
 800d094:	4603      	mov	r3, r0
 800d096:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d098:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	da02      	bge.n	800d0a6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d0a0:	8afb      	ldrh	r3, [r7, #22]
 800d0a2:	b25b      	sxtb	r3, r3
 800d0a4:	e05d      	b.n	800d162 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d0a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0aa:	4933      	ldr	r1, [pc, #204]	; (800d178 <etharp_update_arp_entry+0x148>)
 800d0ac:	4613      	mov	r3, r2
 800d0ae:	005b      	lsls	r3, r3, #1
 800d0b0:	4413      	add	r3, r2
 800d0b2:	00db      	lsls	r3, r3, #3
 800d0b4:	440b      	add	r3, r1
 800d0b6:	3314      	adds	r3, #20
 800d0b8:	2202      	movs	r2, #2
 800d0ba:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d0bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0c0:	492d      	ldr	r1, [pc, #180]	; (800d178 <etharp_update_arp_entry+0x148>)
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	005b      	lsls	r3, r3, #1
 800d0c6:	4413      	add	r3, r2
 800d0c8:	00db      	lsls	r3, r3, #3
 800d0ca:	440b      	add	r3, r1
 800d0cc:	3308      	adds	r3, #8
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d0d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	005b      	lsls	r3, r3, #1
 800d0da:	4413      	add	r3, r2
 800d0dc:	00db      	lsls	r3, r3, #3
 800d0de:	3308      	adds	r3, #8
 800d0e0:	4a25      	ldr	r2, [pc, #148]	; (800d178 <etharp_update_arp_entry+0x148>)
 800d0e2:	4413      	add	r3, r2
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	2206      	movs	r2, #6
 800d0e8:	6879      	ldr	r1, [r7, #4]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f002 f83b 	bl	800f166 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d0f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0f4:	4920      	ldr	r1, [pc, #128]	; (800d178 <etharp_update_arp_entry+0x148>)
 800d0f6:	4613      	mov	r3, r2
 800d0f8:	005b      	lsls	r3, r3, #1
 800d0fa:	4413      	add	r3, r2
 800d0fc:	00db      	lsls	r3, r3, #3
 800d0fe:	440b      	add	r3, r1
 800d100:	3312      	adds	r3, #18
 800d102:	2200      	movs	r2, #0
 800d104:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d106:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d10a:	491b      	ldr	r1, [pc, #108]	; (800d178 <etharp_update_arp_entry+0x148>)
 800d10c:	4613      	mov	r3, r2
 800d10e:	005b      	lsls	r3, r3, #1
 800d110:	4413      	add	r3, r2
 800d112:	00db      	lsls	r3, r3, #3
 800d114:	440b      	add	r3, r1
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d021      	beq.n	800d160 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d11c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d120:	4915      	ldr	r1, [pc, #84]	; (800d178 <etharp_update_arp_entry+0x148>)
 800d122:	4613      	mov	r3, r2
 800d124:	005b      	lsls	r3, r3, #1
 800d126:	4413      	add	r3, r2
 800d128:	00db      	lsls	r3, r3, #3
 800d12a:	440b      	add	r3, r1
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d130:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d134:	4910      	ldr	r1, [pc, #64]	; (800d178 <etharp_update_arp_entry+0x148>)
 800d136:	4613      	mov	r3, r2
 800d138:	005b      	lsls	r3, r3, #1
 800d13a:	4413      	add	r3, r2
 800d13c:	00db      	lsls	r3, r3, #3
 800d13e:	440b      	add	r3, r1
 800d140:	2200      	movs	r2, #0
 800d142:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800d14a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d14e:	9300      	str	r3, [sp, #0]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6939      	ldr	r1, [r7, #16]
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	f001 ff8b 	bl	800f070 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d15a:	6938      	ldr	r0, [r7, #16]
 800d15c:	f7f9 fa98 	bl	8006690 <pbuf_free>
  }
  return ERR_OK;
 800d160:	2300      	movs	r3, #0
}
 800d162:	4618      	mov	r0, r3
 800d164:	3718      	adds	r7, #24
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	08012300 	.word	0x08012300
 800d170:	080123f8 	.word	0x080123f8
 800d174:	08012378 	.word	0x08012378
 800d178:	200002a8 	.word	0x200002a8

0800d17c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d184:	2300      	movs	r3, #0
 800d186:	60fb      	str	r3, [r7, #12]
 800d188:	e01e      	b.n	800d1c8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d18a:	4913      	ldr	r1, [pc, #76]	; (800d1d8 <etharp_cleanup_netif+0x5c>)
 800d18c:	68fa      	ldr	r2, [r7, #12]
 800d18e:	4613      	mov	r3, r2
 800d190:	005b      	lsls	r3, r3, #1
 800d192:	4413      	add	r3, r2
 800d194:	00db      	lsls	r3, r3, #3
 800d196:	440b      	add	r3, r1
 800d198:	3314      	adds	r3, #20
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d19e:	7afb      	ldrb	r3, [r7, #11]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d00e      	beq.n	800d1c2 <etharp_cleanup_netif+0x46>
 800d1a4:	490c      	ldr	r1, [pc, #48]	; (800d1d8 <etharp_cleanup_netif+0x5c>)
 800d1a6:	68fa      	ldr	r2, [r7, #12]
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	005b      	lsls	r3, r3, #1
 800d1ac:	4413      	add	r3, r2
 800d1ae:	00db      	lsls	r3, r3, #3
 800d1b0:	440b      	add	r3, r1
 800d1b2:	3308      	adds	r3, #8
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d102      	bne.n	800d1c2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	f7ff fce5 	bl	800cb8c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	60fb      	str	r3, [r7, #12]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2b09      	cmp	r3, #9
 800d1cc:	dddd      	ble.n	800d18a <etharp_cleanup_netif+0xe>
    }
  }
}
 800d1ce:	bf00      	nop
 800d1d0:	3710      	adds	r7, #16
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	200002a8 	.word	0x200002a8

0800d1dc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d1dc:	b5b0      	push	{r4, r5, r7, lr}
 800d1de:	b08a      	sub	sp, #40	; 0x28
 800d1e0:	af04      	add	r7, sp, #16
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d107      	bne.n	800d1fc <etharp_input+0x20>
 800d1ec:	4b3d      	ldr	r3, [pc, #244]	; (800d2e4 <etharp_input+0x108>)
 800d1ee:	f240 228a 	movw	r2, #650	; 0x28a
 800d1f2:	493d      	ldr	r1, [pc, #244]	; (800d2e8 <etharp_input+0x10c>)
 800d1f4:	483d      	ldr	r0, [pc, #244]	; (800d2ec <etharp_input+0x110>)
 800d1f6:	f001 ffc9 	bl	800f18c <iprintf>
 800d1fa:	e06f      	b.n	800d2dc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	881b      	ldrh	r3, [r3, #0]
 800d206:	b29b      	uxth	r3, r3
 800d208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d20c:	d10c      	bne.n	800d228 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d212:	2b06      	cmp	r3, #6
 800d214:	d108      	bne.n	800d228 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d21a:	2b04      	cmp	r3, #4
 800d21c:	d104      	bne.n	800d228 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	885b      	ldrh	r3, [r3, #2]
 800d222:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d224:	2b08      	cmp	r3, #8
 800d226:	d003      	beq.n	800d230 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f7f9 fa31 	bl	8006690 <pbuf_free>
    return;
 800d22e:	e055      	b.n	800d2dc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	330e      	adds	r3, #14
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	3318      	adds	r3, #24
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	3304      	adds	r3, #4
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d102      	bne.n	800d250 <etharp_input+0x74>
    for_us = 0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	75fb      	strb	r3, [r7, #23]
 800d24e:	e009      	b.n	800d264 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d250:	68ba      	ldr	r2, [r7, #8]
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	3304      	adds	r3, #4
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	429a      	cmp	r2, r3
 800d25a:	bf0c      	ite	eq
 800d25c:	2301      	moveq	r3, #1
 800d25e:	2300      	movne	r3, #0
 800d260:	b2db      	uxtb	r3, r3
 800d262:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	f103 0208 	add.w	r2, r3, #8
 800d26a:	7dfb      	ldrb	r3, [r7, #23]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d001      	beq.n	800d274 <etharp_input+0x98>
 800d270:	2301      	movs	r3, #1
 800d272:	e000      	b.n	800d276 <etharp_input+0x9a>
 800d274:	2302      	movs	r3, #2
 800d276:	f107 010c 	add.w	r1, r7, #12
 800d27a:	6838      	ldr	r0, [r7, #0]
 800d27c:	f7ff fed8 	bl	800d030 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	88db      	ldrh	r3, [r3, #6]
 800d284:	b29b      	uxth	r3, r3
 800d286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d28a:	d003      	beq.n	800d294 <etharp_input+0xb8>
 800d28c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d290:	d01e      	beq.n	800d2d0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d292:	e020      	b.n	800d2d6 <etharp_input+0xfa>
      if (for_us) {
 800d294:	7dfb      	ldrb	r3, [r7, #23]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d01c      	beq.n	800d2d4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	f103 0022 	add.w	r0, r3, #34	; 0x22
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	f103 0522 	add.w	r5, r3, #34	; 0x22
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d2b0:	693a      	ldr	r2, [r7, #16]
 800d2b2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d2b4:	2102      	movs	r1, #2
 800d2b6:	9103      	str	r1, [sp, #12]
 800d2b8:	f107 010c 	add.w	r1, r7, #12
 800d2bc:	9102      	str	r1, [sp, #8]
 800d2be:	9201      	str	r2, [sp, #4]
 800d2c0:	9300      	str	r3, [sp, #0]
 800d2c2:	462b      	mov	r3, r5
 800d2c4:	4622      	mov	r2, r4
 800d2c6:	4601      	mov	r1, r0
 800d2c8:	6838      	ldr	r0, [r7, #0]
 800d2ca:	f000 faeb 	bl	800d8a4 <etharp_raw>
      break;
 800d2ce:	e001      	b.n	800d2d4 <etharp_input+0xf8>
      break;
 800d2d0:	bf00      	nop
 800d2d2:	e000      	b.n	800d2d6 <etharp_input+0xfa>
      break;
 800d2d4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f7f9 f9da 	bl	8006690 <pbuf_free>
}
 800d2dc:	3718      	adds	r7, #24
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bdb0      	pop	{r4, r5, r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	08012300 	.word	0x08012300
 800d2e8:	08012450 	.word	0x08012450
 800d2ec:	08012378 	.word	0x08012378

0800d2f0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b086      	sub	sp, #24
 800d2f4:	af02      	add	r7, sp, #8
 800d2f6:	60f8      	str	r0, [r7, #12]
 800d2f8:	60b9      	str	r1, [r7, #8]
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d2fe:	79fa      	ldrb	r2, [r7, #7]
 800d300:	4944      	ldr	r1, [pc, #272]	; (800d414 <etharp_output_to_arp_index+0x124>)
 800d302:	4613      	mov	r3, r2
 800d304:	005b      	lsls	r3, r3, #1
 800d306:	4413      	add	r3, r2
 800d308:	00db      	lsls	r3, r3, #3
 800d30a:	440b      	add	r3, r1
 800d30c:	3314      	adds	r3, #20
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	2b01      	cmp	r3, #1
 800d312:	d806      	bhi.n	800d322 <etharp_output_to_arp_index+0x32>
 800d314:	4b40      	ldr	r3, [pc, #256]	; (800d418 <etharp_output_to_arp_index+0x128>)
 800d316:	f240 22ef 	movw	r2, #751	; 0x2ef
 800d31a:	4940      	ldr	r1, [pc, #256]	; (800d41c <etharp_output_to_arp_index+0x12c>)
 800d31c:	4840      	ldr	r0, [pc, #256]	; (800d420 <etharp_output_to_arp_index+0x130>)
 800d31e:	f001 ff35 	bl	800f18c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d322:	79fa      	ldrb	r2, [r7, #7]
 800d324:	493b      	ldr	r1, [pc, #236]	; (800d414 <etharp_output_to_arp_index+0x124>)
 800d326:	4613      	mov	r3, r2
 800d328:	005b      	lsls	r3, r3, #1
 800d32a:	4413      	add	r3, r2
 800d32c:	00db      	lsls	r3, r3, #3
 800d32e:	440b      	add	r3, r1
 800d330:	3314      	adds	r3, #20
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	2b02      	cmp	r3, #2
 800d336:	d153      	bne.n	800d3e0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d338:	79fa      	ldrb	r2, [r7, #7]
 800d33a:	4936      	ldr	r1, [pc, #216]	; (800d414 <etharp_output_to_arp_index+0x124>)
 800d33c:	4613      	mov	r3, r2
 800d33e:	005b      	lsls	r3, r3, #1
 800d340:	4413      	add	r3, r2
 800d342:	00db      	lsls	r3, r3, #3
 800d344:	440b      	add	r3, r1
 800d346:	3312      	adds	r3, #18
 800d348:	881b      	ldrh	r3, [r3, #0]
 800d34a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d34e:	d919      	bls.n	800d384 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d350:	79fa      	ldrb	r2, [r7, #7]
 800d352:	4613      	mov	r3, r2
 800d354:	005b      	lsls	r3, r3, #1
 800d356:	4413      	add	r3, r2
 800d358:	00db      	lsls	r3, r3, #3
 800d35a:	4a2e      	ldr	r2, [pc, #184]	; (800d414 <etharp_output_to_arp_index+0x124>)
 800d35c:	4413      	add	r3, r2
 800d35e:	3304      	adds	r3, #4
 800d360:	4619      	mov	r1, r3
 800d362:	68f8      	ldr	r0, [r7, #12]
 800d364:	f000 fb4c 	bl	800da00 <etharp_request>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d138      	bne.n	800d3e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d36e:	79fa      	ldrb	r2, [r7, #7]
 800d370:	4928      	ldr	r1, [pc, #160]	; (800d414 <etharp_output_to_arp_index+0x124>)
 800d372:	4613      	mov	r3, r2
 800d374:	005b      	lsls	r3, r3, #1
 800d376:	4413      	add	r3, r2
 800d378:	00db      	lsls	r3, r3, #3
 800d37a:	440b      	add	r3, r1
 800d37c:	3314      	adds	r3, #20
 800d37e:	2203      	movs	r2, #3
 800d380:	701a      	strb	r2, [r3, #0]
 800d382:	e02d      	b.n	800d3e0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d384:	79fa      	ldrb	r2, [r7, #7]
 800d386:	4923      	ldr	r1, [pc, #140]	; (800d414 <etharp_output_to_arp_index+0x124>)
 800d388:	4613      	mov	r3, r2
 800d38a:	005b      	lsls	r3, r3, #1
 800d38c:	4413      	add	r3, r2
 800d38e:	00db      	lsls	r3, r3, #3
 800d390:	440b      	add	r3, r1
 800d392:	3312      	adds	r3, #18
 800d394:	881b      	ldrh	r3, [r3, #0]
 800d396:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d39a:	d321      	bcc.n	800d3e0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d39c:	79fa      	ldrb	r2, [r7, #7]
 800d39e:	4613      	mov	r3, r2
 800d3a0:	005b      	lsls	r3, r3, #1
 800d3a2:	4413      	add	r3, r2
 800d3a4:	00db      	lsls	r3, r3, #3
 800d3a6:	4a1b      	ldr	r2, [pc, #108]	; (800d414 <etharp_output_to_arp_index+0x124>)
 800d3a8:	4413      	add	r3, r2
 800d3aa:	1d19      	adds	r1, r3, #4
 800d3ac:	79fa      	ldrb	r2, [r7, #7]
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	005b      	lsls	r3, r3, #1
 800d3b2:	4413      	add	r3, r2
 800d3b4:	00db      	lsls	r3, r3, #3
 800d3b6:	3308      	adds	r3, #8
 800d3b8:	4a16      	ldr	r2, [pc, #88]	; (800d414 <etharp_output_to_arp_index+0x124>)
 800d3ba:	4413      	add	r3, r2
 800d3bc:	3304      	adds	r3, #4
 800d3be:	461a      	mov	r2, r3
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f000 fafb 	bl	800d9bc <etharp_request_dst>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d109      	bne.n	800d3e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d3cc:	79fa      	ldrb	r2, [r7, #7]
 800d3ce:	4911      	ldr	r1, [pc, #68]	; (800d414 <etharp_output_to_arp_index+0x124>)
 800d3d0:	4613      	mov	r3, r2
 800d3d2:	005b      	lsls	r3, r3, #1
 800d3d4:	4413      	add	r3, r2
 800d3d6:	00db      	lsls	r3, r3, #3
 800d3d8:	440b      	add	r3, r1
 800d3da:	3314      	adds	r3, #20
 800d3dc:	2203      	movs	r2, #3
 800d3de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f103 0122 	add.w	r1, r3, #34	; 0x22
 800d3e6:	79fa      	ldrb	r2, [r7, #7]
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	005b      	lsls	r3, r3, #1
 800d3ec:	4413      	add	r3, r2
 800d3ee:	00db      	lsls	r3, r3, #3
 800d3f0:	3308      	adds	r3, #8
 800d3f2:	4a08      	ldr	r2, [pc, #32]	; (800d414 <etharp_output_to_arp_index+0x124>)
 800d3f4:	4413      	add	r3, r2
 800d3f6:	1d1a      	adds	r2, r3, #4
 800d3f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d3fc:	9300      	str	r3, [sp, #0]
 800d3fe:	4613      	mov	r3, r2
 800d400:	460a      	mov	r2, r1
 800d402:	68b9      	ldr	r1, [r7, #8]
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	f001 fe33 	bl	800f070 <ethernet_output>
 800d40a:	4603      	mov	r3, r0
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3710      	adds	r7, #16
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	200002a8 	.word	0x200002a8
 800d418:	08012300 	.word	0x08012300
 800d41c:	08012470 	.word	0x08012470
 800d420:	08012378 	.word	0x08012378

0800d424 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b08a      	sub	sp, #40	; 0x28
 800d428:	af02      	add	r7, sp, #8
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d106      	bne.n	800d448 <etharp_output+0x24>
 800d43a:	4b73      	ldr	r3, [pc, #460]	; (800d608 <etharp_output+0x1e4>)
 800d43c:	f240 321e 	movw	r2, #798	; 0x31e
 800d440:	4972      	ldr	r1, [pc, #456]	; (800d60c <etharp_output+0x1e8>)
 800d442:	4873      	ldr	r0, [pc, #460]	; (800d610 <etharp_output+0x1ec>)
 800d444:	f001 fea2 	bl	800f18c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d106      	bne.n	800d45c <etharp_output+0x38>
 800d44e:	4b6e      	ldr	r3, [pc, #440]	; (800d608 <etharp_output+0x1e4>)
 800d450:	f240 321f 	movw	r2, #799	; 0x31f
 800d454:	496f      	ldr	r1, [pc, #444]	; (800d614 <etharp_output+0x1f0>)
 800d456:	486e      	ldr	r0, [pc, #440]	; (800d610 <etharp_output+0x1ec>)
 800d458:	f001 fe98 	bl	800f18c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d106      	bne.n	800d470 <etharp_output+0x4c>
 800d462:	4b69      	ldr	r3, [pc, #420]	; (800d608 <etharp_output+0x1e4>)
 800d464:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d468:	496b      	ldr	r1, [pc, #428]	; (800d618 <etharp_output+0x1f4>)
 800d46a:	4869      	ldr	r0, [pc, #420]	; (800d610 <etharp_output+0x1ec>)
 800d46c:	f001 fe8e 	bl	800f18c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	68f9      	ldr	r1, [r7, #12]
 800d476:	4618      	mov	r0, r3
 800d478:	f000 fef6 	bl	800e268 <ip4_addr_isbroadcast_u32>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d002      	beq.n	800d488 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d482:	4b66      	ldr	r3, [pc, #408]	; (800d61c <etharp_output+0x1f8>)
 800d484:	61fb      	str	r3, [r7, #28]
 800d486:	e0af      	b.n	800d5e8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d490:	2be0      	cmp	r3, #224	; 0xe0
 800d492:	d118      	bne.n	800d4c6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d494:	2301      	movs	r3, #1
 800d496:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d498:	2300      	movs	r3, #0
 800d49a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d49c:	235e      	movs	r3, #94	; 0x5e
 800d49e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4aa:	b2db      	uxtb	r3, r3
 800d4ac:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	3302      	adds	r3, #2
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	3303      	adds	r3, #3
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d4be:	f107 0310 	add.w	r3, r7, #16
 800d4c2:	61fb      	str	r3, [r7, #28]
 800d4c4:	e090      	b.n	800d5e8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	405a      	eors	r2, r3
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	3308      	adds	r3, #8
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4013      	ands	r3, r2
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d012      	beq.n	800d504 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d4e4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d00b      	beq.n	800d504 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	330c      	adds	r3, #12
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d003      	beq.n	800d4fe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	330c      	adds	r3, #12
 800d4fa:	61bb      	str	r3, [r7, #24]
 800d4fc:	e002      	b.n	800d504 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d4fe:	f06f 0303 	mvn.w	r3, #3
 800d502:	e07d      	b.n	800d600 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d504:	4b46      	ldr	r3, [pc, #280]	; (800d620 <etharp_output+0x1fc>)
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	4619      	mov	r1, r3
 800d50a:	4a46      	ldr	r2, [pc, #280]	; (800d624 <etharp_output+0x200>)
 800d50c:	460b      	mov	r3, r1
 800d50e:	005b      	lsls	r3, r3, #1
 800d510:	440b      	add	r3, r1
 800d512:	00db      	lsls	r3, r3, #3
 800d514:	4413      	add	r3, r2
 800d516:	3314      	adds	r3, #20
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d925      	bls.n	800d56a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d51e:	4b40      	ldr	r3, [pc, #256]	; (800d620 <etharp_output+0x1fc>)
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	4619      	mov	r1, r3
 800d524:	4a3f      	ldr	r2, [pc, #252]	; (800d624 <etharp_output+0x200>)
 800d526:	460b      	mov	r3, r1
 800d528:	005b      	lsls	r3, r3, #1
 800d52a:	440b      	add	r3, r1
 800d52c:	00db      	lsls	r3, r3, #3
 800d52e:	4413      	add	r3, r2
 800d530:	3308      	adds	r3, #8
 800d532:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d534:	68fa      	ldr	r2, [r7, #12]
 800d536:	429a      	cmp	r2, r3
 800d538:	d117      	bne.n	800d56a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	4b38      	ldr	r3, [pc, #224]	; (800d620 <etharp_output+0x1fc>)
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	4618      	mov	r0, r3
 800d544:	4937      	ldr	r1, [pc, #220]	; (800d624 <etharp_output+0x200>)
 800d546:	4603      	mov	r3, r0
 800d548:	005b      	lsls	r3, r3, #1
 800d54a:	4403      	add	r3, r0
 800d54c:	00db      	lsls	r3, r3, #3
 800d54e:	440b      	add	r3, r1
 800d550:	3304      	adds	r3, #4
 800d552:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d554:	429a      	cmp	r2, r3
 800d556:	d108      	bne.n	800d56a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d558:	4b31      	ldr	r3, [pc, #196]	; (800d620 <etharp_output+0x1fc>)
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	461a      	mov	r2, r3
 800d55e:	68b9      	ldr	r1, [r7, #8]
 800d560:	68f8      	ldr	r0, [r7, #12]
 800d562:	f7ff fec5 	bl	800d2f0 <etharp_output_to_arp_index>
 800d566:	4603      	mov	r3, r0
 800d568:	e04a      	b.n	800d600 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d56a:	2300      	movs	r3, #0
 800d56c:	75fb      	strb	r3, [r7, #23]
 800d56e:	e031      	b.n	800d5d4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d570:	7dfa      	ldrb	r2, [r7, #23]
 800d572:	492c      	ldr	r1, [pc, #176]	; (800d624 <etharp_output+0x200>)
 800d574:	4613      	mov	r3, r2
 800d576:	005b      	lsls	r3, r3, #1
 800d578:	4413      	add	r3, r2
 800d57a:	00db      	lsls	r3, r3, #3
 800d57c:	440b      	add	r3, r1
 800d57e:	3314      	adds	r3, #20
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	2b01      	cmp	r3, #1
 800d584:	d923      	bls.n	800d5ce <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d586:	7dfa      	ldrb	r2, [r7, #23]
 800d588:	4926      	ldr	r1, [pc, #152]	; (800d624 <etharp_output+0x200>)
 800d58a:	4613      	mov	r3, r2
 800d58c:	005b      	lsls	r3, r3, #1
 800d58e:	4413      	add	r3, r2
 800d590:	00db      	lsls	r3, r3, #3
 800d592:	440b      	add	r3, r1
 800d594:	3308      	adds	r3, #8
 800d596:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d598:	68fa      	ldr	r2, [r7, #12]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d117      	bne.n	800d5ce <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	6819      	ldr	r1, [r3, #0]
 800d5a2:	7dfa      	ldrb	r2, [r7, #23]
 800d5a4:	481f      	ldr	r0, [pc, #124]	; (800d624 <etharp_output+0x200>)
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	005b      	lsls	r3, r3, #1
 800d5aa:	4413      	add	r3, r2
 800d5ac:	00db      	lsls	r3, r3, #3
 800d5ae:	4403      	add	r3, r0
 800d5b0:	3304      	adds	r3, #4
 800d5b2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d5b4:	4299      	cmp	r1, r3
 800d5b6:	d10a      	bne.n	800d5ce <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d5b8:	4a19      	ldr	r2, [pc, #100]	; (800d620 <etharp_output+0x1fc>)
 800d5ba:	7dfb      	ldrb	r3, [r7, #23]
 800d5bc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d5be:	7dfb      	ldrb	r3, [r7, #23]
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	68b9      	ldr	r1, [r7, #8]
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f7ff fe93 	bl	800d2f0 <etharp_output_to_arp_index>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	e018      	b.n	800d600 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d5ce:	7dfb      	ldrb	r3, [r7, #23]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	75fb      	strb	r3, [r7, #23]
 800d5d4:	7dfb      	ldrb	r3, [r7, #23]
 800d5d6:	2b09      	cmp	r3, #9
 800d5d8:	d9ca      	bls.n	800d570 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d5da:	68ba      	ldr	r2, [r7, #8]
 800d5dc:	69b9      	ldr	r1, [r7, #24]
 800d5de:	68f8      	ldr	r0, [r7, #12]
 800d5e0:	f000 f822 	bl	800d628 <etharp_query>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	e00b      	b.n	800d600 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800d5ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d5f2:	9300      	str	r3, [sp, #0]
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	68b9      	ldr	r1, [r7, #8]
 800d5f8:	68f8      	ldr	r0, [r7, #12]
 800d5fa:	f001 fd39 	bl	800f070 <ethernet_output>
 800d5fe:	4603      	mov	r3, r0
}
 800d600:	4618      	mov	r0, r3
 800d602:	3720      	adds	r7, #32
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	08012300 	.word	0x08012300
 800d60c:	08012450 	.word	0x08012450
 800d610:	08012378 	.word	0x08012378
 800d614:	080124a0 	.word	0x080124a0
 800d618:	08012440 	.word	0x08012440
 800d61c:	08012ab0 	.word	0x08012ab0
 800d620:	20000398 	.word	0x20000398
 800d624:	200002a8 	.word	0x200002a8

0800d628 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b08c      	sub	sp, #48	; 0x30
 800d62c:	af02      	add	r7, sp, #8
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	60b9      	str	r1, [r7, #8]
 800d632:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	3322      	adds	r3, #34	; 0x22
 800d638:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d63a:	23ff      	movs	r3, #255	; 0xff
 800d63c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d640:	2300      	movs	r3, #0
 800d642:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	68f9      	ldr	r1, [r7, #12]
 800d64a:	4618      	mov	r0, r3
 800d64c:	f000 fe0c 	bl	800e268 <ip4_addr_isbroadcast_u32>
 800d650:	4603      	mov	r3, r0
 800d652:	2b00      	cmp	r3, #0
 800d654:	d10c      	bne.n	800d670 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d65e:	2be0      	cmp	r3, #224	; 0xe0
 800d660:	d006      	beq.n	800d670 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d003      	beq.n	800d670 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d102      	bne.n	800d676 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d670:	f06f 030f 	mvn.w	r3, #15
 800d674:	e102      	b.n	800d87c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d676:	68fa      	ldr	r2, [r7, #12]
 800d678:	2101      	movs	r1, #1
 800d67a:	68b8      	ldr	r0, [r7, #8]
 800d67c:	f7ff fb60 	bl	800cd40 <etharp_find_entry>
 800d680:	4603      	mov	r3, r0
 800d682:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d684:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	da02      	bge.n	800d692 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d68c:	8a7b      	ldrh	r3, [r7, #18]
 800d68e:	b25b      	sxtb	r3, r3
 800d690:	e0f4      	b.n	800d87c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d692:	8a7b      	ldrh	r3, [r7, #18]
 800d694:	2b7e      	cmp	r3, #126	; 0x7e
 800d696:	d906      	bls.n	800d6a6 <etharp_query+0x7e>
 800d698:	4b7a      	ldr	r3, [pc, #488]	; (800d884 <etharp_query+0x25c>)
 800d69a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d69e:	497a      	ldr	r1, [pc, #488]	; (800d888 <etharp_query+0x260>)
 800d6a0:	487a      	ldr	r0, [pc, #488]	; (800d88c <etharp_query+0x264>)
 800d6a2:	f001 fd73 	bl	800f18c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d6a6:	8a7b      	ldrh	r3, [r7, #18]
 800d6a8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d6aa:	7c7a      	ldrb	r2, [r7, #17]
 800d6ac:	4978      	ldr	r1, [pc, #480]	; (800d890 <etharp_query+0x268>)
 800d6ae:	4613      	mov	r3, r2
 800d6b0:	005b      	lsls	r3, r3, #1
 800d6b2:	4413      	add	r3, r2
 800d6b4:	00db      	lsls	r3, r3, #3
 800d6b6:	440b      	add	r3, r1
 800d6b8:	3314      	adds	r3, #20
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d115      	bne.n	800d6ec <etharp_query+0xc4>
    is_new_entry = 1;
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d6c4:	7c7a      	ldrb	r2, [r7, #17]
 800d6c6:	4972      	ldr	r1, [pc, #456]	; (800d890 <etharp_query+0x268>)
 800d6c8:	4613      	mov	r3, r2
 800d6ca:	005b      	lsls	r3, r3, #1
 800d6cc:	4413      	add	r3, r2
 800d6ce:	00db      	lsls	r3, r3, #3
 800d6d0:	440b      	add	r3, r1
 800d6d2:	3314      	adds	r3, #20
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d6d8:	7c7a      	ldrb	r2, [r7, #17]
 800d6da:	496d      	ldr	r1, [pc, #436]	; (800d890 <etharp_query+0x268>)
 800d6dc:	4613      	mov	r3, r2
 800d6de:	005b      	lsls	r3, r3, #1
 800d6e0:	4413      	add	r3, r2
 800d6e2:	00db      	lsls	r3, r3, #3
 800d6e4:	440b      	add	r3, r1
 800d6e6:	3308      	adds	r3, #8
 800d6e8:	68fa      	ldr	r2, [r7, #12]
 800d6ea:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d6ec:	7c7a      	ldrb	r2, [r7, #17]
 800d6ee:	4968      	ldr	r1, [pc, #416]	; (800d890 <etharp_query+0x268>)
 800d6f0:	4613      	mov	r3, r2
 800d6f2:	005b      	lsls	r3, r3, #1
 800d6f4:	4413      	add	r3, r2
 800d6f6:	00db      	lsls	r3, r3, #3
 800d6f8:	440b      	add	r3, r1
 800d6fa:	3314      	adds	r3, #20
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d011      	beq.n	800d726 <etharp_query+0xfe>
 800d702:	7c7a      	ldrb	r2, [r7, #17]
 800d704:	4962      	ldr	r1, [pc, #392]	; (800d890 <etharp_query+0x268>)
 800d706:	4613      	mov	r3, r2
 800d708:	005b      	lsls	r3, r3, #1
 800d70a:	4413      	add	r3, r2
 800d70c:	00db      	lsls	r3, r3, #3
 800d70e:	440b      	add	r3, r1
 800d710:	3314      	adds	r3, #20
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	2b01      	cmp	r3, #1
 800d716:	d806      	bhi.n	800d726 <etharp_query+0xfe>
 800d718:	4b5a      	ldr	r3, [pc, #360]	; (800d884 <etharp_query+0x25c>)
 800d71a:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d71e:	495d      	ldr	r1, [pc, #372]	; (800d894 <etharp_query+0x26c>)
 800d720:	485a      	ldr	r0, [pc, #360]	; (800d88c <etharp_query+0x264>)
 800d722:	f001 fd33 	bl	800f18c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d726:	6a3b      	ldr	r3, [r7, #32]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d102      	bne.n	800d732 <etharp_query+0x10a>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d10c      	bne.n	800d74c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d732:	68b9      	ldr	r1, [r7, #8]
 800d734:	68f8      	ldr	r0, [r7, #12]
 800d736:	f000 f963 	bl	800da00 <etharp_request>
 800d73a:	4603      	mov	r3, r0
 800d73c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d102      	bne.n	800d74c <etharp_query+0x124>
      return result;
 800d746:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d74a:	e097      	b.n	800d87c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d106      	bne.n	800d760 <etharp_query+0x138>
 800d752:	4b4c      	ldr	r3, [pc, #304]	; (800d884 <etharp_query+0x25c>)
 800d754:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d758:	494f      	ldr	r1, [pc, #316]	; (800d898 <etharp_query+0x270>)
 800d75a:	484c      	ldr	r0, [pc, #304]	; (800d88c <etharp_query+0x264>)
 800d75c:	f001 fd16 	bl	800f18c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d760:	7c7a      	ldrb	r2, [r7, #17]
 800d762:	494b      	ldr	r1, [pc, #300]	; (800d890 <etharp_query+0x268>)
 800d764:	4613      	mov	r3, r2
 800d766:	005b      	lsls	r3, r3, #1
 800d768:	4413      	add	r3, r2
 800d76a:	00db      	lsls	r3, r3, #3
 800d76c:	440b      	add	r3, r1
 800d76e:	3314      	adds	r3, #20
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	2b01      	cmp	r3, #1
 800d774:	d918      	bls.n	800d7a8 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d776:	4a49      	ldr	r2, [pc, #292]	; (800d89c <etharp_query+0x274>)
 800d778:	7c7b      	ldrb	r3, [r7, #17]
 800d77a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d77c:	7c7a      	ldrb	r2, [r7, #17]
 800d77e:	4613      	mov	r3, r2
 800d780:	005b      	lsls	r3, r3, #1
 800d782:	4413      	add	r3, r2
 800d784:	00db      	lsls	r3, r3, #3
 800d786:	3308      	adds	r3, #8
 800d788:	4a41      	ldr	r2, [pc, #260]	; (800d890 <etharp_query+0x268>)
 800d78a:	4413      	add	r3, r2
 800d78c:	1d1a      	adds	r2, r3, #4
 800d78e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	4613      	mov	r3, r2
 800d796:	697a      	ldr	r2, [r7, #20]
 800d798:	6879      	ldr	r1, [r7, #4]
 800d79a:	68f8      	ldr	r0, [r7, #12]
 800d79c:	f001 fc68 	bl	800f070 <ethernet_output>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d7a6:	e067      	b.n	800d878 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d7a8:	7c7a      	ldrb	r2, [r7, #17]
 800d7aa:	4939      	ldr	r1, [pc, #228]	; (800d890 <etharp_query+0x268>)
 800d7ac:	4613      	mov	r3, r2
 800d7ae:	005b      	lsls	r3, r3, #1
 800d7b0:	4413      	add	r3, r2
 800d7b2:	00db      	lsls	r3, r3, #3
 800d7b4:	440b      	add	r3, r1
 800d7b6:	3314      	adds	r3, #20
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d15c      	bne.n	800d878 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d7c6:	e01c      	b.n	800d802 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	895a      	ldrh	r2, [r3, #10]
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	891b      	ldrh	r3, [r3, #8]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d10a      	bne.n	800d7ea <etharp_query+0x1c2>
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d006      	beq.n	800d7ea <etharp_query+0x1c2>
 800d7dc:	4b29      	ldr	r3, [pc, #164]	; (800d884 <etharp_query+0x25c>)
 800d7de:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d7e2:	492f      	ldr	r1, [pc, #188]	; (800d8a0 <etharp_query+0x278>)
 800d7e4:	4829      	ldr	r0, [pc, #164]	; (800d88c <etharp_query+0x264>)
 800d7e6:	f001 fcd1 	bl	800f18c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	7b1b      	ldrb	r3, [r3, #12]
 800d7ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d002      	beq.n	800d7fc <etharp_query+0x1d4>
        copy_needed = 1;
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	61bb      	str	r3, [r7, #24]
        break;
 800d7fa:	e005      	b.n	800d808 <etharp_query+0x1e0>
      }
      p = p->next;
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d802:	69fb      	ldr	r3, [r7, #28]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d1df      	bne.n	800d7c8 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800d808:	69bb      	ldr	r3, [r7, #24]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d007      	beq.n	800d81e <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d80e:	687a      	ldr	r2, [r7, #4]
 800d810:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d814:	200e      	movs	r0, #14
 800d816:	f7f9 fa39 	bl	8006c8c <pbuf_clone>
 800d81a:	61f8      	str	r0, [r7, #28]
 800d81c:	e004      	b.n	800d828 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d822:	69f8      	ldr	r0, [r7, #28]
 800d824:	f7f8 ffd4 	bl	80067d0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d021      	beq.n	800d872 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d82e:	7c7a      	ldrb	r2, [r7, #17]
 800d830:	4917      	ldr	r1, [pc, #92]	; (800d890 <etharp_query+0x268>)
 800d832:	4613      	mov	r3, r2
 800d834:	005b      	lsls	r3, r3, #1
 800d836:	4413      	add	r3, r2
 800d838:	00db      	lsls	r3, r3, #3
 800d83a:	440b      	add	r3, r1
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d00a      	beq.n	800d858 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d842:	7c7a      	ldrb	r2, [r7, #17]
 800d844:	4912      	ldr	r1, [pc, #72]	; (800d890 <etharp_query+0x268>)
 800d846:	4613      	mov	r3, r2
 800d848:	005b      	lsls	r3, r3, #1
 800d84a:	4413      	add	r3, r2
 800d84c:	00db      	lsls	r3, r3, #3
 800d84e:	440b      	add	r3, r1
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	4618      	mov	r0, r3
 800d854:	f7f8 ff1c 	bl	8006690 <pbuf_free>
      }
      arp_table[i].q = p;
 800d858:	7c7a      	ldrb	r2, [r7, #17]
 800d85a:	490d      	ldr	r1, [pc, #52]	; (800d890 <etharp_query+0x268>)
 800d85c:	4613      	mov	r3, r2
 800d85e:	005b      	lsls	r3, r3, #1
 800d860:	4413      	add	r3, r2
 800d862:	00db      	lsls	r3, r3, #3
 800d864:	440b      	add	r3, r1
 800d866:	69fa      	ldr	r2, [r7, #28]
 800d868:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d86a:	2300      	movs	r3, #0
 800d86c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d870:	e002      	b.n	800d878 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d872:	23ff      	movs	r3, #255	; 0xff
 800d874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d878:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3728      	adds	r7, #40	; 0x28
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}
 800d884:	08012300 	.word	0x08012300
 800d888:	080124ac 	.word	0x080124ac
 800d88c:	08012378 	.word	0x08012378
 800d890:	200002a8 	.word	0x200002a8
 800d894:	080124bc 	.word	0x080124bc
 800d898:	080124a0 	.word	0x080124a0
 800d89c:	20000398 	.word	0x20000398
 800d8a0:	080124e4 	.word	0x080124e4

0800d8a4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b08a      	sub	sp, #40	; 0x28
 800d8a8:	af02      	add	r7, sp, #8
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	607a      	str	r2, [r7, #4]
 800d8b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d106      	bne.n	800d8ca <etharp_raw+0x26>
 800d8bc:	4b3a      	ldr	r3, [pc, #232]	; (800d9a8 <etharp_raw+0x104>)
 800d8be:	f240 4257 	movw	r2, #1111	; 0x457
 800d8c2:	493a      	ldr	r1, [pc, #232]	; (800d9ac <etharp_raw+0x108>)
 800d8c4:	483a      	ldr	r0, [pc, #232]	; (800d9b0 <etharp_raw+0x10c>)
 800d8c6:	f001 fc61 	bl	800f18c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d8ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d8ce:	211c      	movs	r1, #28
 800d8d0:	200e      	movs	r0, #14
 800d8d2:	f7f8 fbfd 	bl	80060d0 <pbuf_alloc>
 800d8d6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d8d8:	69bb      	ldr	r3, [r7, #24]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d102      	bne.n	800d8e4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d8de:	f04f 33ff 	mov.w	r3, #4294967295
 800d8e2:	e05d      	b.n	800d9a0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d8e4:	69bb      	ldr	r3, [r7, #24]
 800d8e6:	895b      	ldrh	r3, [r3, #10]
 800d8e8:	2b1b      	cmp	r3, #27
 800d8ea:	d806      	bhi.n	800d8fa <etharp_raw+0x56>
 800d8ec:	4b2e      	ldr	r3, [pc, #184]	; (800d9a8 <etharp_raw+0x104>)
 800d8ee:	f240 4263 	movw	r2, #1123	; 0x463
 800d8f2:	4930      	ldr	r1, [pc, #192]	; (800d9b4 <etharp_raw+0x110>)
 800d8f4:	482e      	ldr	r0, [pc, #184]	; (800d9b0 <etharp_raw+0x10c>)
 800d8f6:	f001 fc49 	bl	800f18c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d900:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d902:	4618      	mov	r0, r3
 800d904:	f7f7 fc29 	bl	800515a <lwip_htons>
 800d908:	4603      	mov	r3, r0
 800d90a:	461a      	mov	r2, r3
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d916:	2b06      	cmp	r3, #6
 800d918:	d006      	beq.n	800d928 <etharp_raw+0x84>
 800d91a:	4b23      	ldr	r3, [pc, #140]	; (800d9a8 <etharp_raw+0x104>)
 800d91c:	f240 426a 	movw	r2, #1130	; 0x46a
 800d920:	4925      	ldr	r1, [pc, #148]	; (800d9b8 <etharp_raw+0x114>)
 800d922:	4823      	ldr	r0, [pc, #140]	; (800d9b0 <etharp_raw+0x10c>)
 800d924:	f001 fc32 	bl	800f18c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	3308      	adds	r3, #8
 800d92c:	2206      	movs	r2, #6
 800d92e:	6839      	ldr	r1, [r7, #0]
 800d930:	4618      	mov	r0, r3
 800d932:	f001 fc18 	bl	800f166 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	3312      	adds	r3, #18
 800d93a:	2206      	movs	r2, #6
 800d93c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d93e:	4618      	mov	r0, r3
 800d940:	f001 fc11 	bl	800f166 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	330e      	adds	r3, #14
 800d948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d94a:	6812      	ldr	r2, [r2, #0]
 800d94c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	3318      	adds	r3, #24
 800d952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d954:	6812      	ldr	r2, [r2, #0]
 800d956:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	2200      	movs	r2, #0
 800d95c:	701a      	strb	r2, [r3, #0]
 800d95e:	2200      	movs	r2, #0
 800d960:	f042 0201 	orr.w	r2, r2, #1
 800d964:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	2200      	movs	r2, #0
 800d96a:	f042 0208 	orr.w	r2, r2, #8
 800d96e:	709a      	strb	r2, [r3, #2]
 800d970:	2200      	movs	r2, #0
 800d972:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	2206      	movs	r2, #6
 800d978:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	2204      	movs	r2, #4
 800d97e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d980:	f640 0306 	movw	r3, #2054	; 0x806
 800d984:	9300      	str	r3, [sp, #0]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	68ba      	ldr	r2, [r7, #8]
 800d98a:	69b9      	ldr	r1, [r7, #24]
 800d98c:	68f8      	ldr	r0, [r7, #12]
 800d98e:	f001 fb6f 	bl	800f070 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d992:	69b8      	ldr	r0, [r7, #24]
 800d994:	f7f8 fe7c 	bl	8006690 <pbuf_free>
  p = NULL;
 800d998:	2300      	movs	r3, #0
 800d99a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d99c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3720      	adds	r7, #32
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	08012300 	.word	0x08012300
 800d9ac:	08012450 	.word	0x08012450
 800d9b0:	08012378 	.word	0x08012378
 800d9b4:	08012500 	.word	0x08012500
 800d9b8:	08012534 	.word	0x08012534

0800d9bc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b088      	sub	sp, #32
 800d9c0:	af04      	add	r7, sp, #16
 800d9c2:	60f8      	str	r0, [r7, #12]
 800d9c4:	60b9      	str	r1, [r7, #8]
 800d9c6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f103 0022 	add.w	r0, r3, #34	; 0x22
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d9d8:	2201      	movs	r2, #1
 800d9da:	9203      	str	r2, [sp, #12]
 800d9dc:	68ba      	ldr	r2, [r7, #8]
 800d9de:	9202      	str	r2, [sp, #8]
 800d9e0:	4a06      	ldr	r2, [pc, #24]	; (800d9fc <etharp_request_dst+0x40>)
 800d9e2:	9201      	str	r2, [sp, #4]
 800d9e4:	9300      	str	r3, [sp, #0]
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	68f8      	ldr	r0, [r7, #12]
 800d9ec:	f7ff ff5a 	bl	800d8a4 <etharp_raw>
 800d9f0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3710      	adds	r7, #16
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	08012ab8 	.word	0x08012ab8

0800da00 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800da0a:	4a05      	ldr	r2, [pc, #20]	; (800da20 <etharp_request+0x20>)
 800da0c:	6839      	ldr	r1, [r7, #0]
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f7ff ffd4 	bl	800d9bc <etharp_request_dst>
 800da14:	4603      	mov	r3, r0
}
 800da16:	4618      	mov	r0, r3
 800da18:	3708      	adds	r7, #8
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	08012ab0 	.word	0x08012ab0

0800da24 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b08e      	sub	sp, #56	; 0x38
 800da28:	af04      	add	r7, sp, #16
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800da2e:	4b79      	ldr	r3, [pc, #484]	; (800dc14 <icmp_input+0x1f0>)
 800da30:	689b      	ldr	r3, [r3, #8]
 800da32:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800da34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	f003 030f 	and.w	r3, r3, #15
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	009b      	lsls	r3, r3, #2
 800da40:	b2db      	uxtb	r3, r3
 800da42:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800da44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da46:	2b13      	cmp	r3, #19
 800da48:	f240 80cd 	bls.w	800dbe6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	895b      	ldrh	r3, [r3, #10]
 800da50:	2b03      	cmp	r3, #3
 800da52:	f240 80ca 	bls.w	800dbea <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	685b      	ldr	r3, [r3, #4]
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800da60:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800da64:	2b00      	cmp	r3, #0
 800da66:	f000 80b7 	beq.w	800dbd8 <icmp_input+0x1b4>
 800da6a:	2b08      	cmp	r3, #8
 800da6c:	f040 80b7 	bne.w	800dbde <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800da70:	4b69      	ldr	r3, [pc, #420]	; (800dc18 <icmp_input+0x1f4>)
 800da72:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800da74:	4b67      	ldr	r3, [pc, #412]	; (800dc14 <icmp_input+0x1f0>)
 800da76:	695b      	ldr	r3, [r3, #20]
 800da78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da7c:	2be0      	cmp	r3, #224	; 0xe0
 800da7e:	f000 80bb 	beq.w	800dbf8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800da82:	4b64      	ldr	r3, [pc, #400]	; (800dc14 <icmp_input+0x1f0>)
 800da84:	695a      	ldr	r2, [r3, #20]
 800da86:	4b63      	ldr	r3, [pc, #396]	; (800dc14 <icmp_input+0x1f0>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4619      	mov	r1, r3
 800da8c:	4610      	mov	r0, r2
 800da8e:	f000 fbeb 	bl	800e268 <ip4_addr_isbroadcast_u32>
 800da92:	4603      	mov	r3, r0
 800da94:	2b00      	cmp	r3, #0
 800da96:	f040 80b1 	bne.w	800dbfc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	891b      	ldrh	r3, [r3, #8]
 800da9e:	2b07      	cmp	r3, #7
 800daa0:	f240 80a5 	bls.w	800dbee <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800daa4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800daa6:	330e      	adds	r3, #14
 800daa8:	4619      	mov	r1, r3
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7f8 fd5a 	bl	8006564 <pbuf_add_header>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d04b      	beq.n	800db4e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	891a      	ldrh	r2, [r3, #8]
 800daba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dabc:	4413      	add	r3, r2
 800dabe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	891b      	ldrh	r3, [r3, #8]
 800dac4:	8b7a      	ldrh	r2, [r7, #26]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	f0c0 809a 	bcc.w	800dc00 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800dacc:	8b7b      	ldrh	r3, [r7, #26]
 800dace:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dad2:	4619      	mov	r1, r3
 800dad4:	200e      	movs	r0, #14
 800dad6:	f7f8 fafb 	bl	80060d0 <pbuf_alloc>
 800dada:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	f000 8090 	beq.w	800dc04 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	895b      	ldrh	r3, [r3, #10]
 800dae8:	461a      	mov	r2, r3
 800daea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800daec:	3308      	adds	r3, #8
 800daee:	429a      	cmp	r2, r3
 800daf0:	d203      	bcs.n	800dafa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800daf2:	6978      	ldr	r0, [r7, #20]
 800daf4:	f7f8 fdcc 	bl	8006690 <pbuf_free>
          goto icmperr;
 800daf8:	e085      	b.n	800dc06 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800db00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db02:	4618      	mov	r0, r3
 800db04:	f001 fb2f 	bl	800f166 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800db08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db0a:	4619      	mov	r1, r3
 800db0c:	6978      	ldr	r0, [r7, #20]
 800db0e:	f7f8 fd39 	bl	8006584 <pbuf_remove_header>
 800db12:	4603      	mov	r3, r0
 800db14:	2b00      	cmp	r3, #0
 800db16:	d009      	beq.n	800db2c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800db18:	4b40      	ldr	r3, [pc, #256]	; (800dc1c <icmp_input+0x1f8>)
 800db1a:	22b6      	movs	r2, #182	; 0xb6
 800db1c:	4940      	ldr	r1, [pc, #256]	; (800dc20 <icmp_input+0x1fc>)
 800db1e:	4841      	ldr	r0, [pc, #260]	; (800dc24 <icmp_input+0x200>)
 800db20:	f001 fb34 	bl	800f18c <iprintf>
          pbuf_free(r);
 800db24:	6978      	ldr	r0, [r7, #20]
 800db26:	f7f8 fdb3 	bl	8006690 <pbuf_free>
          goto icmperr;
 800db2a:	e06c      	b.n	800dc06 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800db2c:	6879      	ldr	r1, [r7, #4]
 800db2e:	6978      	ldr	r0, [r7, #20]
 800db30:	f7f8 fed6 	bl	80068e0 <pbuf_copy>
 800db34:	4603      	mov	r3, r0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d003      	beq.n	800db42 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800db3a:	6978      	ldr	r0, [r7, #20]
 800db3c:	f7f8 fda8 	bl	8006690 <pbuf_free>
          goto icmperr;
 800db40:	e061      	b.n	800dc06 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f7f8 fda4 	bl	8006690 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	607b      	str	r3, [r7, #4]
 800db4c:	e00f      	b.n	800db6e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800db4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db50:	330e      	adds	r3, #14
 800db52:	4619      	mov	r1, r3
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f7f8 fd15 	bl	8006584 <pbuf_remove_header>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d006      	beq.n	800db6e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800db60:	4b2e      	ldr	r3, [pc, #184]	; (800dc1c <icmp_input+0x1f8>)
 800db62:	22c7      	movs	r2, #199	; 0xc7
 800db64:	4930      	ldr	r1, [pc, #192]	; (800dc28 <icmp_input+0x204>)
 800db66:	482f      	ldr	r0, [pc, #188]	; (800dc24 <icmp_input+0x200>)
 800db68:	f001 fb10 	bl	800f18c <iprintf>
          goto icmperr;
 800db6c:	e04b      	b.n	800dc06 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	685b      	ldr	r3, [r3, #4]
 800db72:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800db74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db76:	4619      	mov	r1, r3
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f7f8 fcf3 	bl	8006564 <pbuf_add_header>
 800db7e:	4603      	mov	r3, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d12b      	bne.n	800dbdc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800db92:	4b20      	ldr	r3, [pc, #128]	; (800dc14 <icmp_input+0x1f0>)
 800db94:	691a      	ldr	r2, [r3, #16]
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	2200      	movs	r2, #0
 800db9e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	2200      	movs	r2, #0
 800dba4:	709a      	strb	r2, [r3, #2]
 800dba6:	2200      	movs	r2, #0
 800dba8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	22ff      	movs	r2, #255	; 0xff
 800dbae:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	729a      	strb	r2, [r3, #10]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	9302      	str	r3, [sp, #8]
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	9301      	str	r3, [sp, #4]
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	9300      	str	r3, [sp, #0]
 800dbc6:	23ff      	movs	r3, #255	; 0xff
 800dbc8:	2200      	movs	r2, #0
 800dbca:	69f9      	ldr	r1, [r7, #28]
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f000 fa73 	bl	800e0b8 <ip4_output_if>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800dbd6:	e001      	b.n	800dbdc <icmp_input+0x1b8>
      break;
 800dbd8:	bf00      	nop
 800dbda:	e000      	b.n	800dbde <icmp_input+0x1ba>
      break;
 800dbdc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f7f8 fd56 	bl	8006690 <pbuf_free>
  return;
 800dbe4:	e013      	b.n	800dc0e <icmp_input+0x1ea>
    goto lenerr;
 800dbe6:	bf00      	nop
 800dbe8:	e002      	b.n	800dbf0 <icmp_input+0x1cc>
    goto lenerr;
 800dbea:	bf00      	nop
 800dbec:	e000      	b.n	800dbf0 <icmp_input+0x1cc>
        goto lenerr;
 800dbee:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f7f8 fd4d 	bl	8006690 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dbf6:	e00a      	b.n	800dc0e <icmp_input+0x1ea>
        goto icmperr;
 800dbf8:	bf00      	nop
 800dbfa:	e004      	b.n	800dc06 <icmp_input+0x1e2>
        goto icmperr;
 800dbfc:	bf00      	nop
 800dbfe:	e002      	b.n	800dc06 <icmp_input+0x1e2>
          goto icmperr;
 800dc00:	bf00      	nop
 800dc02:	e000      	b.n	800dc06 <icmp_input+0x1e2>
          goto icmperr;
 800dc04:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f7f8 fd42 	bl	8006690 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dc0c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dc0e:	3728      	adds	r7, #40	; 0x28
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	20003980 	.word	0x20003980
 800dc18:	20003994 	.word	0x20003994
 800dc1c:	08012578 	.word	0x08012578
 800dc20:	080125b0 	.word	0x080125b0
 800dc24:	080125e8 	.word	0x080125e8
 800dc28:	08012610 	.word	0x08012610

0800dc2c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	460b      	mov	r3, r1
 800dc36:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dc38:	78fb      	ldrb	r3, [r7, #3]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	2103      	movs	r1, #3
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 f814 	bl	800dc6c <icmp_send_response>
}
 800dc44:	bf00      	nop
 800dc46:	3708      	adds	r7, #8
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	460b      	mov	r3, r1
 800dc56:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dc58:	78fb      	ldrb	r3, [r7, #3]
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	210b      	movs	r1, #11
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 f804 	bl	800dc6c <icmp_send_response>
}
 800dc64:	bf00      	nop
 800dc66:	3708      	adds	r7, #8
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b08c      	sub	sp, #48	; 0x30
 800dc70:	af04      	add	r7, sp, #16
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	460b      	mov	r3, r1
 800dc76:	70fb      	strb	r3, [r7, #3]
 800dc78:	4613      	mov	r3, r2
 800dc7a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dc7c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc80:	2124      	movs	r1, #36	; 0x24
 800dc82:	2022      	movs	r0, #34	; 0x22
 800dc84:	f7f8 fa24 	bl	80060d0 <pbuf_alloc>
 800dc88:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d04c      	beq.n	800dd2a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	895b      	ldrh	r3, [r3, #10]
 800dc94:	2b23      	cmp	r3, #35	; 0x23
 800dc96:	d806      	bhi.n	800dca6 <icmp_send_response+0x3a>
 800dc98:	4b26      	ldr	r3, [pc, #152]	; (800dd34 <icmp_send_response+0xc8>)
 800dc9a:	f240 1269 	movw	r2, #361	; 0x169
 800dc9e:	4926      	ldr	r1, [pc, #152]	; (800dd38 <icmp_send_response+0xcc>)
 800dca0:	4826      	ldr	r0, [pc, #152]	; (800dd3c <icmp_send_response+0xd0>)
 800dca2:	f001 fa73 	bl	800f18c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	78fa      	ldrb	r2, [r7, #3]
 800dcb6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	78ba      	ldrb	r2, [r7, #2]
 800dcbc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	711a      	strb	r2, [r3, #4]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	2200      	movs	r2, #0
 800dccc:	719a      	strb	r2, [r3, #6]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800dcd2:	69fb      	ldr	r3, [r7, #28]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	f103 0008 	add.w	r0, r3, #8
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	221c      	movs	r2, #28
 800dce0:	4619      	mov	r1, r3
 800dce2:	f001 fa40 	bl	800f166 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	68db      	ldr	r3, [r3, #12]
 800dcea:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dcec:	f107 030c 	add.w	r3, r7, #12
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f000 f825 	bl	800dd40 <ip4_route>
 800dcf6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d011      	beq.n	800dd22 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	2200      	movs	r2, #0
 800dd02:	709a      	strb	r2, [r3, #2]
 800dd04:	2200      	movs	r2, #0
 800dd06:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800dd08:	f107 020c 	add.w	r2, r7, #12
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	9302      	str	r3, [sp, #8]
 800dd10:	2301      	movs	r3, #1
 800dd12:	9301      	str	r3, [sp, #4]
 800dd14:	2300      	movs	r3, #0
 800dd16:	9300      	str	r3, [sp, #0]
 800dd18:	23ff      	movs	r3, #255	; 0xff
 800dd1a:	2100      	movs	r1, #0
 800dd1c:	69f8      	ldr	r0, [r7, #28]
 800dd1e:	f000 f9cb 	bl	800e0b8 <ip4_output_if>
  }
  pbuf_free(q);
 800dd22:	69f8      	ldr	r0, [r7, #28]
 800dd24:	f7f8 fcb4 	bl	8006690 <pbuf_free>
 800dd28:	e000      	b.n	800dd2c <icmp_send_response+0xc0>
    return;
 800dd2a:	bf00      	nop
}
 800dd2c:	3720      	adds	r7, #32
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	08012578 	.word	0x08012578
 800dd38:	08012644 	.word	0x08012644
 800dd3c:	080125e8 	.word	0x080125e8

0800dd40 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800dd48:	4b33      	ldr	r3, [pc, #204]	; (800de18 <ip4_route+0xd8>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	60fb      	str	r3, [r7, #12]
 800dd4e:	e036      	b.n	800ddbe <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800dd56:	f003 0301 	and.w	r3, r3, #1
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d02b      	beq.n	800ddb8 <ip4_route+0x78>
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800dd66:	089b      	lsrs	r3, r3, #2
 800dd68:	f003 0301 	and.w	r3, r3, #1
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d022      	beq.n	800ddb8 <ip4_route+0x78>
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	3304      	adds	r3, #4
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d01d      	beq.n	800ddb8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	3304      	adds	r3, #4
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	405a      	eors	r2, r3
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	3308      	adds	r3, #8
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4013      	ands	r3, r2
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d101      	bne.n	800dd98 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	e038      	b.n	800de0a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800dd9e:	f003 0302 	and.w	r3, r3, #2
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d108      	bne.n	800ddb8 <ip4_route+0x78>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	330c      	adds	r3, #12
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d101      	bne.n	800ddb8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	e028      	b.n	800de0a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	60fb      	str	r3, [r7, #12]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d1c5      	bne.n	800dd50 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ddc4:	4b15      	ldr	r3, [pc, #84]	; (800de1c <ip4_route+0xdc>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d01a      	beq.n	800de02 <ip4_route+0xc2>
 800ddcc:	4b13      	ldr	r3, [pc, #76]	; (800de1c <ip4_route+0xdc>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ddd4:	f003 0301 	and.w	r3, r3, #1
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d012      	beq.n	800de02 <ip4_route+0xc2>
 800dddc:	4b0f      	ldr	r3, [pc, #60]	; (800de1c <ip4_route+0xdc>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800dde4:	f003 0304 	and.w	r3, r3, #4
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d00a      	beq.n	800de02 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ddec:	4b0b      	ldr	r3, [pc, #44]	; (800de1c <ip4_route+0xdc>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	3304      	adds	r3, #4
 800ddf2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d004      	beq.n	800de02 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	2b7f      	cmp	r3, #127	; 0x7f
 800de00:	d101      	bne.n	800de06 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800de02:	2300      	movs	r3, #0
 800de04:	e001      	b.n	800de0a <ip4_route+0xca>
  }

  return netif_default;
 800de06:	4b05      	ldr	r3, [pc, #20]	; (800de1c <ip4_route+0xdc>)
 800de08:	681b      	ldr	r3, [r3, #0]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3714      	adds	r7, #20
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr
 800de16:	bf00      	nop
 800de18:	20006eb4 	.word	0x20006eb4
 800de1c:	20006eb8 	.word	0x20006eb8

0800de20 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800de2e:	f003 0301 	and.w	r3, r3, #1
 800de32:	b2db      	uxtb	r3, r3
 800de34:	2b00      	cmp	r3, #0
 800de36:	d016      	beq.n	800de66 <ip4_input_accept+0x46>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	3304      	adds	r3, #4
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d011      	beq.n	800de66 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800de42:	4b0b      	ldr	r3, [pc, #44]	; (800de70 <ip4_input_accept+0x50>)
 800de44:	695a      	ldr	r2, [r3, #20]
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	3304      	adds	r3, #4
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d008      	beq.n	800de62 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800de50:	4b07      	ldr	r3, [pc, #28]	; (800de70 <ip4_input_accept+0x50>)
 800de52:	695b      	ldr	r3, [r3, #20]
 800de54:	6879      	ldr	r1, [r7, #4]
 800de56:	4618      	mov	r0, r3
 800de58:	f000 fa06 	bl	800e268 <ip4_addr_isbroadcast_u32>
 800de5c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d001      	beq.n	800de66 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800de62:	2301      	movs	r3, #1
 800de64:	e000      	b.n	800de68 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800de66:	2300      	movs	r3, #0
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3708      	adds	r7, #8
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}
 800de70:	20003980 	.word	0x20003980

0800de74 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b086      	sub	sp, #24
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	091b      	lsrs	r3, r3, #4
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	2b04      	cmp	r3, #4
 800de8e:	d004      	beq.n	800de9a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7f8 fbfd 	bl	8006690 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800de96:	2300      	movs	r3, #0
 800de98:	e105      	b.n	800e0a6 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	f003 030f 	and.w	r3, r3, #15
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	885b      	ldrh	r3, [r3, #2]
 800deae:	b29b      	uxth	r3, r3
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7f7 f952 	bl	800515a <lwip_htons>
 800deb6:	4603      	mov	r3, r0
 800deb8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	891b      	ldrh	r3, [r3, #8]
 800debe:	89ba      	ldrh	r2, [r7, #12]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d204      	bcs.n	800dece <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dec4:	89bb      	ldrh	r3, [r7, #12]
 800dec6:	4619      	mov	r1, r3
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f7f8 fa5b 	bl	8006384 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	895b      	ldrh	r3, [r3, #10]
 800ded2:	89fa      	ldrh	r2, [r7, #14]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d807      	bhi.n	800dee8 <ip4_input+0x74>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	891b      	ldrh	r3, [r3, #8]
 800dedc:	89ba      	ldrh	r2, [r7, #12]
 800dede:	429a      	cmp	r2, r3
 800dee0:	d802      	bhi.n	800dee8 <ip4_input+0x74>
 800dee2:	89fb      	ldrh	r3, [r7, #14]
 800dee4:	2b13      	cmp	r3, #19
 800dee6:	d804      	bhi.n	800def2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f7f8 fbd1 	bl	8006690 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800deee:	2300      	movs	r3, #0
 800def0:	e0d9      	b.n	800e0a6 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	691b      	ldr	r3, [r3, #16]
 800def6:	4a6e      	ldr	r2, [pc, #440]	; (800e0b0 <ip4_input+0x23c>)
 800def8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	68db      	ldr	r3, [r3, #12]
 800defe:	4a6c      	ldr	r2, [pc, #432]	; (800e0b0 <ip4_input+0x23c>)
 800df00:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800df02:	4b6b      	ldr	r3, [pc, #428]	; (800e0b0 <ip4_input+0x23c>)
 800df04:	695b      	ldr	r3, [r3, #20]
 800df06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df0a:	2be0      	cmp	r3, #224	; 0xe0
 800df0c:	d112      	bne.n	800df34 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800df14:	f003 0301 	and.w	r3, r3, #1
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d007      	beq.n	800df2e <ip4_input+0xba>
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	3304      	adds	r3, #4
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d002      	beq.n	800df2e <ip4_input+0xba>
      netif = inp;
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	613b      	str	r3, [r7, #16]
 800df2c:	e02a      	b.n	800df84 <ip4_input+0x110>
    } else {
      netif = NULL;
 800df2e:	2300      	movs	r3, #0
 800df30:	613b      	str	r3, [r7, #16]
 800df32:	e027      	b.n	800df84 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800df34:	6838      	ldr	r0, [r7, #0]
 800df36:	f7ff ff73 	bl	800de20 <ip4_input_accept>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d002      	beq.n	800df46 <ip4_input+0xd2>
      netif = inp;
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	613b      	str	r3, [r7, #16]
 800df44:	e01e      	b.n	800df84 <ip4_input+0x110>
    } else {
      netif = NULL;
 800df46:	2300      	movs	r3, #0
 800df48:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800df4a:	4b59      	ldr	r3, [pc, #356]	; (800e0b0 <ip4_input+0x23c>)
 800df4c:	695b      	ldr	r3, [r3, #20]
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	2b7f      	cmp	r3, #127	; 0x7f
 800df52:	d017      	beq.n	800df84 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800df54:	4b57      	ldr	r3, [pc, #348]	; (800e0b4 <ip4_input+0x240>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	613b      	str	r3, [r7, #16]
 800df5a:	e00e      	b.n	800df7a <ip4_input+0x106>
          if (netif == inp) {
 800df5c:	693a      	ldr	r2, [r7, #16]
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	429a      	cmp	r2, r3
 800df62:	d006      	beq.n	800df72 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800df64:	6938      	ldr	r0, [r7, #16]
 800df66:	f7ff ff5b 	bl	800de20 <ip4_input_accept>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d108      	bne.n	800df82 <ip4_input+0x10e>
 800df70:	e000      	b.n	800df74 <ip4_input+0x100>
            continue;
 800df72:	bf00      	nop
        NETIF_FOREACH(netif) {
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	613b      	str	r3, [r7, #16]
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1ed      	bne.n	800df5c <ip4_input+0xe8>
 800df80:	e000      	b.n	800df84 <ip4_input+0x110>
            break;
 800df82:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800df84:	4b4a      	ldr	r3, [pc, #296]	; (800e0b0 <ip4_input+0x23c>)
 800df86:	691b      	ldr	r3, [r3, #16]
 800df88:	6839      	ldr	r1, [r7, #0]
 800df8a:	4618      	mov	r0, r3
 800df8c:	f000 f96c 	bl	800e268 <ip4_addr_isbroadcast_u32>
 800df90:	4603      	mov	r3, r0
 800df92:	2b00      	cmp	r3, #0
 800df94:	d105      	bne.n	800dfa2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800df96:	4b46      	ldr	r3, [pc, #280]	; (800e0b0 <ip4_input+0x23c>)
 800df98:	691b      	ldr	r3, [r3, #16]
 800df9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800df9e:	2be0      	cmp	r3, #224	; 0xe0
 800dfa0:	d104      	bne.n	800dfac <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f7f8 fb74 	bl	8006690 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	e07c      	b.n	800e0a6 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d104      	bne.n	800dfbc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f7f8 fb6c 	bl	8006690 <pbuf_free>
    return ERR_OK;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	e074      	b.n	800e0a6 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	88db      	ldrh	r3, [r3, #6]
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800dfc8:	4013      	ands	r3, r2
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d00b      	beq.n	800dfe6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 fc90 	bl	800e8f4 <ip4_reass>
 800dfd4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d101      	bne.n	800dfe0 <ip4_input+0x16c>
      return ERR_OK;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	e062      	b.n	800e0a6 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800dfe6:	4a32      	ldr	r2, [pc, #200]	; (800e0b0 <ip4_input+0x23c>)
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800dfec:	4a30      	ldr	r2, [pc, #192]	; (800e0b0 <ip4_input+0x23c>)
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800dff2:	4a2f      	ldr	r2, [pc, #188]	; (800e0b0 <ip4_input+0x23c>)
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	f003 030f 	and.w	r3, r3, #15
 800e000:	b2db      	uxtb	r3, r3
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	b2db      	uxtb	r3, r3
 800e006:	b29a      	uxth	r2, r3
 800e008:	4b29      	ldr	r3, [pc, #164]	; (800e0b0 <ip4_input+0x23c>)
 800e00a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e00c:	89fb      	ldrh	r3, [r7, #14]
 800e00e:	4619      	mov	r1, r3
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f7f8 fab7 	bl	8006584 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	7a5b      	ldrb	r3, [r3, #9]
 800e01a:	2b06      	cmp	r3, #6
 800e01c:	d009      	beq.n	800e032 <ip4_input+0x1be>
 800e01e:	2b11      	cmp	r3, #17
 800e020:	d002      	beq.n	800e028 <ip4_input+0x1b4>
 800e022:	2b01      	cmp	r3, #1
 800e024:	d00a      	beq.n	800e03c <ip4_input+0x1c8>
 800e026:	e00e      	b.n	800e046 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e028:	6839      	ldr	r1, [r7, #0]
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f7fe f9b2 	bl	800c394 <udp_input>
        break;
 800e030:	e026      	b.n	800e080 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e032:	6839      	ldr	r1, [r7, #0]
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f7fa f9e9 	bl	800840c <tcp_input>
        break;
 800e03a:	e021      	b.n	800e080 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e03c:	6839      	ldr	r1, [r7, #0]
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f7ff fcf0 	bl	800da24 <icmp_input>
        break;
 800e044:	e01c      	b.n	800e080 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e046:	4b1a      	ldr	r3, [pc, #104]	; (800e0b0 <ip4_input+0x23c>)
 800e048:	695b      	ldr	r3, [r3, #20]
 800e04a:	6939      	ldr	r1, [r7, #16]
 800e04c:	4618      	mov	r0, r3
 800e04e:	f000 f90b 	bl	800e268 <ip4_addr_isbroadcast_u32>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d10f      	bne.n	800e078 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e058:	4b15      	ldr	r3, [pc, #84]	; (800e0b0 <ip4_input+0x23c>)
 800e05a:	695b      	ldr	r3, [r3, #20]
 800e05c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e060:	2be0      	cmp	r3, #224	; 0xe0
 800e062:	d009      	beq.n	800e078 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e064:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e068:	4619      	mov	r1, r3
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f7f8 fafd 	bl	800666a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e070:	2102      	movs	r1, #2
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f7ff fdda 	bl	800dc2c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f7f8 fb09 	bl	8006690 <pbuf_free>
        break;
 800e07e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e080:	4b0b      	ldr	r3, [pc, #44]	; (800e0b0 <ip4_input+0x23c>)
 800e082:	2200      	movs	r2, #0
 800e084:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e086:	4b0a      	ldr	r3, [pc, #40]	; (800e0b0 <ip4_input+0x23c>)
 800e088:	2200      	movs	r2, #0
 800e08a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e08c:	4b08      	ldr	r3, [pc, #32]	; (800e0b0 <ip4_input+0x23c>)
 800e08e:	2200      	movs	r2, #0
 800e090:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e092:	4b07      	ldr	r3, [pc, #28]	; (800e0b0 <ip4_input+0x23c>)
 800e094:	2200      	movs	r2, #0
 800e096:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e098:	4b05      	ldr	r3, [pc, #20]	; (800e0b0 <ip4_input+0x23c>)
 800e09a:	2200      	movs	r2, #0
 800e09c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e09e:	4b04      	ldr	r3, [pc, #16]	; (800e0b0 <ip4_input+0x23c>)
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e0a4:	2300      	movs	r3, #0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3718      	adds	r7, #24
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	20003980 	.word	0x20003980
 800e0b4:	20006eb4 	.word	0x20006eb4

0800e0b8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b08a      	sub	sp, #40	; 0x28
 800e0bc:	af04      	add	r7, sp, #16
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	607a      	str	r2, [r7, #4]
 800e0c4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d009      	beq.n	800e0e4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d003      	beq.n	800e0de <ip4_output_if+0x26>
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d102      	bne.n	800e0e4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e0:	3304      	adds	r3, #4
 800e0e2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e0e4:	78fa      	ldrb	r2, [r7, #3]
 800e0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e8:	9302      	str	r3, [sp, #8]
 800e0ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e0ee:	9301      	str	r3, [sp, #4]
 800e0f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0f4:	9300      	str	r3, [sp, #0]
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	6979      	ldr	r1, [r7, #20]
 800e0fc:	68f8      	ldr	r0, [r7, #12]
 800e0fe:	f000 f805 	bl	800e10c <ip4_output_if_src>
 800e102:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e104:	4618      	mov	r0, r3
 800e106:	3718      	adds	r7, #24
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b088      	sub	sp, #32
 800e110:	af00      	add	r7, sp, #0
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	60b9      	str	r1, [r7, #8]
 800e116:	607a      	str	r2, [r7, #4]
 800e118:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	7b9b      	ldrb	r3, [r3, #14]
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d006      	beq.n	800e130 <ip4_output_if_src+0x24>
 800e122:	4b4b      	ldr	r3, [pc, #300]	; (800e250 <ip4_output_if_src+0x144>)
 800e124:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e128:	494a      	ldr	r1, [pc, #296]	; (800e254 <ip4_output_if_src+0x148>)
 800e12a:	484b      	ldr	r0, [pc, #300]	; (800e258 <ip4_output_if_src+0x14c>)
 800e12c:	f001 f82e 	bl	800f18c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d060      	beq.n	800e1f8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e136:	2314      	movs	r3, #20
 800e138:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e13a:	2114      	movs	r1, #20
 800e13c:	68f8      	ldr	r0, [r7, #12]
 800e13e:	f7f8 fa11 	bl	8006564 <pbuf_add_header>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d002      	beq.n	800e14e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e148:	f06f 0301 	mvn.w	r3, #1
 800e14c:	e07c      	b.n	800e248 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	895b      	ldrh	r3, [r3, #10]
 800e158:	2b13      	cmp	r3, #19
 800e15a:	d806      	bhi.n	800e16a <ip4_output_if_src+0x5e>
 800e15c:	4b3c      	ldr	r3, [pc, #240]	; (800e250 <ip4_output_if_src+0x144>)
 800e15e:	f240 3289 	movw	r2, #905	; 0x389
 800e162:	493e      	ldr	r1, [pc, #248]	; (800e25c <ip4_output_if_src+0x150>)
 800e164:	483c      	ldr	r0, [pc, #240]	; (800e258 <ip4_output_if_src+0x14c>)
 800e166:	f001 f811 	bl	800f18c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e16a:	69fb      	ldr	r3, [r7, #28]
 800e16c:	78fa      	ldrb	r2, [r7, #3]
 800e16e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e176:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e180:	8b7b      	ldrh	r3, [r7, #26]
 800e182:	089b      	lsrs	r3, r3, #2
 800e184:	b29b      	uxth	r3, r3
 800e186:	b2db      	uxtb	r3, r3
 800e188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e18c:	b2da      	uxtb	r2, r3
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e198:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	891b      	ldrh	r3, [r3, #8]
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7f6 ffdb 	bl	800515a <lwip_htons>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	719a      	strb	r2, [r3, #6]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e1b6:	4b2a      	ldr	r3, [pc, #168]	; (800e260 <ip4_output_if_src+0x154>)
 800e1b8:	881b      	ldrh	r3, [r3, #0]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7f6 ffcd 	bl	800515a <lwip_htons>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e1c8:	4b25      	ldr	r3, [pc, #148]	; (800e260 <ip4_output_if_src+0x154>)
 800e1ca:	881b      	ldrh	r3, [r3, #0]
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	b29a      	uxth	r2, r3
 800e1d0:	4b23      	ldr	r3, [pc, #140]	; (800e260 <ip4_output_if_src+0x154>)
 800e1d2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d104      	bne.n	800e1e4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e1da:	4b22      	ldr	r3, [pc, #136]	; (800e264 <ip4_output_if_src+0x158>)
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	60da      	str	r2, [r3, #12]
 800e1e2:	e003      	b.n	800e1ec <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e1ec:	69fb      	ldr	r3, [r7, #28]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	729a      	strb	r2, [r3, #10]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	72da      	strb	r2, [r3, #11]
 800e1f6:	e00f      	b.n	800e218 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	895b      	ldrh	r3, [r3, #10]
 800e1fc:	2b13      	cmp	r3, #19
 800e1fe:	d802      	bhi.n	800e206 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e200:	f06f 0301 	mvn.w	r3, #1
 800e204:	e020      	b.n	800e248 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	691b      	ldr	r3, [r3, #16]
 800e210:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e212:	f107 0314 	add.w	r3, r7, #20
 800e216:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e21a:	8c1b      	ldrh	r3, [r3, #32]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d00c      	beq.n	800e23a <ip4_output_if_src+0x12e>
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	891a      	ldrh	r2, [r3, #8]
 800e224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e226:	8c1b      	ldrh	r3, [r3, #32]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d906      	bls.n	800e23a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e22c:	687a      	ldr	r2, [r7, #4]
 800e22e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e230:	68f8      	ldr	r0, [r7, #12]
 800e232:	f000 fd4b 	bl	800eccc <ip4_frag>
 800e236:	4603      	mov	r3, r0
 800e238:	e006      	b.n	800e248 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e23c:	695b      	ldr	r3, [r3, #20]
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	68f9      	ldr	r1, [r7, #12]
 800e242:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e244:	4798      	blx	r3
 800e246:	4603      	mov	r3, r0
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3720      	adds	r7, #32
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	08012670 	.word	0x08012670
 800e254:	080126a4 	.word	0x080126a4
 800e258:	080126b0 	.word	0x080126b0
 800e25c:	080126d8 	.word	0x080126d8
 800e260:	2000039a 	.word	0x2000039a
 800e264:	08012aac 	.word	0x08012aac

0800e268 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e268:	b480      	push	{r7}
 800e26a:	b085      	sub	sp, #20
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e27c:	d002      	beq.n	800e284 <ip4_addr_isbroadcast_u32+0x1c>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d101      	bne.n	800e288 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e284:	2301      	movs	r3, #1
 800e286:	e02a      	b.n	800e2de <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e28e:	f003 0302 	and.w	r3, r3, #2
 800e292:	2b00      	cmp	r3, #0
 800e294:	d101      	bne.n	800e29a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e296:	2300      	movs	r3, #0
 800e298:	e021      	b.n	800e2de <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	3304      	adds	r3, #4
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	687a      	ldr	r2, [r7, #4]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d101      	bne.n	800e2aa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	e019      	b.n	800e2de <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e2aa:	68fa      	ldr	r2, [r7, #12]
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	3304      	adds	r3, #4
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	405a      	eors	r2, r3
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	3308      	adds	r3, #8
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4013      	ands	r3, r2
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d10d      	bne.n	800e2dc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	3308      	adds	r3, #8
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	43da      	mvns	r2, r3
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	3308      	adds	r3, #8
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d101      	bne.n	800e2dc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	e000      	b.n	800e2de <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e2dc:	2300      	movs	r3, #0
  }
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3714      	adds	r7, #20
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e8:	4770      	bx	lr
	...

0800e2ec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e2f6:	4b12      	ldr	r3, [pc, #72]	; (800e340 <ip_reass_tmr+0x54>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e2fc:	e018      	b.n	800e330 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	7fdb      	ldrb	r3, [r3, #31]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d00b      	beq.n	800e31e <ip_reass_tmr+0x32>
      r->timer--;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	7fdb      	ldrb	r3, [r3, #31]
 800e30a:	3b01      	subs	r3, #1
 800e30c:	b2da      	uxtb	r2, r3
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	60fb      	str	r3, [r7, #12]
 800e31c:	e008      	b.n	800e330 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e328:	68b9      	ldr	r1, [r7, #8]
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 f80a 	bl	800e344 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d1e3      	bne.n	800e2fe <ip_reass_tmr+0x12>
    }
  }
}
 800e336:	bf00      	nop
 800e338:	3710      	adds	r7, #16
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	2000039c 	.word	0x2000039c

0800e344 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b088      	sub	sp, #32
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e34e:	2300      	movs	r3, #0
 800e350:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e352:	683a      	ldr	r2, [r7, #0]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	429a      	cmp	r2, r3
 800e358:	d105      	bne.n	800e366 <ip_reass_free_complete_datagram+0x22>
 800e35a:	4b45      	ldr	r3, [pc, #276]	; (800e470 <ip_reass_free_complete_datagram+0x12c>)
 800e35c:	22ab      	movs	r2, #171	; 0xab
 800e35e:	4945      	ldr	r1, [pc, #276]	; (800e474 <ip_reass_free_complete_datagram+0x130>)
 800e360:	4845      	ldr	r0, [pc, #276]	; (800e478 <ip_reass_free_complete_datagram+0x134>)
 800e362:	f000 ff13 	bl	800f18c <iprintf>
  if (prev != NULL) {
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d00a      	beq.n	800e382 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	429a      	cmp	r2, r3
 800e374:	d005      	beq.n	800e382 <ip_reass_free_complete_datagram+0x3e>
 800e376:	4b3e      	ldr	r3, [pc, #248]	; (800e470 <ip_reass_free_complete_datagram+0x12c>)
 800e378:	22ad      	movs	r2, #173	; 0xad
 800e37a:	4940      	ldr	r1, [pc, #256]	; (800e47c <ip_reass_free_complete_datagram+0x138>)
 800e37c:	483e      	ldr	r0, [pc, #248]	; (800e478 <ip_reass_free_complete_datagram+0x134>)
 800e37e:	f000 ff05 	bl	800f18c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	685b      	ldr	r3, [r3, #4]
 800e388:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	889b      	ldrh	r3, [r3, #4]
 800e38e:	b29b      	uxth	r3, r3
 800e390:	2b00      	cmp	r3, #0
 800e392:	d12a      	bne.n	800e3ea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e3a2:	69bb      	ldr	r3, [r7, #24]
 800e3a4:	6858      	ldr	r0, [r3, #4]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	3308      	adds	r3, #8
 800e3aa:	2214      	movs	r2, #20
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	f000 feda 	bl	800f166 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e3b2:	2101      	movs	r1, #1
 800e3b4:	69b8      	ldr	r0, [r7, #24]
 800e3b6:	f7ff fc49 	bl	800dc4c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e3ba:	69b8      	ldr	r0, [r7, #24]
 800e3bc:	f7f8 f9f0 	bl	80067a0 <pbuf_clen>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e3c4:	8bfa      	ldrh	r2, [r7, #30]
 800e3c6:	8a7b      	ldrh	r3, [r7, #18]
 800e3c8:	4413      	add	r3, r2
 800e3ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3ce:	db05      	blt.n	800e3dc <ip_reass_free_complete_datagram+0x98>
 800e3d0:	4b27      	ldr	r3, [pc, #156]	; (800e470 <ip_reass_free_complete_datagram+0x12c>)
 800e3d2:	22bc      	movs	r2, #188	; 0xbc
 800e3d4:	492a      	ldr	r1, [pc, #168]	; (800e480 <ip_reass_free_complete_datagram+0x13c>)
 800e3d6:	4828      	ldr	r0, [pc, #160]	; (800e478 <ip_reass_free_complete_datagram+0x134>)
 800e3d8:	f000 fed8 	bl	800f18c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e3dc:	8bfa      	ldrh	r2, [r7, #30]
 800e3de:	8a7b      	ldrh	r3, [r7, #18]
 800e3e0:	4413      	add	r3, r2
 800e3e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e3e4:	69b8      	ldr	r0, [r7, #24]
 800e3e6:	f7f8 f953 	bl	8006690 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e3f0:	e01f      	b.n	800e432 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e3f2:	69bb      	ldr	r3, [r7, #24]
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e402:	68f8      	ldr	r0, [r7, #12]
 800e404:	f7f8 f9cc 	bl	80067a0 <pbuf_clen>
 800e408:	4603      	mov	r3, r0
 800e40a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e40c:	8bfa      	ldrh	r2, [r7, #30]
 800e40e:	8a7b      	ldrh	r3, [r7, #18]
 800e410:	4413      	add	r3, r2
 800e412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e416:	db05      	blt.n	800e424 <ip_reass_free_complete_datagram+0xe0>
 800e418:	4b15      	ldr	r3, [pc, #84]	; (800e470 <ip_reass_free_complete_datagram+0x12c>)
 800e41a:	22cc      	movs	r2, #204	; 0xcc
 800e41c:	4918      	ldr	r1, [pc, #96]	; (800e480 <ip_reass_free_complete_datagram+0x13c>)
 800e41e:	4816      	ldr	r0, [pc, #88]	; (800e478 <ip_reass_free_complete_datagram+0x134>)
 800e420:	f000 feb4 	bl	800f18c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e424:	8bfa      	ldrh	r2, [r7, #30]
 800e426:	8a7b      	ldrh	r3, [r7, #18]
 800e428:	4413      	add	r3, r2
 800e42a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f7f8 f92f 	bl	8006690 <pbuf_free>
  while (p != NULL) {
 800e432:	69bb      	ldr	r3, [r7, #24]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d1dc      	bne.n	800e3f2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e438:	6839      	ldr	r1, [r7, #0]
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 f8c2 	bl	800e5c4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e440:	4b10      	ldr	r3, [pc, #64]	; (800e484 <ip_reass_free_complete_datagram+0x140>)
 800e442:	881b      	ldrh	r3, [r3, #0]
 800e444:	8bfa      	ldrh	r2, [r7, #30]
 800e446:	429a      	cmp	r2, r3
 800e448:	d905      	bls.n	800e456 <ip_reass_free_complete_datagram+0x112>
 800e44a:	4b09      	ldr	r3, [pc, #36]	; (800e470 <ip_reass_free_complete_datagram+0x12c>)
 800e44c:	22d2      	movs	r2, #210	; 0xd2
 800e44e:	490e      	ldr	r1, [pc, #56]	; (800e488 <ip_reass_free_complete_datagram+0x144>)
 800e450:	4809      	ldr	r0, [pc, #36]	; (800e478 <ip_reass_free_complete_datagram+0x134>)
 800e452:	f000 fe9b 	bl	800f18c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e456:	4b0b      	ldr	r3, [pc, #44]	; (800e484 <ip_reass_free_complete_datagram+0x140>)
 800e458:	881a      	ldrh	r2, [r3, #0]
 800e45a:	8bfb      	ldrh	r3, [r7, #30]
 800e45c:	1ad3      	subs	r3, r2, r3
 800e45e:	b29a      	uxth	r2, r3
 800e460:	4b08      	ldr	r3, [pc, #32]	; (800e484 <ip_reass_free_complete_datagram+0x140>)
 800e462:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e464:	8bfb      	ldrh	r3, [r7, #30]
}
 800e466:	4618      	mov	r0, r3
 800e468:	3720      	adds	r7, #32
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	08012708 	.word	0x08012708
 800e474:	08012744 	.word	0x08012744
 800e478:	08012750 	.word	0x08012750
 800e47c:	08012778 	.word	0x08012778
 800e480:	0801278c 	.word	0x0801278c
 800e484:	200003a0 	.word	0x200003a0
 800e488:	080127ac 	.word	0x080127ac

0800e48c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b08a      	sub	sp, #40	; 0x28
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e496:	2300      	movs	r3, #0
 800e498:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e49a:	2300      	movs	r3, #0
 800e49c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e4aa:	4b28      	ldr	r3, [pc, #160]	; (800e54c <ip_reass_remove_oldest_datagram+0xc0>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e4b0:	e030      	b.n	800e514 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b4:	695a      	ldr	r2, [r3, #20]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d10c      	bne.n	800e4d8 <ip_reass_remove_oldest_datagram+0x4c>
 800e4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c0:	699a      	ldr	r2, [r3, #24]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	691b      	ldr	r3, [r3, #16]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d106      	bne.n	800e4d8 <ip_reass_remove_oldest_datagram+0x4c>
 800e4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4cc:	899a      	ldrh	r2, [r3, #12]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	889b      	ldrh	r3, [r3, #4]
 800e4d2:	b29b      	uxth	r3, r3
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d014      	beq.n	800e502 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	3301      	adds	r3, #1
 800e4dc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e4de:	6a3b      	ldr	r3, [r7, #32]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d104      	bne.n	800e4ee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e4e8:	69fb      	ldr	r3, [r7, #28]
 800e4ea:	61bb      	str	r3, [r7, #24]
 800e4ec:	e009      	b.n	800e502 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f0:	7fda      	ldrb	r2, [r3, #31]
 800e4f2:	6a3b      	ldr	r3, [r7, #32]
 800e4f4:	7fdb      	ldrb	r3, [r3, #31]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d803      	bhi.n	800e502 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e4fe:	69fb      	ldr	r3, [r7, #28]
 800e500:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d001      	beq.n	800e50e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e516:	2b00      	cmp	r3, #0
 800e518:	d1cb      	bne.n	800e4b2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e51a:	6a3b      	ldr	r3, [r7, #32]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d008      	beq.n	800e532 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e520:	69b9      	ldr	r1, [r7, #24]
 800e522:	6a38      	ldr	r0, [r7, #32]
 800e524:	f7ff ff0e 	bl	800e344 <ip_reass_free_complete_datagram>
 800e528:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e52a:	697a      	ldr	r2, [r7, #20]
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	4413      	add	r3, r2
 800e530:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e532:	697a      	ldr	r2, [r7, #20]
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	429a      	cmp	r2, r3
 800e538:	da02      	bge.n	800e540 <ip_reass_remove_oldest_datagram+0xb4>
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	2b01      	cmp	r3, #1
 800e53e:	dcac      	bgt.n	800e49a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e540:	697b      	ldr	r3, [r7, #20]
}
 800e542:	4618      	mov	r0, r3
 800e544:	3728      	adds	r7, #40	; 0x28
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	2000039c 	.word	0x2000039c

0800e550 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e55a:	2004      	movs	r0, #4
 800e55c:	f7f7 fa52 	bl	8005a04 <memp_malloc>
 800e560:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d110      	bne.n	800e58a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e568:	6839      	ldr	r1, [r7, #0]
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f7ff ff8e 	bl	800e48c <ip_reass_remove_oldest_datagram>
 800e570:	4602      	mov	r2, r0
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	4293      	cmp	r3, r2
 800e576:	dc03      	bgt.n	800e580 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e578:	2004      	movs	r0, #4
 800e57a:	f7f7 fa43 	bl	8005a04 <memp_malloc>
 800e57e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d101      	bne.n	800e58a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e586:	2300      	movs	r3, #0
 800e588:	e016      	b.n	800e5b8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e58a:	2220      	movs	r2, #32
 800e58c:	2100      	movs	r1, #0
 800e58e:	68f8      	ldr	r0, [r7, #12]
 800e590:	f000 fdf4 	bl	800f17c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	220f      	movs	r2, #15
 800e598:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e59a:	4b09      	ldr	r3, [pc, #36]	; (800e5c0 <ip_reass_enqueue_new_datagram+0x70>)
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e5a2:	4a07      	ldr	r2, [pc, #28]	; (800e5c0 <ip_reass_enqueue_new_datagram+0x70>)
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	3308      	adds	r3, #8
 800e5ac:	2214      	movs	r2, #20
 800e5ae:	6879      	ldr	r1, [r7, #4]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f000 fdd8 	bl	800f166 <memcpy>
  return ipr;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3710      	adds	r7, #16
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}
 800e5c0:	2000039c 	.word	0x2000039c

0800e5c4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e5ce:	4b10      	ldr	r3, [pc, #64]	; (800e610 <ip_reass_dequeue_datagram+0x4c>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	687a      	ldr	r2, [r7, #4]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d104      	bne.n	800e5e2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a0c      	ldr	r2, [pc, #48]	; (800e610 <ip_reass_dequeue_datagram+0x4c>)
 800e5de:	6013      	str	r3, [r2, #0]
 800e5e0:	e00d      	b.n	800e5fe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d106      	bne.n	800e5f6 <ip_reass_dequeue_datagram+0x32>
 800e5e8:	4b0a      	ldr	r3, [pc, #40]	; (800e614 <ip_reass_dequeue_datagram+0x50>)
 800e5ea:	f240 1245 	movw	r2, #325	; 0x145
 800e5ee:	490a      	ldr	r1, [pc, #40]	; (800e618 <ip_reass_dequeue_datagram+0x54>)
 800e5f0:	480a      	ldr	r0, [pc, #40]	; (800e61c <ip_reass_dequeue_datagram+0x58>)
 800e5f2:	f000 fdcb 	bl	800f18c <iprintf>
    prev->next = ipr->next;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681a      	ldr	r2, [r3, #0]
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e5fe:	6879      	ldr	r1, [r7, #4]
 800e600:	2004      	movs	r0, #4
 800e602:	f7f7 fa4b 	bl	8005a9c <memp_free>
}
 800e606:	bf00      	nop
 800e608:	3708      	adds	r7, #8
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop
 800e610:	2000039c 	.word	0x2000039c
 800e614:	08012708 	.word	0x08012708
 800e618:	080127d0 	.word	0x080127d0
 800e61c:	08012750 	.word	0x08012750

0800e620 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b08c      	sub	sp, #48	; 0x30
 800e624:	af00      	add	r7, sp, #0
 800e626:	60f8      	str	r0, [r7, #12]
 800e628:	60b9      	str	r1, [r7, #8]
 800e62a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e62c:	2300      	movs	r3, #0
 800e62e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e630:	2301      	movs	r3, #1
 800e632:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	885b      	ldrh	r3, [r3, #2]
 800e63e:	b29b      	uxth	r3, r3
 800e640:	4618      	mov	r0, r3
 800e642:	f7f6 fd8a 	bl	800515a <lwip_htons>
 800e646:	4603      	mov	r3, r0
 800e648:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e64a:	69fb      	ldr	r3, [r7, #28]
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	f003 030f 	and.w	r3, r3, #15
 800e652:	b2db      	uxtb	r3, r3
 800e654:	009b      	lsls	r3, r3, #2
 800e656:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e658:	7e7b      	ldrb	r3, [r7, #25]
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	8b7a      	ldrh	r2, [r7, #26]
 800e65e:	429a      	cmp	r2, r3
 800e660:	d202      	bcs.n	800e668 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e662:	f04f 33ff 	mov.w	r3, #4294967295
 800e666:	e135      	b.n	800e8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e668:	7e7b      	ldrb	r3, [r7, #25]
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	8b7a      	ldrh	r2, [r7, #26]
 800e66e:	1ad3      	subs	r3, r2, r3
 800e670:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e672:	69fb      	ldr	r3, [r7, #28]
 800e674:	88db      	ldrh	r3, [r3, #6]
 800e676:	b29b      	uxth	r3, r3
 800e678:	4618      	mov	r0, r3
 800e67a:	f7f6 fd6e 	bl	800515a <lwip_htons>
 800e67e:	4603      	mov	r3, r0
 800e680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e684:	b29b      	uxth	r3, r3
 800e686:	00db      	lsls	r3, r3, #3
 800e688:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e692:	2200      	movs	r2, #0
 800e694:	701a      	strb	r2, [r3, #0]
 800e696:	2200      	movs	r2, #0
 800e698:	705a      	strb	r2, [r3, #1]
 800e69a:	2200      	movs	r2, #0
 800e69c:	709a      	strb	r2, [r3, #2]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a4:	8afa      	ldrh	r2, [r7, #22]
 800e6a6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e6a8:	8afa      	ldrh	r2, [r7, #22]
 800e6aa:	8b7b      	ldrh	r3, [r7, #26]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	b29a      	uxth	r2, r3
 800e6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b6:	88db      	ldrh	r3, [r3, #6]
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	8afa      	ldrh	r2, [r7, #22]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d902      	bls.n	800e6c6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6c4:	e106      	b.n	800e8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	685b      	ldr	r3, [r3, #4]
 800e6ca:	627b      	str	r3, [r7, #36]	; 0x24
 800e6cc:	e068      	b.n	800e7a0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d6:	889b      	ldrh	r3, [r3, #4]
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	889b      	ldrh	r3, [r3, #4]
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d235      	bcs.n	800e750 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d020      	beq.n	800e732 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f2:	889b      	ldrh	r3, [r3, #4]
 800e6f4:	b29a      	uxth	r2, r3
 800e6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f8:	88db      	ldrh	r3, [r3, #6]
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d307      	bcc.n	800e710 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e702:	88db      	ldrh	r3, [r3, #6]
 800e704:	b29a      	uxth	r2, r3
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	889b      	ldrh	r3, [r3, #4]
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d902      	bls.n	800e716 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e710:	f04f 33ff 	mov.w	r3, #4294967295
 800e714:	e0de      	b.n	800e8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e718:	68ba      	ldr	r2, [r7, #8]
 800e71a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71e:	88db      	ldrh	r3, [r3, #6]
 800e720:	b29a      	uxth	r2, r3
 800e722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e724:	889b      	ldrh	r3, [r3, #4]
 800e726:	b29b      	uxth	r3, r3
 800e728:	429a      	cmp	r2, r3
 800e72a:	d03d      	beq.n	800e7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e72c:	2300      	movs	r3, #0
 800e72e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e730:	e03a      	b.n	800e7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e734:	88db      	ldrh	r3, [r3, #6]
 800e736:	b29a      	uxth	r2, r3
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	889b      	ldrh	r3, [r3, #4]
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	429a      	cmp	r2, r3
 800e740:	d902      	bls.n	800e748 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e742:	f04f 33ff 	mov.w	r3, #4294967295
 800e746:	e0c5      	b.n	800e8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	68ba      	ldr	r2, [r7, #8]
 800e74c:	605a      	str	r2, [r3, #4]
      break;
 800e74e:	e02b      	b.n	800e7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e752:	889b      	ldrh	r3, [r3, #4]
 800e754:	b29a      	uxth	r2, r3
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	889b      	ldrh	r3, [r3, #4]
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d102      	bne.n	800e766 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e760:	f04f 33ff 	mov.w	r3, #4294967295
 800e764:	e0b6      	b.n	800e8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e768:	889b      	ldrh	r3, [r3, #4]
 800e76a:	b29a      	uxth	r2, r3
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	88db      	ldrh	r3, [r3, #6]
 800e770:	b29b      	uxth	r3, r3
 800e772:	429a      	cmp	r2, r3
 800e774:	d202      	bcs.n	800e77c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e776:	f04f 33ff 	mov.w	r3, #4294967295
 800e77a:	e0ab      	b.n	800e8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d009      	beq.n	800e796 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e784:	88db      	ldrh	r3, [r3, #6]
 800e786:	b29a      	uxth	r2, r3
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	889b      	ldrh	r3, [r3, #4]
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	429a      	cmp	r2, r3
 800e790:	d001      	beq.n	800e796 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e792:	2300      	movs	r3, #0
 800e794:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d193      	bne.n	800e6ce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e7a6:	e000      	b.n	800e7aa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e7a8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d12d      	bne.n	800e80c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d01c      	beq.n	800e7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b8:	88db      	ldrh	r3, [r3, #6]
 800e7ba:	b29a      	uxth	r2, r3
 800e7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7be:	889b      	ldrh	r3, [r3, #4]
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d906      	bls.n	800e7d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e7c6:	4b45      	ldr	r3, [pc, #276]	; (800e8dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e7c8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e7cc:	4944      	ldr	r1, [pc, #272]	; (800e8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e7ce:	4845      	ldr	r0, [pc, #276]	; (800e8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e7d0:	f000 fcdc 	bl	800f18c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d6:	68ba      	ldr	r2, [r7, #8]
 800e7d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7dc:	88db      	ldrh	r3, [r3, #6]
 800e7de:	b29a      	uxth	r2, r3
 800e7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e2:	889b      	ldrh	r3, [r3, #4]
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d010      	beq.n	800e80c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	623b      	str	r3, [r7, #32]
 800e7ee:	e00d      	b.n	800e80c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d006      	beq.n	800e806 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e7f8:	4b38      	ldr	r3, [pc, #224]	; (800e8dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e7fa:	f240 12bf 	movw	r2, #447	; 0x1bf
 800e7fe:	493a      	ldr	r1, [pc, #232]	; (800e8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e800:	4838      	ldr	r0, [pc, #224]	; (800e8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e802:	f000 fcc3 	bl	800f18c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	68ba      	ldr	r2, [r7, #8]
 800e80a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d105      	bne.n	800e81e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	7f9b      	ldrb	r3, [r3, #30]
 800e816:	f003 0301 	and.w	r3, r3, #1
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d059      	beq.n	800e8d2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e81e:	6a3b      	ldr	r3, [r7, #32]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d04f      	beq.n	800e8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d006      	beq.n	800e83a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	685b      	ldr	r3, [r3, #4]
 800e832:	889b      	ldrh	r3, [r3, #4]
 800e834:	b29b      	uxth	r3, r3
 800e836:	2b00      	cmp	r3, #0
 800e838:	d002      	beq.n	800e840 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e83a:	2300      	movs	r3, #0
 800e83c:	623b      	str	r3, [r7, #32]
 800e83e:	e041      	b.n	800e8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e842:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e84a:	e012      	b.n	800e872 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e854:	88db      	ldrh	r3, [r3, #6]
 800e856:	b29a      	uxth	r2, r3
 800e858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85a:	889b      	ldrh	r3, [r3, #4]
 800e85c:	b29b      	uxth	r3, r3
 800e85e:	429a      	cmp	r2, r3
 800e860:	d002      	beq.n	800e868 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e862:	2300      	movs	r3, #0
 800e864:	623b      	str	r3, [r7, #32]
            break;
 800e866:	e007      	b.n	800e878 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e874:	2b00      	cmp	r3, #0
 800e876:	d1e9      	bne.n	800e84c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e878:	6a3b      	ldr	r3, [r7, #32]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d022      	beq.n	800e8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d106      	bne.n	800e894 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e886:	4b15      	ldr	r3, [pc, #84]	; (800e8dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e888:	f240 12df 	movw	r2, #479	; 0x1df
 800e88c:	4917      	ldr	r1, [pc, #92]	; (800e8ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e88e:	4815      	ldr	r0, [pc, #84]	; (800e8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e890:	f000 fc7c 	bl	800f18c <iprintf>
          LWIP_ASSERT("sanity check",
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d106      	bne.n	800e8ae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e8a0:	4b0e      	ldr	r3, [pc, #56]	; (800e8dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e8a2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e8a6:	4911      	ldr	r1, [pc, #68]	; (800e8ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e8a8:	480e      	ldr	r0, [pc, #56]	; (800e8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e8aa:	f000 fc6f 	bl	800f18c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d006      	beq.n	800e8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e8b6:	4b09      	ldr	r3, [pc, #36]	; (800e8dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e8b8:	f240 12e3 	movw	r2, #483	; 0x1e3
 800e8bc:	490c      	ldr	r1, [pc, #48]	; (800e8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e8be:	4809      	ldr	r0, [pc, #36]	; (800e8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e8c0:	f000 fc64 	bl	800f18c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e8c4:	6a3b      	ldr	r3, [r7, #32]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	bf14      	ite	ne
 800e8ca:	2301      	movne	r3, #1
 800e8cc:	2300      	moveq	r3, #0
 800e8ce:	b2db      	uxtb	r3, r3
 800e8d0:	e000      	b.n	800e8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e8d2:	2300      	movs	r3, #0
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3730      	adds	r7, #48	; 0x30
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}
 800e8dc:	08012708 	.word	0x08012708
 800e8e0:	080127ec 	.word	0x080127ec
 800e8e4:	08012750 	.word	0x08012750
 800e8e8:	0801280c 	.word	0x0801280c
 800e8ec:	08012844 	.word	0x08012844
 800e8f0:	08012854 	.word	0x08012854

0800e8f4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b08e      	sub	sp, #56	; 0x38
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	f003 030f 	and.w	r3, r3, #15
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	b2db      	uxtb	r3, r3
 800e910:	2b14      	cmp	r3, #20
 800e912:	f040 8167 	bne.w	800ebe4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e918:	88db      	ldrh	r3, [r3, #6]
 800e91a:	b29b      	uxth	r3, r3
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7f6 fc1c 	bl	800515a <lwip_htons>
 800e922:	4603      	mov	r3, r0
 800e924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e928:	b29b      	uxth	r3, r3
 800e92a:	00db      	lsls	r3, r3, #3
 800e92c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e930:	885b      	ldrh	r3, [r3, #2]
 800e932:	b29b      	uxth	r3, r3
 800e934:	4618      	mov	r0, r3
 800e936:	f7f6 fc10 	bl	800515a <lwip_htons>
 800e93a:	4603      	mov	r3, r0
 800e93c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	f003 030f 	and.w	r3, r3, #15
 800e946:	b2db      	uxtb	r3, r3
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e94e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e952:	b29b      	uxth	r3, r3
 800e954:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e956:	429a      	cmp	r2, r3
 800e958:	f0c0 8146 	bcc.w	800ebe8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e95c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e960:	b29b      	uxth	r3, r3
 800e962:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e964:	1ad3      	subs	r3, r2, r3
 800e966:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f7f7 ff19 	bl	80067a0 <pbuf_clen>
 800e96e:	4603      	mov	r3, r0
 800e970:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e972:	4ba3      	ldr	r3, [pc, #652]	; (800ec00 <ip4_reass+0x30c>)
 800e974:	881b      	ldrh	r3, [r3, #0]
 800e976:	461a      	mov	r2, r3
 800e978:	8c3b      	ldrh	r3, [r7, #32]
 800e97a:	4413      	add	r3, r2
 800e97c:	2b0a      	cmp	r3, #10
 800e97e:	dd10      	ble.n	800e9a2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e980:	8c3b      	ldrh	r3, [r7, #32]
 800e982:	4619      	mov	r1, r3
 800e984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e986:	f7ff fd81 	bl	800e48c <ip_reass_remove_oldest_datagram>
 800e98a:	4603      	mov	r3, r0
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f000 812d 	beq.w	800ebec <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e992:	4b9b      	ldr	r3, [pc, #620]	; (800ec00 <ip4_reass+0x30c>)
 800e994:	881b      	ldrh	r3, [r3, #0]
 800e996:	461a      	mov	r2, r3
 800e998:	8c3b      	ldrh	r3, [r7, #32]
 800e99a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e99c:	2b0a      	cmp	r3, #10
 800e99e:	f300 8125 	bgt.w	800ebec <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e9a2:	4b98      	ldr	r3, [pc, #608]	; (800ec04 <ip4_reass+0x310>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	633b      	str	r3, [r7, #48]	; 0x30
 800e9a8:	e015      	b.n	800e9d6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ac:	695a      	ldr	r2, [r3, #20]
 800e9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b0:	68db      	ldr	r3, [r3, #12]
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d10c      	bne.n	800e9d0 <ip4_reass+0xdc>
 800e9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b8:	699a      	ldr	r2, [r3, #24]
 800e9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9bc:	691b      	ldr	r3, [r3, #16]
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d106      	bne.n	800e9d0 <ip4_reass+0xdc>
 800e9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c4:	899a      	ldrh	r2, [r3, #12]
 800e9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c8:	889b      	ldrh	r3, [r3, #4]
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d006      	beq.n	800e9de <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	633b      	str	r3, [r7, #48]	; 0x30
 800e9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d1e6      	bne.n	800e9aa <ip4_reass+0xb6>
 800e9dc:	e000      	b.n	800e9e0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e9de:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d109      	bne.n	800e9fa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e9e6:	8c3b      	ldrh	r3, [r7, #32]
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9ec:	f7ff fdb0 	bl	800e550 <ip_reass_enqueue_new_datagram>
 800e9f0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d11c      	bne.n	800ea32 <ip4_reass+0x13e>
      goto nullreturn;
 800e9f8:	e0f9      	b.n	800ebee <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fc:	88db      	ldrh	r3, [r3, #6]
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	4618      	mov	r0, r3
 800ea02:	f7f6 fbaa 	bl	800515a <lwip_htons>
 800ea06:	4603      	mov	r3, r0
 800ea08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d110      	bne.n	800ea32 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ea10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea12:	89db      	ldrh	r3, [r3, #14]
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7f6 fba0 	bl	800515a <lwip_htons>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d006      	beq.n	800ea32 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ea24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea26:	3308      	adds	r3, #8
 800ea28:	2214      	movs	r2, #20
 800ea2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f000 fb9a 	bl	800f166 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ea32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea34:	88db      	ldrh	r3, [r3, #6]
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	f003 0320 	and.w	r3, r3, #32
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	bf0c      	ite	eq
 800ea40:	2301      	moveq	r3, #1
 800ea42:	2300      	movne	r3, #0
 800ea44:	b2db      	uxtb	r3, r3
 800ea46:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d00e      	beq.n	800ea6c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ea4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea52:	4413      	add	r3, r2
 800ea54:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ea56:	8b7a      	ldrh	r2, [r7, #26]
 800ea58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	f0c0 80a0 	bcc.w	800eba0 <ip4_reass+0x2ac>
 800ea60:	8b7b      	ldrh	r3, [r7, #26]
 800ea62:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ea66:	4293      	cmp	r3, r2
 800ea68:	f200 809a 	bhi.w	800eba0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ea6c:	69fa      	ldr	r2, [r7, #28]
 800ea6e:	6879      	ldr	r1, [r7, #4]
 800ea70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea72:	f7ff fdd5 	bl	800e620 <ip_reass_chain_frag_into_datagram_and_validate>
 800ea76:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea7e:	f000 8091 	beq.w	800eba4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ea82:	4b5f      	ldr	r3, [pc, #380]	; (800ec00 <ip4_reass+0x30c>)
 800ea84:	881a      	ldrh	r2, [r3, #0]
 800ea86:	8c3b      	ldrh	r3, [r7, #32]
 800ea88:	4413      	add	r3, r2
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	4b5c      	ldr	r3, [pc, #368]	; (800ec00 <ip4_reass+0x30c>)
 800ea8e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d00d      	beq.n	800eab2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ea96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea9a:	4413      	add	r3, r2
 800ea9c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ea9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa0:	8a7a      	ldrh	r2, [r7, #18]
 800eaa2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800eaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa6:	7f9b      	ldrb	r3, [r3, #30]
 800eaa8:	f043 0301 	orr.w	r3, r3, #1
 800eaac:	b2da      	uxtb	r2, r3
 800eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d171      	bne.n	800eb9c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800eab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaba:	8b9b      	ldrh	r3, [r3, #28]
 800eabc:	3314      	adds	r3, #20
 800eabe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800eac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800eaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ead2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead4:	3308      	adds	r3, #8
 800ead6:	2214      	movs	r2, #20
 800ead8:	4619      	mov	r1, r3
 800eada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eadc:	f000 fb43 	bl	800f166 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800eae0:	8a3b      	ldrh	r3, [r7, #16]
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7f6 fb39 	bl	800515a <lwip_htons>
 800eae8:	4603      	mov	r3, r0
 800eaea:	461a      	mov	r2, r3
 800eaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800eaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	719a      	strb	r2, [r3, #6]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800eafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafc:	2200      	movs	r2, #0
 800eafe:	729a      	strb	r2, [r3, #10]
 800eb00:	2200      	movs	r2, #0
 800eb02:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800eb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800eb0a:	e00d      	b.n	800eb28 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800eb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb0e:	685b      	ldr	r3, [r3, #4]
 800eb10:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800eb12:	2114      	movs	r1, #20
 800eb14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb16:	f7f7 fd35 	bl	8006584 <pbuf_remove_header>
      pbuf_cat(p, r);
 800eb1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f7f7 fe79 	bl	8006814 <pbuf_cat>
      r = iprh->next_pbuf;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800eb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1ee      	bne.n	800eb0c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800eb2e:	4b35      	ldr	r3, [pc, #212]	; (800ec04 <ip4_reass+0x310>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d102      	bne.n	800eb3e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb3c:	e010      	b.n	800eb60 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb3e:	4b31      	ldr	r3, [pc, #196]	; (800ec04 <ip4_reass+0x310>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb44:	e007      	b.n	800eb56 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800eb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d006      	beq.n	800eb5e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1f4      	bne.n	800eb46 <ip4_reass+0x252>
 800eb5c:	e000      	b.n	800eb60 <ip4_reass+0x26c>
          break;
 800eb5e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800eb60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb64:	f7ff fd2e 	bl	800e5c4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f7f7 fe19 	bl	80067a0 <pbuf_clen>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800eb72:	4b23      	ldr	r3, [pc, #140]	; (800ec00 <ip4_reass+0x30c>)
 800eb74:	881b      	ldrh	r3, [r3, #0]
 800eb76:	8c3a      	ldrh	r2, [r7, #32]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d906      	bls.n	800eb8a <ip4_reass+0x296>
 800eb7c:	4b22      	ldr	r3, [pc, #136]	; (800ec08 <ip4_reass+0x314>)
 800eb7e:	f240 229b 	movw	r2, #667	; 0x29b
 800eb82:	4922      	ldr	r1, [pc, #136]	; (800ec0c <ip4_reass+0x318>)
 800eb84:	4822      	ldr	r0, [pc, #136]	; (800ec10 <ip4_reass+0x31c>)
 800eb86:	f000 fb01 	bl	800f18c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800eb8a:	4b1d      	ldr	r3, [pc, #116]	; (800ec00 <ip4_reass+0x30c>)
 800eb8c:	881a      	ldrh	r2, [r3, #0]
 800eb8e:	8c3b      	ldrh	r3, [r7, #32]
 800eb90:	1ad3      	subs	r3, r2, r3
 800eb92:	b29a      	uxth	r2, r3
 800eb94:	4b1a      	ldr	r3, [pc, #104]	; (800ec00 <ip4_reass+0x30c>)
 800eb96:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	e02c      	b.n	800ebf6 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	e02a      	b.n	800ebf6 <ip4_reass+0x302>

nullreturn_ipr:
 800eba0:	bf00      	nop
 800eba2:	e000      	b.n	800eba6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800eba4:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800eba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d106      	bne.n	800ebba <ip4_reass+0x2c6>
 800ebac:	4b16      	ldr	r3, [pc, #88]	; (800ec08 <ip4_reass+0x314>)
 800ebae:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ebb2:	4918      	ldr	r1, [pc, #96]	; (800ec14 <ip4_reass+0x320>)
 800ebb4:	4816      	ldr	r0, [pc, #88]	; (800ec10 <ip4_reass+0x31c>)
 800ebb6:	f000 fae9 	bl	800f18c <iprintf>
  if (ipr->p == NULL) {
 800ebba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d114      	bne.n	800ebec <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ebc2:	4b10      	ldr	r3, [pc, #64]	; (800ec04 <ip4_reass+0x310>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d006      	beq.n	800ebda <ip4_reass+0x2e6>
 800ebcc:	4b0e      	ldr	r3, [pc, #56]	; (800ec08 <ip4_reass+0x314>)
 800ebce:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ebd2:	4911      	ldr	r1, [pc, #68]	; (800ec18 <ip4_reass+0x324>)
 800ebd4:	480e      	ldr	r0, [pc, #56]	; (800ec10 <ip4_reass+0x31c>)
 800ebd6:	f000 fad9 	bl	800f18c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ebda:	2100      	movs	r1, #0
 800ebdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebde:	f7ff fcf1 	bl	800e5c4 <ip_reass_dequeue_datagram>
 800ebe2:	e004      	b.n	800ebee <ip4_reass+0x2fa>
    goto nullreturn;
 800ebe4:	bf00      	nop
 800ebe6:	e002      	b.n	800ebee <ip4_reass+0x2fa>
    goto nullreturn;
 800ebe8:	bf00      	nop
 800ebea:	e000      	b.n	800ebee <ip4_reass+0x2fa>
  }

nullreturn:
 800ebec:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f7f7 fd4e 	bl	8006690 <pbuf_free>
  return NULL;
 800ebf4:	2300      	movs	r3, #0
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3738      	adds	r7, #56	; 0x38
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	200003a0 	.word	0x200003a0
 800ec04:	2000039c 	.word	0x2000039c
 800ec08:	08012708 	.word	0x08012708
 800ec0c:	08012878 	.word	0x08012878
 800ec10:	08012750 	.word	0x08012750
 800ec14:	08012894 	.word	0x08012894
 800ec18:	080128a0 	.word	0x080128a0

0800ec1c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ec20:	2005      	movs	r0, #5
 800ec22:	f7f6 feef 	bl	8005a04 <memp_malloc>
 800ec26:	4603      	mov	r3, r0
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d106      	bne.n	800ec48 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ec3a:	4b07      	ldr	r3, [pc, #28]	; (800ec58 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ec3c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ec40:	4906      	ldr	r1, [pc, #24]	; (800ec5c <ip_frag_free_pbuf_custom_ref+0x30>)
 800ec42:	4807      	ldr	r0, [pc, #28]	; (800ec60 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ec44:	f000 faa2 	bl	800f18c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ec48:	6879      	ldr	r1, [r7, #4]
 800ec4a:	2005      	movs	r0, #5
 800ec4c:	f7f6 ff26 	bl	8005a9c <memp_free>
}
 800ec50:	bf00      	nop
 800ec52:	3708      	adds	r7, #8
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}
 800ec58:	08012708 	.word	0x08012708
 800ec5c:	080128c0 	.word	0x080128c0
 800ec60:	08012750 	.word	0x08012750

0800ec64 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b084      	sub	sp, #16
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d106      	bne.n	800ec84 <ipfrag_free_pbuf_custom+0x20>
 800ec76:	4b11      	ldr	r3, [pc, #68]	; (800ecbc <ipfrag_free_pbuf_custom+0x58>)
 800ec78:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ec7c:	4910      	ldr	r1, [pc, #64]	; (800ecc0 <ipfrag_free_pbuf_custom+0x5c>)
 800ec7e:	4811      	ldr	r0, [pc, #68]	; (800ecc4 <ipfrag_free_pbuf_custom+0x60>)
 800ec80:	f000 fa84 	bl	800f18c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ec84:	68fa      	ldr	r2, [r7, #12]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d006      	beq.n	800ec9a <ipfrag_free_pbuf_custom+0x36>
 800ec8c:	4b0b      	ldr	r3, [pc, #44]	; (800ecbc <ipfrag_free_pbuf_custom+0x58>)
 800ec8e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ec92:	490d      	ldr	r1, [pc, #52]	; (800ecc8 <ipfrag_free_pbuf_custom+0x64>)
 800ec94:	480b      	ldr	r0, [pc, #44]	; (800ecc4 <ipfrag_free_pbuf_custom+0x60>)
 800ec96:	f000 fa79 	bl	800f18c <iprintf>
  if (pcr->original != NULL) {
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	695b      	ldr	r3, [r3, #20]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d004      	beq.n	800ecac <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	695b      	ldr	r3, [r3, #20]
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7f7 fcf2 	bl	8006690 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ecac:	68f8      	ldr	r0, [r7, #12]
 800ecae:	f7ff ffbd 	bl	800ec2c <ip_frag_free_pbuf_custom_ref>
}
 800ecb2:	bf00      	nop
 800ecb4:	3710      	adds	r7, #16
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	08012708 	.word	0x08012708
 800ecc0:	080128cc 	.word	0x080128cc
 800ecc4:	08012750 	.word	0x08012750
 800ecc8:	080128d8 	.word	0x080128d8

0800eccc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b094      	sub	sp, #80	; 0x50
 800ecd0:	af02      	add	r7, sp, #8
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	60b9      	str	r1, [r7, #8]
 800ecd6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	8c1b      	ldrh	r3, [r3, #32]
 800ece2:	3b14      	subs	r3, #20
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	da00      	bge.n	800ecea <ip4_frag+0x1e>
 800ece8:	3307      	adds	r3, #7
 800ecea:	10db      	asrs	r3, r3, #3
 800ecec:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ecee:	2314      	movs	r3, #20
 800ecf0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ecf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecfa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ecfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	f003 030f 	and.w	r3, r3, #15
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	009b      	lsls	r3, r3, #2
 800ed08:	b2db      	uxtb	r3, r3
 800ed0a:	2b14      	cmp	r3, #20
 800ed0c:	d002      	beq.n	800ed14 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ed0e:	f06f 0305 	mvn.w	r3, #5
 800ed12:	e10f      	b.n	800ef34 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	895b      	ldrh	r3, [r3, #10]
 800ed18:	2b13      	cmp	r3, #19
 800ed1a:	d809      	bhi.n	800ed30 <ip4_frag+0x64>
 800ed1c:	4b87      	ldr	r3, [pc, #540]	; (800ef3c <ip4_frag+0x270>)
 800ed1e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ed22:	4987      	ldr	r1, [pc, #540]	; (800ef40 <ip4_frag+0x274>)
 800ed24:	4887      	ldr	r0, [pc, #540]	; (800ef44 <ip4_frag+0x278>)
 800ed26:	f000 fa31 	bl	800f18c <iprintf>
 800ed2a:	f06f 0305 	mvn.w	r3, #5
 800ed2e:	e101      	b.n	800ef34 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ed30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed32:	88db      	ldrh	r3, [r3, #6]
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7f6 fa0f 	bl	800515a <lwip_htons>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ed40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ed4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ed50:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	891b      	ldrh	r3, [r3, #8]
 800ed56:	3b14      	subs	r3, #20
 800ed58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ed5c:	e0e0      	b.n	800ef20 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ed5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ed60:	00db      	lsls	r3, r3, #3
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	bf28      	it	cs
 800ed6c:	4613      	movcs	r3, r2
 800ed6e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ed70:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed74:	2114      	movs	r1, #20
 800ed76:	200e      	movs	r0, #14
 800ed78:	f7f7 f9aa 	bl	80060d0 <pbuf_alloc>
 800ed7c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ed7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	f000 80d4 	beq.w	800ef2e <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ed86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed88:	895b      	ldrh	r3, [r3, #10]
 800ed8a:	2b13      	cmp	r3, #19
 800ed8c:	d806      	bhi.n	800ed9c <ip4_frag+0xd0>
 800ed8e:	4b6b      	ldr	r3, [pc, #428]	; (800ef3c <ip4_frag+0x270>)
 800ed90:	f240 3225 	movw	r2, #805	; 0x325
 800ed94:	496c      	ldr	r1, [pc, #432]	; (800ef48 <ip4_frag+0x27c>)
 800ed96:	486b      	ldr	r0, [pc, #428]	; (800ef44 <ip4_frag+0x278>)
 800ed98:	f000 f9f8 	bl	800f18c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ed9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	2214      	movs	r2, #20
 800eda2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eda4:	4618      	mov	r0, r3
 800eda6:	f000 f9de 	bl	800f166 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800edaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800edb0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800edb2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800edb6:	e064      	b.n	800ee82 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	895a      	ldrh	r2, [r3, #10]
 800edbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800edbe:	1ad3      	subs	r3, r2, r3
 800edc0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	895b      	ldrh	r3, [r3, #10]
 800edc6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800edc8:	429a      	cmp	r2, r3
 800edca:	d906      	bls.n	800edda <ip4_frag+0x10e>
 800edcc:	4b5b      	ldr	r3, [pc, #364]	; (800ef3c <ip4_frag+0x270>)
 800edce:	f240 322d 	movw	r2, #813	; 0x32d
 800edd2:	495e      	ldr	r1, [pc, #376]	; (800ef4c <ip4_frag+0x280>)
 800edd4:	485b      	ldr	r0, [pc, #364]	; (800ef44 <ip4_frag+0x278>)
 800edd6:	f000 f9d9 	bl	800f18c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800edda:	8bfa      	ldrh	r2, [r7, #30]
 800eddc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ede0:	4293      	cmp	r3, r2
 800ede2:	bf28      	it	cs
 800ede4:	4613      	movcs	r3, r2
 800ede6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800edea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d105      	bne.n	800edfe <ip4_frag+0x132>
        poff = 0;
 800edf2:	2300      	movs	r3, #0
 800edf4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	60fb      	str	r3, [r7, #12]
        continue;
 800edfc:	e041      	b.n	800ee82 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800edfe:	f7ff ff0d 	bl	800ec1c <ip_frag_alloc_pbuf_custom_ref>
 800ee02:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ee04:	69bb      	ldr	r3, [r7, #24]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d103      	bne.n	800ee12 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ee0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee0c:	f7f7 fc40 	bl	8006690 <pbuf_free>
        goto memerr;
 800ee10:	e08e      	b.n	800ef30 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ee12:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ee18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ee1a:	4413      	add	r3, r2
 800ee1c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800ee20:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ee24:	9201      	str	r2, [sp, #4]
 800ee26:	9300      	str	r3, [sp, #0]
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2241      	movs	r2, #65	; 0x41
 800ee2c:	2000      	movs	r0, #0
 800ee2e:	f7f7 fa75 	bl	800631c <pbuf_alloced_custom>
 800ee32:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d106      	bne.n	800ee48 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ee3a:	69b8      	ldr	r0, [r7, #24]
 800ee3c:	f7ff fef6 	bl	800ec2c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ee40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee42:	f7f7 fc25 	bl	8006690 <pbuf_free>
        goto memerr;
 800ee46:	e073      	b.n	800ef30 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800ee48:	68f8      	ldr	r0, [r7, #12]
 800ee4a:	f7f7 fcc1 	bl	80067d0 <pbuf_ref>
      pcr->original = p;
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	68fa      	ldr	r2, [r7, #12]
 800ee52:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ee54:	69bb      	ldr	r3, [r7, #24]
 800ee56:	4a3e      	ldr	r2, [pc, #248]	; (800ef50 <ip4_frag+0x284>)
 800ee58:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ee5a:	6979      	ldr	r1, [r7, #20]
 800ee5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee5e:	f7f7 fcd9 	bl	8006814 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ee62:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ee66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee6a:	1ad3      	subs	r3, r2, r3
 800ee6c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ee70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d004      	beq.n	800ee82 <ip4_frag+0x1b6>
        poff = 0;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ee82:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d196      	bne.n	800edb8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ee8a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ee8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee90:	4413      	add	r3, r2
 800ee92:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ee94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	8c1b      	ldrh	r3, [r3, #32]
 800ee9c:	3b14      	subs	r3, #20
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	bfd4      	ite	le
 800eea2:	2301      	movle	r3, #1
 800eea4:	2300      	movgt	r3, #0
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800eeaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800eeae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eeb2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800eeb4:	6a3b      	ldr	r3, [r7, #32]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d002      	beq.n	800eec0 <ip4_frag+0x1f4>
 800eeba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d003      	beq.n	800eec8 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800eec0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eec2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eec6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800eec8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7f6 f945 	bl	800515a <lwip_htons>
 800eed0:	4603      	mov	r3, r0
 800eed2:	461a      	mov	r2, r3
 800eed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed6:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800eed8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eeda:	3314      	adds	r3, #20
 800eedc:	b29b      	uxth	r3, r3
 800eede:	4618      	mov	r0, r3
 800eee0:	f7f6 f93b 	bl	800515a <lwip_htons>
 800eee4:	4603      	mov	r3, r0
 800eee6:	461a      	mov	r2, r3
 800eee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeea:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800eeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeee:	2200      	movs	r2, #0
 800eef0:	729a      	strb	r2, [r3, #10]
 800eef2:	2200      	movs	r2, #0
 800eef4:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	695b      	ldr	r3, [r3, #20]
 800eefa:	687a      	ldr	r2, [r7, #4]
 800eefc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eefe:	68b8      	ldr	r0, [r7, #8]
 800ef00:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ef02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef04:	f7f7 fbc4 	bl	8006690 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ef08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ef0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef0e:	1ad3      	subs	r3, r2, r3
 800ef10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800ef14:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ef18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef1a:	4413      	add	r3, r2
 800ef1c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800ef20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	f47f af1a 	bne.w	800ed5e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	e002      	b.n	800ef34 <ip4_frag+0x268>
      goto memerr;
 800ef2e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ef30:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3748      	adds	r7, #72	; 0x48
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}
 800ef3c:	08012708 	.word	0x08012708
 800ef40:	080128e4 	.word	0x080128e4
 800ef44:	08012750 	.word	0x08012750
 800ef48:	08012900 	.word	0x08012900
 800ef4c:	08012920 	.word	0x08012920
 800ef50:	0800ec65 	.word	0x0800ec65

0800ef54 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b086      	sub	sp, #24
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ef5e:	230e      	movs	r3, #14
 800ef60:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	895b      	ldrh	r3, [r3, #10]
 800ef66:	2b0e      	cmp	r3, #14
 800ef68:	d96e      	bls.n	800f048 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	7bdb      	ldrb	r3, [r3, #15]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d106      	bne.n	800ef80 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ef78:	3301      	adds	r3, #1
 800ef7a:	b2da      	uxtb	r2, r3
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	7b1a      	ldrb	r2, [r3, #12]
 800ef8a:	7b5b      	ldrb	r3, [r3, #13]
 800ef8c:	021b      	lsls	r3, r3, #8
 800ef8e:	4313      	orrs	r3, r2
 800ef90:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	f003 0301 	and.w	r3, r3, #1
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d023      	beq.n	800efe6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d10f      	bne.n	800efc6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	785b      	ldrb	r3, [r3, #1]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d11b      	bne.n	800efe6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800efb2:	2b5e      	cmp	r3, #94	; 0x5e
 800efb4:	d117      	bne.n	800efe6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	7b5b      	ldrb	r3, [r3, #13]
 800efba:	f043 0310 	orr.w	r3, r3, #16
 800efbe:	b2da      	uxtb	r2, r3
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	735a      	strb	r2, [r3, #13]
 800efc4:	e00f      	b.n	800efe6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	2206      	movs	r2, #6
 800efca:	4928      	ldr	r1, [pc, #160]	; (800f06c <ethernet_input+0x118>)
 800efcc:	4618      	mov	r0, r3
 800efce:	f000 f8bb 	bl	800f148 <memcmp>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d106      	bne.n	800efe6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	7b5b      	ldrb	r3, [r3, #13]
 800efdc:	f043 0308 	orr.w	r3, r3, #8
 800efe0:	b2da      	uxtb	r2, r3
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800efe6:	89fb      	ldrh	r3, [r7, #14]
 800efe8:	2b08      	cmp	r3, #8
 800efea:	d003      	beq.n	800eff4 <ethernet_input+0xa0>
 800efec:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800eff0:	d014      	beq.n	800f01c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800eff2:	e032      	b.n	800f05a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800effa:	f003 0308 	and.w	r3, r3, #8
 800effe:	2b00      	cmp	r3, #0
 800f000:	d024      	beq.n	800f04c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f002:	8afb      	ldrh	r3, [r7, #22]
 800f004:	4619      	mov	r1, r3
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f7f7 fabc 	bl	8006584 <pbuf_remove_header>
 800f00c:	4603      	mov	r3, r0
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d11e      	bne.n	800f050 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f012:	6839      	ldr	r1, [r7, #0]
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f7fe ff2d 	bl	800de74 <ip4_input>
      break;
 800f01a:	e013      	b.n	800f044 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800f022:	f003 0308 	and.w	r3, r3, #8
 800f026:	2b00      	cmp	r3, #0
 800f028:	d014      	beq.n	800f054 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f02a:	8afb      	ldrh	r3, [r7, #22]
 800f02c:	4619      	mov	r1, r3
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f7f7 faa8 	bl	8006584 <pbuf_remove_header>
 800f034:	4603      	mov	r3, r0
 800f036:	2b00      	cmp	r3, #0
 800f038:	d10e      	bne.n	800f058 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f03a:	6839      	ldr	r1, [r7, #0]
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f7fe f8cd 	bl	800d1dc <etharp_input>
      break;
 800f042:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f044:	2300      	movs	r3, #0
 800f046:	e00c      	b.n	800f062 <ethernet_input+0x10e>
    goto free_and_return;
 800f048:	bf00      	nop
 800f04a:	e006      	b.n	800f05a <ethernet_input+0x106>
        goto free_and_return;
 800f04c:	bf00      	nop
 800f04e:	e004      	b.n	800f05a <ethernet_input+0x106>
        goto free_and_return;
 800f050:	bf00      	nop
 800f052:	e002      	b.n	800f05a <ethernet_input+0x106>
        goto free_and_return;
 800f054:	bf00      	nop
 800f056:	e000      	b.n	800f05a <ethernet_input+0x106>
        goto free_and_return;
 800f058:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f7f7 fb18 	bl	8006690 <pbuf_free>
  return ERR_OK;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3718      	adds	r7, #24
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	08012ab0 	.word	0x08012ab0

0800f070 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f070:	b580      	push	{r7, lr}
 800f072:	b086      	sub	sp, #24
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	607a      	str	r2, [r7, #4]
 800f07c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f07e:	8c3b      	ldrh	r3, [r7, #32]
 800f080:	4618      	mov	r0, r3
 800f082:	f7f6 f86a 	bl	800515a <lwip_htons>
 800f086:	4603      	mov	r3, r0
 800f088:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f08a:	210e      	movs	r1, #14
 800f08c:	68b8      	ldr	r0, [r7, #8]
 800f08e:	f7f7 fa69 	bl	8006564 <pbuf_add_header>
 800f092:	4603      	mov	r3, r0
 800f094:	2b00      	cmp	r3, #0
 800f096:	d125      	bne.n	800f0e4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	685b      	ldr	r3, [r3, #4]
 800f09c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	8afa      	ldrh	r2, [r7, #22]
 800f0a2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	2206      	movs	r2, #6
 800f0a8:	6839      	ldr	r1, [r7, #0]
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f000 f85b 	bl	800f166 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	3306      	adds	r3, #6
 800f0b4:	2206      	movs	r2, #6
 800f0b6:	6879      	ldr	r1, [r7, #4]
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f000 f854 	bl	800f166 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0c4:	2b06      	cmp	r3, #6
 800f0c6:	d006      	beq.n	800f0d6 <ethernet_output+0x66>
 800f0c8:	4b0a      	ldr	r3, [pc, #40]	; (800f0f4 <ethernet_output+0x84>)
 800f0ca:	f240 1233 	movw	r2, #307	; 0x133
 800f0ce:	490a      	ldr	r1, [pc, #40]	; (800f0f8 <ethernet_output+0x88>)
 800f0d0:	480a      	ldr	r0, [pc, #40]	; (800f0fc <ethernet_output+0x8c>)
 800f0d2:	f000 f85b 	bl	800f18c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	699b      	ldr	r3, [r3, #24]
 800f0da:	68b9      	ldr	r1, [r7, #8]
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	4798      	blx	r3
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	e002      	b.n	800f0ea <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f0e4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f0e6:	f06f 0301 	mvn.w	r3, #1
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3718      	adds	r7, #24
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	bf00      	nop
 800f0f4:	08012930 	.word	0x08012930
 800f0f8:	08012968 	.word	0x08012968
 800f0fc:	0801299c 	.word	0x0801299c

0800f100 <__libc_init_array>:
 800f100:	b570      	push	{r4, r5, r6, lr}
 800f102:	4e0d      	ldr	r6, [pc, #52]	; (800f138 <__libc_init_array+0x38>)
 800f104:	4c0d      	ldr	r4, [pc, #52]	; (800f13c <__libc_init_array+0x3c>)
 800f106:	1ba4      	subs	r4, r4, r6
 800f108:	10a4      	asrs	r4, r4, #2
 800f10a:	2500      	movs	r5, #0
 800f10c:	42a5      	cmp	r5, r4
 800f10e:	d109      	bne.n	800f124 <__libc_init_array+0x24>
 800f110:	4e0b      	ldr	r6, [pc, #44]	; (800f140 <__libc_init_array+0x40>)
 800f112:	4c0c      	ldr	r4, [pc, #48]	; (800f144 <__libc_init_array+0x44>)
 800f114:	f000 ff5a 	bl	800ffcc <_init>
 800f118:	1ba4      	subs	r4, r4, r6
 800f11a:	10a4      	asrs	r4, r4, #2
 800f11c:	2500      	movs	r5, #0
 800f11e:	42a5      	cmp	r5, r4
 800f120:	d105      	bne.n	800f12e <__libc_init_array+0x2e>
 800f122:	bd70      	pop	{r4, r5, r6, pc}
 800f124:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f128:	4798      	blx	r3
 800f12a:	3501      	adds	r5, #1
 800f12c:	e7ee      	b.n	800f10c <__libc_init_array+0xc>
 800f12e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f132:	4798      	blx	r3
 800f134:	3501      	adds	r5, #1
 800f136:	e7f2      	b.n	800f11e <__libc_init_array+0x1e>
 800f138:	08012b60 	.word	0x08012b60
 800f13c:	08012b60 	.word	0x08012b60
 800f140:	08012b60 	.word	0x08012b60
 800f144:	08012b64 	.word	0x08012b64

0800f148 <memcmp>:
 800f148:	b530      	push	{r4, r5, lr}
 800f14a:	2400      	movs	r4, #0
 800f14c:	42a2      	cmp	r2, r4
 800f14e:	d101      	bne.n	800f154 <memcmp+0xc>
 800f150:	2000      	movs	r0, #0
 800f152:	e007      	b.n	800f164 <memcmp+0x1c>
 800f154:	5d03      	ldrb	r3, [r0, r4]
 800f156:	3401      	adds	r4, #1
 800f158:	190d      	adds	r5, r1, r4
 800f15a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800f15e:	42ab      	cmp	r3, r5
 800f160:	d0f4      	beq.n	800f14c <memcmp+0x4>
 800f162:	1b58      	subs	r0, r3, r5
 800f164:	bd30      	pop	{r4, r5, pc}

0800f166 <memcpy>:
 800f166:	b510      	push	{r4, lr}
 800f168:	1e43      	subs	r3, r0, #1
 800f16a:	440a      	add	r2, r1
 800f16c:	4291      	cmp	r1, r2
 800f16e:	d100      	bne.n	800f172 <memcpy+0xc>
 800f170:	bd10      	pop	{r4, pc}
 800f172:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f17a:	e7f7      	b.n	800f16c <memcpy+0x6>

0800f17c <memset>:
 800f17c:	4402      	add	r2, r0
 800f17e:	4603      	mov	r3, r0
 800f180:	4293      	cmp	r3, r2
 800f182:	d100      	bne.n	800f186 <memset+0xa>
 800f184:	4770      	bx	lr
 800f186:	f803 1b01 	strb.w	r1, [r3], #1
 800f18a:	e7f9      	b.n	800f180 <memset+0x4>

0800f18c <iprintf>:
 800f18c:	b40f      	push	{r0, r1, r2, r3}
 800f18e:	4b0a      	ldr	r3, [pc, #40]	; (800f1b8 <iprintf+0x2c>)
 800f190:	b513      	push	{r0, r1, r4, lr}
 800f192:	681c      	ldr	r4, [r3, #0]
 800f194:	b124      	cbz	r4, 800f1a0 <iprintf+0x14>
 800f196:	69a3      	ldr	r3, [r4, #24]
 800f198:	b913      	cbnz	r3, 800f1a0 <iprintf+0x14>
 800f19a:	4620      	mov	r0, r4
 800f19c:	f000 f882 	bl	800f2a4 <__sinit>
 800f1a0:	ab05      	add	r3, sp, #20
 800f1a2:	9a04      	ldr	r2, [sp, #16]
 800f1a4:	68a1      	ldr	r1, [r4, #8]
 800f1a6:	9301      	str	r3, [sp, #4]
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	f000 f9df 	bl	800f56c <_vfiprintf_r>
 800f1ae:	b002      	add	sp, #8
 800f1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1b4:	b004      	add	sp, #16
 800f1b6:	4770      	bx	lr
 800f1b8:	2000007c 	.word	0x2000007c

0800f1bc <rand>:
 800f1bc:	b538      	push	{r3, r4, r5, lr}
 800f1be:	4b13      	ldr	r3, [pc, #76]	; (800f20c <rand+0x50>)
 800f1c0:	681c      	ldr	r4, [r3, #0]
 800f1c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f1c4:	b97b      	cbnz	r3, 800f1e6 <rand+0x2a>
 800f1c6:	2018      	movs	r0, #24
 800f1c8:	f000 f8f6 	bl	800f3b8 <malloc>
 800f1cc:	4a10      	ldr	r2, [pc, #64]	; (800f210 <rand+0x54>)
 800f1ce:	4b11      	ldr	r3, [pc, #68]	; (800f214 <rand+0x58>)
 800f1d0:	63a0      	str	r0, [r4, #56]	; 0x38
 800f1d2:	e9c0 2300 	strd	r2, r3, [r0]
 800f1d6:	4b10      	ldr	r3, [pc, #64]	; (800f218 <rand+0x5c>)
 800f1d8:	6083      	str	r3, [r0, #8]
 800f1da:	230b      	movs	r3, #11
 800f1dc:	8183      	strh	r3, [r0, #12]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f1e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f1e8:	480c      	ldr	r0, [pc, #48]	; (800f21c <rand+0x60>)
 800f1ea:	690a      	ldr	r2, [r1, #16]
 800f1ec:	694b      	ldr	r3, [r1, #20]
 800f1ee:	4c0c      	ldr	r4, [pc, #48]	; (800f220 <rand+0x64>)
 800f1f0:	4350      	muls	r0, r2
 800f1f2:	fb04 0003 	mla	r0, r4, r3, r0
 800f1f6:	fba2 2304 	umull	r2, r3, r2, r4
 800f1fa:	4403      	add	r3, r0
 800f1fc:	1c54      	adds	r4, r2, #1
 800f1fe:	f143 0500 	adc.w	r5, r3, #0
 800f202:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800f206:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800f20a:	bd38      	pop	{r3, r4, r5, pc}
 800f20c:	2000007c 	.word	0x2000007c
 800f210:	abcd330e 	.word	0xabcd330e
 800f214:	e66d1234 	.word	0xe66d1234
 800f218:	0005deec 	.word	0x0005deec
 800f21c:	5851f42d 	.word	0x5851f42d
 800f220:	4c957f2d 	.word	0x4c957f2d

0800f224 <std>:
 800f224:	2300      	movs	r3, #0
 800f226:	b510      	push	{r4, lr}
 800f228:	4604      	mov	r4, r0
 800f22a:	e9c0 3300 	strd	r3, r3, [r0]
 800f22e:	6083      	str	r3, [r0, #8]
 800f230:	8181      	strh	r1, [r0, #12]
 800f232:	6643      	str	r3, [r0, #100]	; 0x64
 800f234:	81c2      	strh	r2, [r0, #14]
 800f236:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f23a:	6183      	str	r3, [r0, #24]
 800f23c:	4619      	mov	r1, r3
 800f23e:	2208      	movs	r2, #8
 800f240:	305c      	adds	r0, #92	; 0x5c
 800f242:	f7ff ff9b 	bl	800f17c <memset>
 800f246:	4b05      	ldr	r3, [pc, #20]	; (800f25c <std+0x38>)
 800f248:	6263      	str	r3, [r4, #36]	; 0x24
 800f24a:	4b05      	ldr	r3, [pc, #20]	; (800f260 <std+0x3c>)
 800f24c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f24e:	4b05      	ldr	r3, [pc, #20]	; (800f264 <std+0x40>)
 800f250:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f252:	4b05      	ldr	r3, [pc, #20]	; (800f268 <std+0x44>)
 800f254:	6224      	str	r4, [r4, #32]
 800f256:	6323      	str	r3, [r4, #48]	; 0x30
 800f258:	bd10      	pop	{r4, pc}
 800f25a:	bf00      	nop
 800f25c:	0800fac9 	.word	0x0800fac9
 800f260:	0800faeb 	.word	0x0800faeb
 800f264:	0800fb23 	.word	0x0800fb23
 800f268:	0800fb47 	.word	0x0800fb47

0800f26c <_cleanup_r>:
 800f26c:	4901      	ldr	r1, [pc, #4]	; (800f274 <_cleanup_r+0x8>)
 800f26e:	f000 b885 	b.w	800f37c <_fwalk_reent>
 800f272:	bf00      	nop
 800f274:	0800fe21 	.word	0x0800fe21

0800f278 <__sfmoreglue>:
 800f278:	b570      	push	{r4, r5, r6, lr}
 800f27a:	1e4a      	subs	r2, r1, #1
 800f27c:	2568      	movs	r5, #104	; 0x68
 800f27e:	4355      	muls	r5, r2
 800f280:	460e      	mov	r6, r1
 800f282:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f286:	f000 f8ed 	bl	800f464 <_malloc_r>
 800f28a:	4604      	mov	r4, r0
 800f28c:	b140      	cbz	r0, 800f2a0 <__sfmoreglue+0x28>
 800f28e:	2100      	movs	r1, #0
 800f290:	e9c0 1600 	strd	r1, r6, [r0]
 800f294:	300c      	adds	r0, #12
 800f296:	60a0      	str	r0, [r4, #8]
 800f298:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f29c:	f7ff ff6e 	bl	800f17c <memset>
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	bd70      	pop	{r4, r5, r6, pc}

0800f2a4 <__sinit>:
 800f2a4:	6983      	ldr	r3, [r0, #24]
 800f2a6:	b510      	push	{r4, lr}
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	bb33      	cbnz	r3, 800f2fa <__sinit+0x56>
 800f2ac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f2b0:	6503      	str	r3, [r0, #80]	; 0x50
 800f2b2:	4b12      	ldr	r3, [pc, #72]	; (800f2fc <__sinit+0x58>)
 800f2b4:	4a12      	ldr	r2, [pc, #72]	; (800f300 <__sinit+0x5c>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	6282      	str	r2, [r0, #40]	; 0x28
 800f2ba:	4298      	cmp	r0, r3
 800f2bc:	bf04      	itt	eq
 800f2be:	2301      	moveq	r3, #1
 800f2c0:	6183      	streq	r3, [r0, #24]
 800f2c2:	f000 f81f 	bl	800f304 <__sfp>
 800f2c6:	6060      	str	r0, [r4, #4]
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f000 f81b 	bl	800f304 <__sfp>
 800f2ce:	60a0      	str	r0, [r4, #8]
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	f000 f817 	bl	800f304 <__sfp>
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	60e0      	str	r0, [r4, #12]
 800f2da:	2104      	movs	r1, #4
 800f2dc:	6860      	ldr	r0, [r4, #4]
 800f2de:	f7ff ffa1 	bl	800f224 <std>
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	2109      	movs	r1, #9
 800f2e6:	68a0      	ldr	r0, [r4, #8]
 800f2e8:	f7ff ff9c 	bl	800f224 <std>
 800f2ec:	2202      	movs	r2, #2
 800f2ee:	2112      	movs	r1, #18
 800f2f0:	68e0      	ldr	r0, [r4, #12]
 800f2f2:	f7ff ff97 	bl	800f224 <std>
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	61a3      	str	r3, [r4, #24]
 800f2fa:	bd10      	pop	{r4, pc}
 800f2fc:	08012ac0 	.word	0x08012ac0
 800f300:	0800f26d 	.word	0x0800f26d

0800f304 <__sfp>:
 800f304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f306:	4b1b      	ldr	r3, [pc, #108]	; (800f374 <__sfp+0x70>)
 800f308:	681e      	ldr	r6, [r3, #0]
 800f30a:	69b3      	ldr	r3, [r6, #24]
 800f30c:	4607      	mov	r7, r0
 800f30e:	b913      	cbnz	r3, 800f316 <__sfp+0x12>
 800f310:	4630      	mov	r0, r6
 800f312:	f7ff ffc7 	bl	800f2a4 <__sinit>
 800f316:	3648      	adds	r6, #72	; 0x48
 800f318:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f31c:	3b01      	subs	r3, #1
 800f31e:	d503      	bpl.n	800f328 <__sfp+0x24>
 800f320:	6833      	ldr	r3, [r6, #0]
 800f322:	b133      	cbz	r3, 800f332 <__sfp+0x2e>
 800f324:	6836      	ldr	r6, [r6, #0]
 800f326:	e7f7      	b.n	800f318 <__sfp+0x14>
 800f328:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f32c:	b16d      	cbz	r5, 800f34a <__sfp+0x46>
 800f32e:	3468      	adds	r4, #104	; 0x68
 800f330:	e7f4      	b.n	800f31c <__sfp+0x18>
 800f332:	2104      	movs	r1, #4
 800f334:	4638      	mov	r0, r7
 800f336:	f7ff ff9f 	bl	800f278 <__sfmoreglue>
 800f33a:	6030      	str	r0, [r6, #0]
 800f33c:	2800      	cmp	r0, #0
 800f33e:	d1f1      	bne.n	800f324 <__sfp+0x20>
 800f340:	230c      	movs	r3, #12
 800f342:	603b      	str	r3, [r7, #0]
 800f344:	4604      	mov	r4, r0
 800f346:	4620      	mov	r0, r4
 800f348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f34a:	4b0b      	ldr	r3, [pc, #44]	; (800f378 <__sfp+0x74>)
 800f34c:	6665      	str	r5, [r4, #100]	; 0x64
 800f34e:	e9c4 5500 	strd	r5, r5, [r4]
 800f352:	60a5      	str	r5, [r4, #8]
 800f354:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f358:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f35c:	2208      	movs	r2, #8
 800f35e:	4629      	mov	r1, r5
 800f360:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f364:	f7ff ff0a 	bl	800f17c <memset>
 800f368:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f36c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f370:	e7e9      	b.n	800f346 <__sfp+0x42>
 800f372:	bf00      	nop
 800f374:	08012ac0 	.word	0x08012ac0
 800f378:	ffff0001 	.word	0xffff0001

0800f37c <_fwalk_reent>:
 800f37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f380:	4680      	mov	r8, r0
 800f382:	4689      	mov	r9, r1
 800f384:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f388:	2600      	movs	r6, #0
 800f38a:	b914      	cbnz	r4, 800f392 <_fwalk_reent+0x16>
 800f38c:	4630      	mov	r0, r6
 800f38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f392:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f396:	3f01      	subs	r7, #1
 800f398:	d501      	bpl.n	800f39e <_fwalk_reent+0x22>
 800f39a:	6824      	ldr	r4, [r4, #0]
 800f39c:	e7f5      	b.n	800f38a <_fwalk_reent+0xe>
 800f39e:	89ab      	ldrh	r3, [r5, #12]
 800f3a0:	2b01      	cmp	r3, #1
 800f3a2:	d907      	bls.n	800f3b4 <_fwalk_reent+0x38>
 800f3a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	d003      	beq.n	800f3b4 <_fwalk_reent+0x38>
 800f3ac:	4629      	mov	r1, r5
 800f3ae:	4640      	mov	r0, r8
 800f3b0:	47c8      	blx	r9
 800f3b2:	4306      	orrs	r6, r0
 800f3b4:	3568      	adds	r5, #104	; 0x68
 800f3b6:	e7ee      	b.n	800f396 <_fwalk_reent+0x1a>

0800f3b8 <malloc>:
 800f3b8:	4b02      	ldr	r3, [pc, #8]	; (800f3c4 <malloc+0xc>)
 800f3ba:	4601      	mov	r1, r0
 800f3bc:	6818      	ldr	r0, [r3, #0]
 800f3be:	f000 b851 	b.w	800f464 <_malloc_r>
 800f3c2:	bf00      	nop
 800f3c4:	2000007c 	.word	0x2000007c

0800f3c8 <_free_r>:
 800f3c8:	b538      	push	{r3, r4, r5, lr}
 800f3ca:	4605      	mov	r5, r0
 800f3cc:	2900      	cmp	r1, #0
 800f3ce:	d045      	beq.n	800f45c <_free_r+0x94>
 800f3d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3d4:	1f0c      	subs	r4, r1, #4
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	bfb8      	it	lt
 800f3da:	18e4      	addlt	r4, r4, r3
 800f3dc:	f000 fdc0 	bl	800ff60 <__malloc_lock>
 800f3e0:	4a1f      	ldr	r2, [pc, #124]	; (800f460 <_free_r+0x98>)
 800f3e2:	6813      	ldr	r3, [r2, #0]
 800f3e4:	4610      	mov	r0, r2
 800f3e6:	b933      	cbnz	r3, 800f3f6 <_free_r+0x2e>
 800f3e8:	6063      	str	r3, [r4, #4]
 800f3ea:	6014      	str	r4, [r2, #0]
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3f2:	f000 bdb6 	b.w	800ff62 <__malloc_unlock>
 800f3f6:	42a3      	cmp	r3, r4
 800f3f8:	d90c      	bls.n	800f414 <_free_r+0x4c>
 800f3fa:	6821      	ldr	r1, [r4, #0]
 800f3fc:	1862      	adds	r2, r4, r1
 800f3fe:	4293      	cmp	r3, r2
 800f400:	bf04      	itt	eq
 800f402:	681a      	ldreq	r2, [r3, #0]
 800f404:	685b      	ldreq	r3, [r3, #4]
 800f406:	6063      	str	r3, [r4, #4]
 800f408:	bf04      	itt	eq
 800f40a:	1852      	addeq	r2, r2, r1
 800f40c:	6022      	streq	r2, [r4, #0]
 800f40e:	6004      	str	r4, [r0, #0]
 800f410:	e7ec      	b.n	800f3ec <_free_r+0x24>
 800f412:	4613      	mov	r3, r2
 800f414:	685a      	ldr	r2, [r3, #4]
 800f416:	b10a      	cbz	r2, 800f41c <_free_r+0x54>
 800f418:	42a2      	cmp	r2, r4
 800f41a:	d9fa      	bls.n	800f412 <_free_r+0x4a>
 800f41c:	6819      	ldr	r1, [r3, #0]
 800f41e:	1858      	adds	r0, r3, r1
 800f420:	42a0      	cmp	r0, r4
 800f422:	d10b      	bne.n	800f43c <_free_r+0x74>
 800f424:	6820      	ldr	r0, [r4, #0]
 800f426:	4401      	add	r1, r0
 800f428:	1858      	adds	r0, r3, r1
 800f42a:	4282      	cmp	r2, r0
 800f42c:	6019      	str	r1, [r3, #0]
 800f42e:	d1dd      	bne.n	800f3ec <_free_r+0x24>
 800f430:	6810      	ldr	r0, [r2, #0]
 800f432:	6852      	ldr	r2, [r2, #4]
 800f434:	605a      	str	r2, [r3, #4]
 800f436:	4401      	add	r1, r0
 800f438:	6019      	str	r1, [r3, #0]
 800f43a:	e7d7      	b.n	800f3ec <_free_r+0x24>
 800f43c:	d902      	bls.n	800f444 <_free_r+0x7c>
 800f43e:	230c      	movs	r3, #12
 800f440:	602b      	str	r3, [r5, #0]
 800f442:	e7d3      	b.n	800f3ec <_free_r+0x24>
 800f444:	6820      	ldr	r0, [r4, #0]
 800f446:	1821      	adds	r1, r4, r0
 800f448:	428a      	cmp	r2, r1
 800f44a:	bf04      	itt	eq
 800f44c:	6811      	ldreq	r1, [r2, #0]
 800f44e:	6852      	ldreq	r2, [r2, #4]
 800f450:	6062      	str	r2, [r4, #4]
 800f452:	bf04      	itt	eq
 800f454:	1809      	addeq	r1, r1, r0
 800f456:	6021      	streq	r1, [r4, #0]
 800f458:	605c      	str	r4, [r3, #4]
 800f45a:	e7c7      	b.n	800f3ec <_free_r+0x24>
 800f45c:	bd38      	pop	{r3, r4, r5, pc}
 800f45e:	bf00      	nop
 800f460:	200003a4 	.word	0x200003a4

0800f464 <_malloc_r>:
 800f464:	b570      	push	{r4, r5, r6, lr}
 800f466:	1ccd      	adds	r5, r1, #3
 800f468:	f025 0503 	bic.w	r5, r5, #3
 800f46c:	3508      	adds	r5, #8
 800f46e:	2d0c      	cmp	r5, #12
 800f470:	bf38      	it	cc
 800f472:	250c      	movcc	r5, #12
 800f474:	2d00      	cmp	r5, #0
 800f476:	4606      	mov	r6, r0
 800f478:	db01      	blt.n	800f47e <_malloc_r+0x1a>
 800f47a:	42a9      	cmp	r1, r5
 800f47c:	d903      	bls.n	800f486 <_malloc_r+0x22>
 800f47e:	230c      	movs	r3, #12
 800f480:	6033      	str	r3, [r6, #0]
 800f482:	2000      	movs	r0, #0
 800f484:	bd70      	pop	{r4, r5, r6, pc}
 800f486:	f000 fd6b 	bl	800ff60 <__malloc_lock>
 800f48a:	4a21      	ldr	r2, [pc, #132]	; (800f510 <_malloc_r+0xac>)
 800f48c:	6814      	ldr	r4, [r2, #0]
 800f48e:	4621      	mov	r1, r4
 800f490:	b991      	cbnz	r1, 800f4b8 <_malloc_r+0x54>
 800f492:	4c20      	ldr	r4, [pc, #128]	; (800f514 <_malloc_r+0xb0>)
 800f494:	6823      	ldr	r3, [r4, #0]
 800f496:	b91b      	cbnz	r3, 800f4a0 <_malloc_r+0x3c>
 800f498:	4630      	mov	r0, r6
 800f49a:	f000 fb05 	bl	800faa8 <_sbrk_r>
 800f49e:	6020      	str	r0, [r4, #0]
 800f4a0:	4629      	mov	r1, r5
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	f000 fb00 	bl	800faa8 <_sbrk_r>
 800f4a8:	1c43      	adds	r3, r0, #1
 800f4aa:	d124      	bne.n	800f4f6 <_malloc_r+0x92>
 800f4ac:	230c      	movs	r3, #12
 800f4ae:	6033      	str	r3, [r6, #0]
 800f4b0:	4630      	mov	r0, r6
 800f4b2:	f000 fd56 	bl	800ff62 <__malloc_unlock>
 800f4b6:	e7e4      	b.n	800f482 <_malloc_r+0x1e>
 800f4b8:	680b      	ldr	r3, [r1, #0]
 800f4ba:	1b5b      	subs	r3, r3, r5
 800f4bc:	d418      	bmi.n	800f4f0 <_malloc_r+0x8c>
 800f4be:	2b0b      	cmp	r3, #11
 800f4c0:	d90f      	bls.n	800f4e2 <_malloc_r+0x7e>
 800f4c2:	600b      	str	r3, [r1, #0]
 800f4c4:	50cd      	str	r5, [r1, r3]
 800f4c6:	18cc      	adds	r4, r1, r3
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	f000 fd4a 	bl	800ff62 <__malloc_unlock>
 800f4ce:	f104 000b 	add.w	r0, r4, #11
 800f4d2:	1d23      	adds	r3, r4, #4
 800f4d4:	f020 0007 	bic.w	r0, r0, #7
 800f4d8:	1ac3      	subs	r3, r0, r3
 800f4da:	d0d3      	beq.n	800f484 <_malloc_r+0x20>
 800f4dc:	425a      	negs	r2, r3
 800f4de:	50e2      	str	r2, [r4, r3]
 800f4e0:	e7d0      	b.n	800f484 <_malloc_r+0x20>
 800f4e2:	428c      	cmp	r4, r1
 800f4e4:	684b      	ldr	r3, [r1, #4]
 800f4e6:	bf16      	itet	ne
 800f4e8:	6063      	strne	r3, [r4, #4]
 800f4ea:	6013      	streq	r3, [r2, #0]
 800f4ec:	460c      	movne	r4, r1
 800f4ee:	e7eb      	b.n	800f4c8 <_malloc_r+0x64>
 800f4f0:	460c      	mov	r4, r1
 800f4f2:	6849      	ldr	r1, [r1, #4]
 800f4f4:	e7cc      	b.n	800f490 <_malloc_r+0x2c>
 800f4f6:	1cc4      	adds	r4, r0, #3
 800f4f8:	f024 0403 	bic.w	r4, r4, #3
 800f4fc:	42a0      	cmp	r0, r4
 800f4fe:	d005      	beq.n	800f50c <_malloc_r+0xa8>
 800f500:	1a21      	subs	r1, r4, r0
 800f502:	4630      	mov	r0, r6
 800f504:	f000 fad0 	bl	800faa8 <_sbrk_r>
 800f508:	3001      	adds	r0, #1
 800f50a:	d0cf      	beq.n	800f4ac <_malloc_r+0x48>
 800f50c:	6025      	str	r5, [r4, #0]
 800f50e:	e7db      	b.n	800f4c8 <_malloc_r+0x64>
 800f510:	200003a4 	.word	0x200003a4
 800f514:	200003a8 	.word	0x200003a8

0800f518 <__sfputc_r>:
 800f518:	6893      	ldr	r3, [r2, #8]
 800f51a:	3b01      	subs	r3, #1
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	b410      	push	{r4}
 800f520:	6093      	str	r3, [r2, #8]
 800f522:	da08      	bge.n	800f536 <__sfputc_r+0x1e>
 800f524:	6994      	ldr	r4, [r2, #24]
 800f526:	42a3      	cmp	r3, r4
 800f528:	db01      	blt.n	800f52e <__sfputc_r+0x16>
 800f52a:	290a      	cmp	r1, #10
 800f52c:	d103      	bne.n	800f536 <__sfputc_r+0x1e>
 800f52e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f532:	f000 bb0d 	b.w	800fb50 <__swbuf_r>
 800f536:	6813      	ldr	r3, [r2, #0]
 800f538:	1c58      	adds	r0, r3, #1
 800f53a:	6010      	str	r0, [r2, #0]
 800f53c:	7019      	strb	r1, [r3, #0]
 800f53e:	4608      	mov	r0, r1
 800f540:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f544:	4770      	bx	lr

0800f546 <__sfputs_r>:
 800f546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f548:	4606      	mov	r6, r0
 800f54a:	460f      	mov	r7, r1
 800f54c:	4614      	mov	r4, r2
 800f54e:	18d5      	adds	r5, r2, r3
 800f550:	42ac      	cmp	r4, r5
 800f552:	d101      	bne.n	800f558 <__sfputs_r+0x12>
 800f554:	2000      	movs	r0, #0
 800f556:	e007      	b.n	800f568 <__sfputs_r+0x22>
 800f558:	463a      	mov	r2, r7
 800f55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f55e:	4630      	mov	r0, r6
 800f560:	f7ff ffda 	bl	800f518 <__sfputc_r>
 800f564:	1c43      	adds	r3, r0, #1
 800f566:	d1f3      	bne.n	800f550 <__sfputs_r+0xa>
 800f568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f56c <_vfiprintf_r>:
 800f56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f570:	460c      	mov	r4, r1
 800f572:	b09d      	sub	sp, #116	; 0x74
 800f574:	4617      	mov	r7, r2
 800f576:	461d      	mov	r5, r3
 800f578:	4606      	mov	r6, r0
 800f57a:	b118      	cbz	r0, 800f584 <_vfiprintf_r+0x18>
 800f57c:	6983      	ldr	r3, [r0, #24]
 800f57e:	b90b      	cbnz	r3, 800f584 <_vfiprintf_r+0x18>
 800f580:	f7ff fe90 	bl	800f2a4 <__sinit>
 800f584:	4b7c      	ldr	r3, [pc, #496]	; (800f778 <_vfiprintf_r+0x20c>)
 800f586:	429c      	cmp	r4, r3
 800f588:	d158      	bne.n	800f63c <_vfiprintf_r+0xd0>
 800f58a:	6874      	ldr	r4, [r6, #4]
 800f58c:	89a3      	ldrh	r3, [r4, #12]
 800f58e:	0718      	lsls	r0, r3, #28
 800f590:	d55e      	bpl.n	800f650 <_vfiprintf_r+0xe4>
 800f592:	6923      	ldr	r3, [r4, #16]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d05b      	beq.n	800f650 <_vfiprintf_r+0xe4>
 800f598:	2300      	movs	r3, #0
 800f59a:	9309      	str	r3, [sp, #36]	; 0x24
 800f59c:	2320      	movs	r3, #32
 800f59e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5a2:	2330      	movs	r3, #48	; 0x30
 800f5a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5a8:	9503      	str	r5, [sp, #12]
 800f5aa:	f04f 0b01 	mov.w	fp, #1
 800f5ae:	46b8      	mov	r8, r7
 800f5b0:	4645      	mov	r5, r8
 800f5b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f5b6:	b10b      	cbz	r3, 800f5bc <_vfiprintf_r+0x50>
 800f5b8:	2b25      	cmp	r3, #37	; 0x25
 800f5ba:	d154      	bne.n	800f666 <_vfiprintf_r+0xfa>
 800f5bc:	ebb8 0a07 	subs.w	sl, r8, r7
 800f5c0:	d00b      	beq.n	800f5da <_vfiprintf_r+0x6e>
 800f5c2:	4653      	mov	r3, sl
 800f5c4:	463a      	mov	r2, r7
 800f5c6:	4621      	mov	r1, r4
 800f5c8:	4630      	mov	r0, r6
 800f5ca:	f7ff ffbc 	bl	800f546 <__sfputs_r>
 800f5ce:	3001      	adds	r0, #1
 800f5d0:	f000 80c2 	beq.w	800f758 <_vfiprintf_r+0x1ec>
 800f5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5d6:	4453      	add	r3, sl
 800f5d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f5da:	f898 3000 	ldrb.w	r3, [r8]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	f000 80ba 	beq.w	800f758 <_vfiprintf_r+0x1ec>
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5ee:	9304      	str	r3, [sp, #16]
 800f5f0:	9307      	str	r3, [sp, #28]
 800f5f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5f6:	931a      	str	r3, [sp, #104]	; 0x68
 800f5f8:	46a8      	mov	r8, r5
 800f5fa:	2205      	movs	r2, #5
 800f5fc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f600:	485e      	ldr	r0, [pc, #376]	; (800f77c <_vfiprintf_r+0x210>)
 800f602:	f7f0 fe0d 	bl	8000220 <memchr>
 800f606:	9b04      	ldr	r3, [sp, #16]
 800f608:	bb78      	cbnz	r0, 800f66a <_vfiprintf_r+0xfe>
 800f60a:	06d9      	lsls	r1, r3, #27
 800f60c:	bf44      	itt	mi
 800f60e:	2220      	movmi	r2, #32
 800f610:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f614:	071a      	lsls	r2, r3, #28
 800f616:	bf44      	itt	mi
 800f618:	222b      	movmi	r2, #43	; 0x2b
 800f61a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f61e:	782a      	ldrb	r2, [r5, #0]
 800f620:	2a2a      	cmp	r2, #42	; 0x2a
 800f622:	d02a      	beq.n	800f67a <_vfiprintf_r+0x10e>
 800f624:	9a07      	ldr	r2, [sp, #28]
 800f626:	46a8      	mov	r8, r5
 800f628:	2000      	movs	r0, #0
 800f62a:	250a      	movs	r5, #10
 800f62c:	4641      	mov	r1, r8
 800f62e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f632:	3b30      	subs	r3, #48	; 0x30
 800f634:	2b09      	cmp	r3, #9
 800f636:	d969      	bls.n	800f70c <_vfiprintf_r+0x1a0>
 800f638:	b360      	cbz	r0, 800f694 <_vfiprintf_r+0x128>
 800f63a:	e024      	b.n	800f686 <_vfiprintf_r+0x11a>
 800f63c:	4b50      	ldr	r3, [pc, #320]	; (800f780 <_vfiprintf_r+0x214>)
 800f63e:	429c      	cmp	r4, r3
 800f640:	d101      	bne.n	800f646 <_vfiprintf_r+0xda>
 800f642:	68b4      	ldr	r4, [r6, #8]
 800f644:	e7a2      	b.n	800f58c <_vfiprintf_r+0x20>
 800f646:	4b4f      	ldr	r3, [pc, #316]	; (800f784 <_vfiprintf_r+0x218>)
 800f648:	429c      	cmp	r4, r3
 800f64a:	bf08      	it	eq
 800f64c:	68f4      	ldreq	r4, [r6, #12]
 800f64e:	e79d      	b.n	800f58c <_vfiprintf_r+0x20>
 800f650:	4621      	mov	r1, r4
 800f652:	4630      	mov	r0, r6
 800f654:	f000 fae0 	bl	800fc18 <__swsetup_r>
 800f658:	2800      	cmp	r0, #0
 800f65a:	d09d      	beq.n	800f598 <_vfiprintf_r+0x2c>
 800f65c:	f04f 30ff 	mov.w	r0, #4294967295
 800f660:	b01d      	add	sp, #116	; 0x74
 800f662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f666:	46a8      	mov	r8, r5
 800f668:	e7a2      	b.n	800f5b0 <_vfiprintf_r+0x44>
 800f66a:	4a44      	ldr	r2, [pc, #272]	; (800f77c <_vfiprintf_r+0x210>)
 800f66c:	1a80      	subs	r0, r0, r2
 800f66e:	fa0b f000 	lsl.w	r0, fp, r0
 800f672:	4318      	orrs	r0, r3
 800f674:	9004      	str	r0, [sp, #16]
 800f676:	4645      	mov	r5, r8
 800f678:	e7be      	b.n	800f5f8 <_vfiprintf_r+0x8c>
 800f67a:	9a03      	ldr	r2, [sp, #12]
 800f67c:	1d11      	adds	r1, r2, #4
 800f67e:	6812      	ldr	r2, [r2, #0]
 800f680:	9103      	str	r1, [sp, #12]
 800f682:	2a00      	cmp	r2, #0
 800f684:	db01      	blt.n	800f68a <_vfiprintf_r+0x11e>
 800f686:	9207      	str	r2, [sp, #28]
 800f688:	e004      	b.n	800f694 <_vfiprintf_r+0x128>
 800f68a:	4252      	negs	r2, r2
 800f68c:	f043 0302 	orr.w	r3, r3, #2
 800f690:	9207      	str	r2, [sp, #28]
 800f692:	9304      	str	r3, [sp, #16]
 800f694:	f898 3000 	ldrb.w	r3, [r8]
 800f698:	2b2e      	cmp	r3, #46	; 0x2e
 800f69a:	d10e      	bne.n	800f6ba <_vfiprintf_r+0x14e>
 800f69c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f6a0:	2b2a      	cmp	r3, #42	; 0x2a
 800f6a2:	d138      	bne.n	800f716 <_vfiprintf_r+0x1aa>
 800f6a4:	9b03      	ldr	r3, [sp, #12]
 800f6a6:	1d1a      	adds	r2, r3, #4
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	9203      	str	r2, [sp, #12]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	bfb8      	it	lt
 800f6b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6b4:	f108 0802 	add.w	r8, r8, #2
 800f6b8:	9305      	str	r3, [sp, #20]
 800f6ba:	4d33      	ldr	r5, [pc, #204]	; (800f788 <_vfiprintf_r+0x21c>)
 800f6bc:	f898 1000 	ldrb.w	r1, [r8]
 800f6c0:	2203      	movs	r2, #3
 800f6c2:	4628      	mov	r0, r5
 800f6c4:	f7f0 fdac 	bl	8000220 <memchr>
 800f6c8:	b140      	cbz	r0, 800f6dc <_vfiprintf_r+0x170>
 800f6ca:	2340      	movs	r3, #64	; 0x40
 800f6cc:	1b40      	subs	r0, r0, r5
 800f6ce:	fa03 f000 	lsl.w	r0, r3, r0
 800f6d2:	9b04      	ldr	r3, [sp, #16]
 800f6d4:	4303      	orrs	r3, r0
 800f6d6:	f108 0801 	add.w	r8, r8, #1
 800f6da:	9304      	str	r3, [sp, #16]
 800f6dc:	f898 1000 	ldrb.w	r1, [r8]
 800f6e0:	482a      	ldr	r0, [pc, #168]	; (800f78c <_vfiprintf_r+0x220>)
 800f6e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6e6:	2206      	movs	r2, #6
 800f6e8:	f108 0701 	add.w	r7, r8, #1
 800f6ec:	f7f0 fd98 	bl	8000220 <memchr>
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	d037      	beq.n	800f764 <_vfiprintf_r+0x1f8>
 800f6f4:	4b26      	ldr	r3, [pc, #152]	; (800f790 <_vfiprintf_r+0x224>)
 800f6f6:	bb1b      	cbnz	r3, 800f740 <_vfiprintf_r+0x1d4>
 800f6f8:	9b03      	ldr	r3, [sp, #12]
 800f6fa:	3307      	adds	r3, #7
 800f6fc:	f023 0307 	bic.w	r3, r3, #7
 800f700:	3308      	adds	r3, #8
 800f702:	9303      	str	r3, [sp, #12]
 800f704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f706:	444b      	add	r3, r9
 800f708:	9309      	str	r3, [sp, #36]	; 0x24
 800f70a:	e750      	b.n	800f5ae <_vfiprintf_r+0x42>
 800f70c:	fb05 3202 	mla	r2, r5, r2, r3
 800f710:	2001      	movs	r0, #1
 800f712:	4688      	mov	r8, r1
 800f714:	e78a      	b.n	800f62c <_vfiprintf_r+0xc0>
 800f716:	2300      	movs	r3, #0
 800f718:	f108 0801 	add.w	r8, r8, #1
 800f71c:	9305      	str	r3, [sp, #20]
 800f71e:	4619      	mov	r1, r3
 800f720:	250a      	movs	r5, #10
 800f722:	4640      	mov	r0, r8
 800f724:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f728:	3a30      	subs	r2, #48	; 0x30
 800f72a:	2a09      	cmp	r2, #9
 800f72c:	d903      	bls.n	800f736 <_vfiprintf_r+0x1ca>
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d0c3      	beq.n	800f6ba <_vfiprintf_r+0x14e>
 800f732:	9105      	str	r1, [sp, #20]
 800f734:	e7c1      	b.n	800f6ba <_vfiprintf_r+0x14e>
 800f736:	fb05 2101 	mla	r1, r5, r1, r2
 800f73a:	2301      	movs	r3, #1
 800f73c:	4680      	mov	r8, r0
 800f73e:	e7f0      	b.n	800f722 <_vfiprintf_r+0x1b6>
 800f740:	ab03      	add	r3, sp, #12
 800f742:	9300      	str	r3, [sp, #0]
 800f744:	4622      	mov	r2, r4
 800f746:	4b13      	ldr	r3, [pc, #76]	; (800f794 <_vfiprintf_r+0x228>)
 800f748:	a904      	add	r1, sp, #16
 800f74a:	4630      	mov	r0, r6
 800f74c:	f3af 8000 	nop.w
 800f750:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f754:	4681      	mov	r9, r0
 800f756:	d1d5      	bne.n	800f704 <_vfiprintf_r+0x198>
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	065b      	lsls	r3, r3, #25
 800f75c:	f53f af7e 	bmi.w	800f65c <_vfiprintf_r+0xf0>
 800f760:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f762:	e77d      	b.n	800f660 <_vfiprintf_r+0xf4>
 800f764:	ab03      	add	r3, sp, #12
 800f766:	9300      	str	r3, [sp, #0]
 800f768:	4622      	mov	r2, r4
 800f76a:	4b0a      	ldr	r3, [pc, #40]	; (800f794 <_vfiprintf_r+0x228>)
 800f76c:	a904      	add	r1, sp, #16
 800f76e:	4630      	mov	r0, r6
 800f770:	f000 f888 	bl	800f884 <_printf_i>
 800f774:	e7ec      	b.n	800f750 <_vfiprintf_r+0x1e4>
 800f776:	bf00      	nop
 800f778:	08012ae4 	.word	0x08012ae4
 800f77c:	08012b24 	.word	0x08012b24
 800f780:	08012b04 	.word	0x08012b04
 800f784:	08012ac4 	.word	0x08012ac4
 800f788:	08012b2a 	.word	0x08012b2a
 800f78c:	08012b2e 	.word	0x08012b2e
 800f790:	00000000 	.word	0x00000000
 800f794:	0800f547 	.word	0x0800f547

0800f798 <_printf_common>:
 800f798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f79c:	4691      	mov	r9, r2
 800f79e:	461f      	mov	r7, r3
 800f7a0:	688a      	ldr	r2, [r1, #8]
 800f7a2:	690b      	ldr	r3, [r1, #16]
 800f7a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	bfb8      	it	lt
 800f7ac:	4613      	movlt	r3, r2
 800f7ae:	f8c9 3000 	str.w	r3, [r9]
 800f7b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f7b6:	4606      	mov	r6, r0
 800f7b8:	460c      	mov	r4, r1
 800f7ba:	b112      	cbz	r2, 800f7c2 <_printf_common+0x2a>
 800f7bc:	3301      	adds	r3, #1
 800f7be:	f8c9 3000 	str.w	r3, [r9]
 800f7c2:	6823      	ldr	r3, [r4, #0]
 800f7c4:	0699      	lsls	r1, r3, #26
 800f7c6:	bf42      	ittt	mi
 800f7c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f7cc:	3302      	addmi	r3, #2
 800f7ce:	f8c9 3000 	strmi.w	r3, [r9]
 800f7d2:	6825      	ldr	r5, [r4, #0]
 800f7d4:	f015 0506 	ands.w	r5, r5, #6
 800f7d8:	d107      	bne.n	800f7ea <_printf_common+0x52>
 800f7da:	f104 0a19 	add.w	sl, r4, #25
 800f7de:	68e3      	ldr	r3, [r4, #12]
 800f7e0:	f8d9 2000 	ldr.w	r2, [r9]
 800f7e4:	1a9b      	subs	r3, r3, r2
 800f7e6:	42ab      	cmp	r3, r5
 800f7e8:	dc28      	bgt.n	800f83c <_printf_common+0xa4>
 800f7ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f7ee:	6822      	ldr	r2, [r4, #0]
 800f7f0:	3300      	adds	r3, #0
 800f7f2:	bf18      	it	ne
 800f7f4:	2301      	movne	r3, #1
 800f7f6:	0692      	lsls	r2, r2, #26
 800f7f8:	d42d      	bmi.n	800f856 <_printf_common+0xbe>
 800f7fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f7fe:	4639      	mov	r1, r7
 800f800:	4630      	mov	r0, r6
 800f802:	47c0      	blx	r8
 800f804:	3001      	adds	r0, #1
 800f806:	d020      	beq.n	800f84a <_printf_common+0xb2>
 800f808:	6823      	ldr	r3, [r4, #0]
 800f80a:	68e5      	ldr	r5, [r4, #12]
 800f80c:	f8d9 2000 	ldr.w	r2, [r9]
 800f810:	f003 0306 	and.w	r3, r3, #6
 800f814:	2b04      	cmp	r3, #4
 800f816:	bf08      	it	eq
 800f818:	1aad      	subeq	r5, r5, r2
 800f81a:	68a3      	ldr	r3, [r4, #8]
 800f81c:	6922      	ldr	r2, [r4, #16]
 800f81e:	bf0c      	ite	eq
 800f820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f824:	2500      	movne	r5, #0
 800f826:	4293      	cmp	r3, r2
 800f828:	bfc4      	itt	gt
 800f82a:	1a9b      	subgt	r3, r3, r2
 800f82c:	18ed      	addgt	r5, r5, r3
 800f82e:	f04f 0900 	mov.w	r9, #0
 800f832:	341a      	adds	r4, #26
 800f834:	454d      	cmp	r5, r9
 800f836:	d11a      	bne.n	800f86e <_printf_common+0xd6>
 800f838:	2000      	movs	r0, #0
 800f83a:	e008      	b.n	800f84e <_printf_common+0xb6>
 800f83c:	2301      	movs	r3, #1
 800f83e:	4652      	mov	r2, sl
 800f840:	4639      	mov	r1, r7
 800f842:	4630      	mov	r0, r6
 800f844:	47c0      	blx	r8
 800f846:	3001      	adds	r0, #1
 800f848:	d103      	bne.n	800f852 <_printf_common+0xba>
 800f84a:	f04f 30ff 	mov.w	r0, #4294967295
 800f84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f852:	3501      	adds	r5, #1
 800f854:	e7c3      	b.n	800f7de <_printf_common+0x46>
 800f856:	18e1      	adds	r1, r4, r3
 800f858:	1c5a      	adds	r2, r3, #1
 800f85a:	2030      	movs	r0, #48	; 0x30
 800f85c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f860:	4422      	add	r2, r4
 800f862:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f866:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f86a:	3302      	adds	r3, #2
 800f86c:	e7c5      	b.n	800f7fa <_printf_common+0x62>
 800f86e:	2301      	movs	r3, #1
 800f870:	4622      	mov	r2, r4
 800f872:	4639      	mov	r1, r7
 800f874:	4630      	mov	r0, r6
 800f876:	47c0      	blx	r8
 800f878:	3001      	adds	r0, #1
 800f87a:	d0e6      	beq.n	800f84a <_printf_common+0xb2>
 800f87c:	f109 0901 	add.w	r9, r9, #1
 800f880:	e7d8      	b.n	800f834 <_printf_common+0x9c>
	...

0800f884 <_printf_i>:
 800f884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f888:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f88c:	460c      	mov	r4, r1
 800f88e:	7e09      	ldrb	r1, [r1, #24]
 800f890:	b085      	sub	sp, #20
 800f892:	296e      	cmp	r1, #110	; 0x6e
 800f894:	4617      	mov	r7, r2
 800f896:	4606      	mov	r6, r0
 800f898:	4698      	mov	r8, r3
 800f89a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f89c:	f000 80b3 	beq.w	800fa06 <_printf_i+0x182>
 800f8a0:	d822      	bhi.n	800f8e8 <_printf_i+0x64>
 800f8a2:	2963      	cmp	r1, #99	; 0x63
 800f8a4:	d036      	beq.n	800f914 <_printf_i+0x90>
 800f8a6:	d80a      	bhi.n	800f8be <_printf_i+0x3a>
 800f8a8:	2900      	cmp	r1, #0
 800f8aa:	f000 80b9 	beq.w	800fa20 <_printf_i+0x19c>
 800f8ae:	2958      	cmp	r1, #88	; 0x58
 800f8b0:	f000 8083 	beq.w	800f9ba <_printf_i+0x136>
 800f8b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f8b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f8bc:	e032      	b.n	800f924 <_printf_i+0xa0>
 800f8be:	2964      	cmp	r1, #100	; 0x64
 800f8c0:	d001      	beq.n	800f8c6 <_printf_i+0x42>
 800f8c2:	2969      	cmp	r1, #105	; 0x69
 800f8c4:	d1f6      	bne.n	800f8b4 <_printf_i+0x30>
 800f8c6:	6820      	ldr	r0, [r4, #0]
 800f8c8:	6813      	ldr	r3, [r2, #0]
 800f8ca:	0605      	lsls	r5, r0, #24
 800f8cc:	f103 0104 	add.w	r1, r3, #4
 800f8d0:	d52a      	bpl.n	800f928 <_printf_i+0xa4>
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	6011      	str	r1, [r2, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	da03      	bge.n	800f8e2 <_printf_i+0x5e>
 800f8da:	222d      	movs	r2, #45	; 0x2d
 800f8dc:	425b      	negs	r3, r3
 800f8de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f8e2:	486f      	ldr	r0, [pc, #444]	; (800faa0 <_printf_i+0x21c>)
 800f8e4:	220a      	movs	r2, #10
 800f8e6:	e039      	b.n	800f95c <_printf_i+0xd8>
 800f8e8:	2973      	cmp	r1, #115	; 0x73
 800f8ea:	f000 809d 	beq.w	800fa28 <_printf_i+0x1a4>
 800f8ee:	d808      	bhi.n	800f902 <_printf_i+0x7e>
 800f8f0:	296f      	cmp	r1, #111	; 0x6f
 800f8f2:	d020      	beq.n	800f936 <_printf_i+0xb2>
 800f8f4:	2970      	cmp	r1, #112	; 0x70
 800f8f6:	d1dd      	bne.n	800f8b4 <_printf_i+0x30>
 800f8f8:	6823      	ldr	r3, [r4, #0]
 800f8fa:	f043 0320 	orr.w	r3, r3, #32
 800f8fe:	6023      	str	r3, [r4, #0]
 800f900:	e003      	b.n	800f90a <_printf_i+0x86>
 800f902:	2975      	cmp	r1, #117	; 0x75
 800f904:	d017      	beq.n	800f936 <_printf_i+0xb2>
 800f906:	2978      	cmp	r1, #120	; 0x78
 800f908:	d1d4      	bne.n	800f8b4 <_printf_i+0x30>
 800f90a:	2378      	movs	r3, #120	; 0x78
 800f90c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f910:	4864      	ldr	r0, [pc, #400]	; (800faa4 <_printf_i+0x220>)
 800f912:	e055      	b.n	800f9c0 <_printf_i+0x13c>
 800f914:	6813      	ldr	r3, [r2, #0]
 800f916:	1d19      	adds	r1, r3, #4
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	6011      	str	r1, [r2, #0]
 800f91c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f924:	2301      	movs	r3, #1
 800f926:	e08c      	b.n	800fa42 <_printf_i+0x1be>
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	6011      	str	r1, [r2, #0]
 800f92c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f930:	bf18      	it	ne
 800f932:	b21b      	sxthne	r3, r3
 800f934:	e7cf      	b.n	800f8d6 <_printf_i+0x52>
 800f936:	6813      	ldr	r3, [r2, #0]
 800f938:	6825      	ldr	r5, [r4, #0]
 800f93a:	1d18      	adds	r0, r3, #4
 800f93c:	6010      	str	r0, [r2, #0]
 800f93e:	0628      	lsls	r0, r5, #24
 800f940:	d501      	bpl.n	800f946 <_printf_i+0xc2>
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	e002      	b.n	800f94c <_printf_i+0xc8>
 800f946:	0668      	lsls	r0, r5, #25
 800f948:	d5fb      	bpl.n	800f942 <_printf_i+0xbe>
 800f94a:	881b      	ldrh	r3, [r3, #0]
 800f94c:	4854      	ldr	r0, [pc, #336]	; (800faa0 <_printf_i+0x21c>)
 800f94e:	296f      	cmp	r1, #111	; 0x6f
 800f950:	bf14      	ite	ne
 800f952:	220a      	movne	r2, #10
 800f954:	2208      	moveq	r2, #8
 800f956:	2100      	movs	r1, #0
 800f958:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f95c:	6865      	ldr	r5, [r4, #4]
 800f95e:	60a5      	str	r5, [r4, #8]
 800f960:	2d00      	cmp	r5, #0
 800f962:	f2c0 8095 	blt.w	800fa90 <_printf_i+0x20c>
 800f966:	6821      	ldr	r1, [r4, #0]
 800f968:	f021 0104 	bic.w	r1, r1, #4
 800f96c:	6021      	str	r1, [r4, #0]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d13d      	bne.n	800f9ee <_printf_i+0x16a>
 800f972:	2d00      	cmp	r5, #0
 800f974:	f040 808e 	bne.w	800fa94 <_printf_i+0x210>
 800f978:	4665      	mov	r5, ip
 800f97a:	2a08      	cmp	r2, #8
 800f97c:	d10b      	bne.n	800f996 <_printf_i+0x112>
 800f97e:	6823      	ldr	r3, [r4, #0]
 800f980:	07db      	lsls	r3, r3, #31
 800f982:	d508      	bpl.n	800f996 <_printf_i+0x112>
 800f984:	6923      	ldr	r3, [r4, #16]
 800f986:	6862      	ldr	r2, [r4, #4]
 800f988:	429a      	cmp	r2, r3
 800f98a:	bfde      	ittt	le
 800f98c:	2330      	movle	r3, #48	; 0x30
 800f98e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f992:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f996:	ebac 0305 	sub.w	r3, ip, r5
 800f99a:	6123      	str	r3, [r4, #16]
 800f99c:	f8cd 8000 	str.w	r8, [sp]
 800f9a0:	463b      	mov	r3, r7
 800f9a2:	aa03      	add	r2, sp, #12
 800f9a4:	4621      	mov	r1, r4
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	f7ff fef6 	bl	800f798 <_printf_common>
 800f9ac:	3001      	adds	r0, #1
 800f9ae:	d14d      	bne.n	800fa4c <_printf_i+0x1c8>
 800f9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b4:	b005      	add	sp, #20
 800f9b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9ba:	4839      	ldr	r0, [pc, #228]	; (800faa0 <_printf_i+0x21c>)
 800f9bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f9c0:	6813      	ldr	r3, [r2, #0]
 800f9c2:	6821      	ldr	r1, [r4, #0]
 800f9c4:	1d1d      	adds	r5, r3, #4
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	6015      	str	r5, [r2, #0]
 800f9ca:	060a      	lsls	r2, r1, #24
 800f9cc:	d50b      	bpl.n	800f9e6 <_printf_i+0x162>
 800f9ce:	07ca      	lsls	r2, r1, #31
 800f9d0:	bf44      	itt	mi
 800f9d2:	f041 0120 	orrmi.w	r1, r1, #32
 800f9d6:	6021      	strmi	r1, [r4, #0]
 800f9d8:	b91b      	cbnz	r3, 800f9e2 <_printf_i+0x15e>
 800f9da:	6822      	ldr	r2, [r4, #0]
 800f9dc:	f022 0220 	bic.w	r2, r2, #32
 800f9e0:	6022      	str	r2, [r4, #0]
 800f9e2:	2210      	movs	r2, #16
 800f9e4:	e7b7      	b.n	800f956 <_printf_i+0xd2>
 800f9e6:	064d      	lsls	r5, r1, #25
 800f9e8:	bf48      	it	mi
 800f9ea:	b29b      	uxthmi	r3, r3
 800f9ec:	e7ef      	b.n	800f9ce <_printf_i+0x14a>
 800f9ee:	4665      	mov	r5, ip
 800f9f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9f4:	fb02 3311 	mls	r3, r2, r1, r3
 800f9f8:	5cc3      	ldrb	r3, [r0, r3]
 800f9fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f9fe:	460b      	mov	r3, r1
 800fa00:	2900      	cmp	r1, #0
 800fa02:	d1f5      	bne.n	800f9f0 <_printf_i+0x16c>
 800fa04:	e7b9      	b.n	800f97a <_printf_i+0xf6>
 800fa06:	6813      	ldr	r3, [r2, #0]
 800fa08:	6825      	ldr	r5, [r4, #0]
 800fa0a:	6961      	ldr	r1, [r4, #20]
 800fa0c:	1d18      	adds	r0, r3, #4
 800fa0e:	6010      	str	r0, [r2, #0]
 800fa10:	0628      	lsls	r0, r5, #24
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	d501      	bpl.n	800fa1a <_printf_i+0x196>
 800fa16:	6019      	str	r1, [r3, #0]
 800fa18:	e002      	b.n	800fa20 <_printf_i+0x19c>
 800fa1a:	066a      	lsls	r2, r5, #25
 800fa1c:	d5fb      	bpl.n	800fa16 <_printf_i+0x192>
 800fa1e:	8019      	strh	r1, [r3, #0]
 800fa20:	2300      	movs	r3, #0
 800fa22:	6123      	str	r3, [r4, #16]
 800fa24:	4665      	mov	r5, ip
 800fa26:	e7b9      	b.n	800f99c <_printf_i+0x118>
 800fa28:	6813      	ldr	r3, [r2, #0]
 800fa2a:	1d19      	adds	r1, r3, #4
 800fa2c:	6011      	str	r1, [r2, #0]
 800fa2e:	681d      	ldr	r5, [r3, #0]
 800fa30:	6862      	ldr	r2, [r4, #4]
 800fa32:	2100      	movs	r1, #0
 800fa34:	4628      	mov	r0, r5
 800fa36:	f7f0 fbf3 	bl	8000220 <memchr>
 800fa3a:	b108      	cbz	r0, 800fa40 <_printf_i+0x1bc>
 800fa3c:	1b40      	subs	r0, r0, r5
 800fa3e:	6060      	str	r0, [r4, #4]
 800fa40:	6863      	ldr	r3, [r4, #4]
 800fa42:	6123      	str	r3, [r4, #16]
 800fa44:	2300      	movs	r3, #0
 800fa46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa4a:	e7a7      	b.n	800f99c <_printf_i+0x118>
 800fa4c:	6923      	ldr	r3, [r4, #16]
 800fa4e:	462a      	mov	r2, r5
 800fa50:	4639      	mov	r1, r7
 800fa52:	4630      	mov	r0, r6
 800fa54:	47c0      	blx	r8
 800fa56:	3001      	adds	r0, #1
 800fa58:	d0aa      	beq.n	800f9b0 <_printf_i+0x12c>
 800fa5a:	6823      	ldr	r3, [r4, #0]
 800fa5c:	079b      	lsls	r3, r3, #30
 800fa5e:	d413      	bmi.n	800fa88 <_printf_i+0x204>
 800fa60:	68e0      	ldr	r0, [r4, #12]
 800fa62:	9b03      	ldr	r3, [sp, #12]
 800fa64:	4298      	cmp	r0, r3
 800fa66:	bfb8      	it	lt
 800fa68:	4618      	movlt	r0, r3
 800fa6a:	e7a3      	b.n	800f9b4 <_printf_i+0x130>
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	464a      	mov	r2, r9
 800fa70:	4639      	mov	r1, r7
 800fa72:	4630      	mov	r0, r6
 800fa74:	47c0      	blx	r8
 800fa76:	3001      	adds	r0, #1
 800fa78:	d09a      	beq.n	800f9b0 <_printf_i+0x12c>
 800fa7a:	3501      	adds	r5, #1
 800fa7c:	68e3      	ldr	r3, [r4, #12]
 800fa7e:	9a03      	ldr	r2, [sp, #12]
 800fa80:	1a9b      	subs	r3, r3, r2
 800fa82:	42ab      	cmp	r3, r5
 800fa84:	dcf2      	bgt.n	800fa6c <_printf_i+0x1e8>
 800fa86:	e7eb      	b.n	800fa60 <_printf_i+0x1dc>
 800fa88:	2500      	movs	r5, #0
 800fa8a:	f104 0919 	add.w	r9, r4, #25
 800fa8e:	e7f5      	b.n	800fa7c <_printf_i+0x1f8>
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d1ac      	bne.n	800f9ee <_printf_i+0x16a>
 800fa94:	7803      	ldrb	r3, [r0, #0]
 800fa96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa9e:	e76c      	b.n	800f97a <_printf_i+0xf6>
 800faa0:	08012b35 	.word	0x08012b35
 800faa4:	08012b46 	.word	0x08012b46

0800faa8 <_sbrk_r>:
 800faa8:	b538      	push	{r3, r4, r5, lr}
 800faaa:	4c06      	ldr	r4, [pc, #24]	; (800fac4 <_sbrk_r+0x1c>)
 800faac:	2300      	movs	r3, #0
 800faae:	4605      	mov	r5, r0
 800fab0:	4608      	mov	r0, r1
 800fab2:	6023      	str	r3, [r4, #0]
 800fab4:	f7f1 fa70 	bl	8000f98 <_sbrk>
 800fab8:	1c43      	adds	r3, r0, #1
 800faba:	d102      	bne.n	800fac2 <_sbrk_r+0x1a>
 800fabc:	6823      	ldr	r3, [r4, #0]
 800fabe:	b103      	cbz	r3, 800fac2 <_sbrk_r+0x1a>
 800fac0:	602b      	str	r3, [r5, #0]
 800fac2:	bd38      	pop	{r3, r4, r5, pc}
 800fac4:	20006ee0 	.word	0x20006ee0

0800fac8 <__sread>:
 800fac8:	b510      	push	{r4, lr}
 800faca:	460c      	mov	r4, r1
 800facc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fad0:	f000 fa48 	bl	800ff64 <_read_r>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	bfab      	itete	ge
 800fad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fada:	89a3      	ldrhlt	r3, [r4, #12]
 800fadc:	181b      	addge	r3, r3, r0
 800fade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fae2:	bfac      	ite	ge
 800fae4:	6563      	strge	r3, [r4, #84]	; 0x54
 800fae6:	81a3      	strhlt	r3, [r4, #12]
 800fae8:	bd10      	pop	{r4, pc}

0800faea <__swrite>:
 800faea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faee:	461f      	mov	r7, r3
 800faf0:	898b      	ldrh	r3, [r1, #12]
 800faf2:	05db      	lsls	r3, r3, #23
 800faf4:	4605      	mov	r5, r0
 800faf6:	460c      	mov	r4, r1
 800faf8:	4616      	mov	r6, r2
 800fafa:	d505      	bpl.n	800fb08 <__swrite+0x1e>
 800fafc:	2302      	movs	r3, #2
 800fafe:	2200      	movs	r2, #0
 800fb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb04:	f000 f9b6 	bl	800fe74 <_lseek_r>
 800fb08:	89a3      	ldrh	r3, [r4, #12]
 800fb0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb12:	81a3      	strh	r3, [r4, #12]
 800fb14:	4632      	mov	r2, r6
 800fb16:	463b      	mov	r3, r7
 800fb18:	4628      	mov	r0, r5
 800fb1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb1e:	f000 b869 	b.w	800fbf4 <_write_r>

0800fb22 <__sseek>:
 800fb22:	b510      	push	{r4, lr}
 800fb24:	460c      	mov	r4, r1
 800fb26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb2a:	f000 f9a3 	bl	800fe74 <_lseek_r>
 800fb2e:	1c43      	adds	r3, r0, #1
 800fb30:	89a3      	ldrh	r3, [r4, #12]
 800fb32:	bf15      	itete	ne
 800fb34:	6560      	strne	r0, [r4, #84]	; 0x54
 800fb36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fb3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fb3e:	81a3      	strheq	r3, [r4, #12]
 800fb40:	bf18      	it	ne
 800fb42:	81a3      	strhne	r3, [r4, #12]
 800fb44:	bd10      	pop	{r4, pc}

0800fb46 <__sclose>:
 800fb46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb4a:	f000 b8d3 	b.w	800fcf4 <_close_r>
	...

0800fb50 <__swbuf_r>:
 800fb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb52:	460e      	mov	r6, r1
 800fb54:	4614      	mov	r4, r2
 800fb56:	4605      	mov	r5, r0
 800fb58:	b118      	cbz	r0, 800fb62 <__swbuf_r+0x12>
 800fb5a:	6983      	ldr	r3, [r0, #24]
 800fb5c:	b90b      	cbnz	r3, 800fb62 <__swbuf_r+0x12>
 800fb5e:	f7ff fba1 	bl	800f2a4 <__sinit>
 800fb62:	4b21      	ldr	r3, [pc, #132]	; (800fbe8 <__swbuf_r+0x98>)
 800fb64:	429c      	cmp	r4, r3
 800fb66:	d12a      	bne.n	800fbbe <__swbuf_r+0x6e>
 800fb68:	686c      	ldr	r4, [r5, #4]
 800fb6a:	69a3      	ldr	r3, [r4, #24]
 800fb6c:	60a3      	str	r3, [r4, #8]
 800fb6e:	89a3      	ldrh	r3, [r4, #12]
 800fb70:	071a      	lsls	r2, r3, #28
 800fb72:	d52e      	bpl.n	800fbd2 <__swbuf_r+0x82>
 800fb74:	6923      	ldr	r3, [r4, #16]
 800fb76:	b363      	cbz	r3, 800fbd2 <__swbuf_r+0x82>
 800fb78:	6923      	ldr	r3, [r4, #16]
 800fb7a:	6820      	ldr	r0, [r4, #0]
 800fb7c:	1ac0      	subs	r0, r0, r3
 800fb7e:	6963      	ldr	r3, [r4, #20]
 800fb80:	b2f6      	uxtb	r6, r6
 800fb82:	4283      	cmp	r3, r0
 800fb84:	4637      	mov	r7, r6
 800fb86:	dc04      	bgt.n	800fb92 <__swbuf_r+0x42>
 800fb88:	4621      	mov	r1, r4
 800fb8a:	4628      	mov	r0, r5
 800fb8c:	f000 f948 	bl	800fe20 <_fflush_r>
 800fb90:	bb28      	cbnz	r0, 800fbde <__swbuf_r+0x8e>
 800fb92:	68a3      	ldr	r3, [r4, #8]
 800fb94:	3b01      	subs	r3, #1
 800fb96:	60a3      	str	r3, [r4, #8]
 800fb98:	6823      	ldr	r3, [r4, #0]
 800fb9a:	1c5a      	adds	r2, r3, #1
 800fb9c:	6022      	str	r2, [r4, #0]
 800fb9e:	701e      	strb	r6, [r3, #0]
 800fba0:	6963      	ldr	r3, [r4, #20]
 800fba2:	3001      	adds	r0, #1
 800fba4:	4283      	cmp	r3, r0
 800fba6:	d004      	beq.n	800fbb2 <__swbuf_r+0x62>
 800fba8:	89a3      	ldrh	r3, [r4, #12]
 800fbaa:	07db      	lsls	r3, r3, #31
 800fbac:	d519      	bpl.n	800fbe2 <__swbuf_r+0x92>
 800fbae:	2e0a      	cmp	r6, #10
 800fbb0:	d117      	bne.n	800fbe2 <__swbuf_r+0x92>
 800fbb2:	4621      	mov	r1, r4
 800fbb4:	4628      	mov	r0, r5
 800fbb6:	f000 f933 	bl	800fe20 <_fflush_r>
 800fbba:	b190      	cbz	r0, 800fbe2 <__swbuf_r+0x92>
 800fbbc:	e00f      	b.n	800fbde <__swbuf_r+0x8e>
 800fbbe:	4b0b      	ldr	r3, [pc, #44]	; (800fbec <__swbuf_r+0x9c>)
 800fbc0:	429c      	cmp	r4, r3
 800fbc2:	d101      	bne.n	800fbc8 <__swbuf_r+0x78>
 800fbc4:	68ac      	ldr	r4, [r5, #8]
 800fbc6:	e7d0      	b.n	800fb6a <__swbuf_r+0x1a>
 800fbc8:	4b09      	ldr	r3, [pc, #36]	; (800fbf0 <__swbuf_r+0xa0>)
 800fbca:	429c      	cmp	r4, r3
 800fbcc:	bf08      	it	eq
 800fbce:	68ec      	ldreq	r4, [r5, #12]
 800fbd0:	e7cb      	b.n	800fb6a <__swbuf_r+0x1a>
 800fbd2:	4621      	mov	r1, r4
 800fbd4:	4628      	mov	r0, r5
 800fbd6:	f000 f81f 	bl	800fc18 <__swsetup_r>
 800fbda:	2800      	cmp	r0, #0
 800fbdc:	d0cc      	beq.n	800fb78 <__swbuf_r+0x28>
 800fbde:	f04f 37ff 	mov.w	r7, #4294967295
 800fbe2:	4638      	mov	r0, r7
 800fbe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbe6:	bf00      	nop
 800fbe8:	08012ae4 	.word	0x08012ae4
 800fbec:	08012b04 	.word	0x08012b04
 800fbf0:	08012ac4 	.word	0x08012ac4

0800fbf4 <_write_r>:
 800fbf4:	b538      	push	{r3, r4, r5, lr}
 800fbf6:	4c07      	ldr	r4, [pc, #28]	; (800fc14 <_write_r+0x20>)
 800fbf8:	4605      	mov	r5, r0
 800fbfa:	4608      	mov	r0, r1
 800fbfc:	4611      	mov	r1, r2
 800fbfe:	2200      	movs	r2, #0
 800fc00:	6022      	str	r2, [r4, #0]
 800fc02:	461a      	mov	r2, r3
 800fc04:	f7f1 f977 	bl	8000ef6 <_write>
 800fc08:	1c43      	adds	r3, r0, #1
 800fc0a:	d102      	bne.n	800fc12 <_write_r+0x1e>
 800fc0c:	6823      	ldr	r3, [r4, #0]
 800fc0e:	b103      	cbz	r3, 800fc12 <_write_r+0x1e>
 800fc10:	602b      	str	r3, [r5, #0]
 800fc12:	bd38      	pop	{r3, r4, r5, pc}
 800fc14:	20006ee0 	.word	0x20006ee0

0800fc18 <__swsetup_r>:
 800fc18:	4b32      	ldr	r3, [pc, #200]	; (800fce4 <__swsetup_r+0xcc>)
 800fc1a:	b570      	push	{r4, r5, r6, lr}
 800fc1c:	681d      	ldr	r5, [r3, #0]
 800fc1e:	4606      	mov	r6, r0
 800fc20:	460c      	mov	r4, r1
 800fc22:	b125      	cbz	r5, 800fc2e <__swsetup_r+0x16>
 800fc24:	69ab      	ldr	r3, [r5, #24]
 800fc26:	b913      	cbnz	r3, 800fc2e <__swsetup_r+0x16>
 800fc28:	4628      	mov	r0, r5
 800fc2a:	f7ff fb3b 	bl	800f2a4 <__sinit>
 800fc2e:	4b2e      	ldr	r3, [pc, #184]	; (800fce8 <__swsetup_r+0xd0>)
 800fc30:	429c      	cmp	r4, r3
 800fc32:	d10f      	bne.n	800fc54 <__swsetup_r+0x3c>
 800fc34:	686c      	ldr	r4, [r5, #4]
 800fc36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc3a:	b29a      	uxth	r2, r3
 800fc3c:	0715      	lsls	r5, r2, #28
 800fc3e:	d42c      	bmi.n	800fc9a <__swsetup_r+0x82>
 800fc40:	06d0      	lsls	r0, r2, #27
 800fc42:	d411      	bmi.n	800fc68 <__swsetup_r+0x50>
 800fc44:	2209      	movs	r2, #9
 800fc46:	6032      	str	r2, [r6, #0]
 800fc48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc4c:	81a3      	strh	r3, [r4, #12]
 800fc4e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc52:	e03e      	b.n	800fcd2 <__swsetup_r+0xba>
 800fc54:	4b25      	ldr	r3, [pc, #148]	; (800fcec <__swsetup_r+0xd4>)
 800fc56:	429c      	cmp	r4, r3
 800fc58:	d101      	bne.n	800fc5e <__swsetup_r+0x46>
 800fc5a:	68ac      	ldr	r4, [r5, #8]
 800fc5c:	e7eb      	b.n	800fc36 <__swsetup_r+0x1e>
 800fc5e:	4b24      	ldr	r3, [pc, #144]	; (800fcf0 <__swsetup_r+0xd8>)
 800fc60:	429c      	cmp	r4, r3
 800fc62:	bf08      	it	eq
 800fc64:	68ec      	ldreq	r4, [r5, #12]
 800fc66:	e7e6      	b.n	800fc36 <__swsetup_r+0x1e>
 800fc68:	0751      	lsls	r1, r2, #29
 800fc6a:	d512      	bpl.n	800fc92 <__swsetup_r+0x7a>
 800fc6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc6e:	b141      	cbz	r1, 800fc82 <__swsetup_r+0x6a>
 800fc70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc74:	4299      	cmp	r1, r3
 800fc76:	d002      	beq.n	800fc7e <__swsetup_r+0x66>
 800fc78:	4630      	mov	r0, r6
 800fc7a:	f7ff fba5 	bl	800f3c8 <_free_r>
 800fc7e:	2300      	movs	r3, #0
 800fc80:	6363      	str	r3, [r4, #52]	; 0x34
 800fc82:	89a3      	ldrh	r3, [r4, #12]
 800fc84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fc88:	81a3      	strh	r3, [r4, #12]
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	6063      	str	r3, [r4, #4]
 800fc8e:	6923      	ldr	r3, [r4, #16]
 800fc90:	6023      	str	r3, [r4, #0]
 800fc92:	89a3      	ldrh	r3, [r4, #12]
 800fc94:	f043 0308 	orr.w	r3, r3, #8
 800fc98:	81a3      	strh	r3, [r4, #12]
 800fc9a:	6923      	ldr	r3, [r4, #16]
 800fc9c:	b94b      	cbnz	r3, 800fcb2 <__swsetup_r+0x9a>
 800fc9e:	89a3      	ldrh	r3, [r4, #12]
 800fca0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fca8:	d003      	beq.n	800fcb2 <__swsetup_r+0x9a>
 800fcaa:	4621      	mov	r1, r4
 800fcac:	4630      	mov	r0, r6
 800fcae:	f000 f917 	bl	800fee0 <__smakebuf_r>
 800fcb2:	89a2      	ldrh	r2, [r4, #12]
 800fcb4:	f012 0301 	ands.w	r3, r2, #1
 800fcb8:	d00c      	beq.n	800fcd4 <__swsetup_r+0xbc>
 800fcba:	2300      	movs	r3, #0
 800fcbc:	60a3      	str	r3, [r4, #8]
 800fcbe:	6963      	ldr	r3, [r4, #20]
 800fcc0:	425b      	negs	r3, r3
 800fcc2:	61a3      	str	r3, [r4, #24]
 800fcc4:	6923      	ldr	r3, [r4, #16]
 800fcc6:	b953      	cbnz	r3, 800fcde <__swsetup_r+0xc6>
 800fcc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fccc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800fcd0:	d1ba      	bne.n	800fc48 <__swsetup_r+0x30>
 800fcd2:	bd70      	pop	{r4, r5, r6, pc}
 800fcd4:	0792      	lsls	r2, r2, #30
 800fcd6:	bf58      	it	pl
 800fcd8:	6963      	ldrpl	r3, [r4, #20]
 800fcda:	60a3      	str	r3, [r4, #8]
 800fcdc:	e7f2      	b.n	800fcc4 <__swsetup_r+0xac>
 800fcde:	2000      	movs	r0, #0
 800fce0:	e7f7      	b.n	800fcd2 <__swsetup_r+0xba>
 800fce2:	bf00      	nop
 800fce4:	2000007c 	.word	0x2000007c
 800fce8:	08012ae4 	.word	0x08012ae4
 800fcec:	08012b04 	.word	0x08012b04
 800fcf0:	08012ac4 	.word	0x08012ac4

0800fcf4 <_close_r>:
 800fcf4:	b538      	push	{r3, r4, r5, lr}
 800fcf6:	4c06      	ldr	r4, [pc, #24]	; (800fd10 <_close_r+0x1c>)
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	4605      	mov	r5, r0
 800fcfc:	4608      	mov	r0, r1
 800fcfe:	6023      	str	r3, [r4, #0]
 800fd00:	f7f1 f915 	bl	8000f2e <_close>
 800fd04:	1c43      	adds	r3, r0, #1
 800fd06:	d102      	bne.n	800fd0e <_close_r+0x1a>
 800fd08:	6823      	ldr	r3, [r4, #0]
 800fd0a:	b103      	cbz	r3, 800fd0e <_close_r+0x1a>
 800fd0c:	602b      	str	r3, [r5, #0]
 800fd0e:	bd38      	pop	{r3, r4, r5, pc}
 800fd10:	20006ee0 	.word	0x20006ee0

0800fd14 <__sflush_r>:
 800fd14:	898a      	ldrh	r2, [r1, #12]
 800fd16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd1a:	4605      	mov	r5, r0
 800fd1c:	0710      	lsls	r0, r2, #28
 800fd1e:	460c      	mov	r4, r1
 800fd20:	d458      	bmi.n	800fdd4 <__sflush_r+0xc0>
 800fd22:	684b      	ldr	r3, [r1, #4]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	dc05      	bgt.n	800fd34 <__sflush_r+0x20>
 800fd28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	dc02      	bgt.n	800fd34 <__sflush_r+0x20>
 800fd2e:	2000      	movs	r0, #0
 800fd30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd36:	2e00      	cmp	r6, #0
 800fd38:	d0f9      	beq.n	800fd2e <__sflush_r+0x1a>
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fd40:	682f      	ldr	r7, [r5, #0]
 800fd42:	6a21      	ldr	r1, [r4, #32]
 800fd44:	602b      	str	r3, [r5, #0]
 800fd46:	d032      	beq.n	800fdae <__sflush_r+0x9a>
 800fd48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd4a:	89a3      	ldrh	r3, [r4, #12]
 800fd4c:	075a      	lsls	r2, r3, #29
 800fd4e:	d505      	bpl.n	800fd5c <__sflush_r+0x48>
 800fd50:	6863      	ldr	r3, [r4, #4]
 800fd52:	1ac0      	subs	r0, r0, r3
 800fd54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd56:	b10b      	cbz	r3, 800fd5c <__sflush_r+0x48>
 800fd58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd5a:	1ac0      	subs	r0, r0, r3
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	4602      	mov	r2, r0
 800fd60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd62:	6a21      	ldr	r1, [r4, #32]
 800fd64:	4628      	mov	r0, r5
 800fd66:	47b0      	blx	r6
 800fd68:	1c43      	adds	r3, r0, #1
 800fd6a:	89a3      	ldrh	r3, [r4, #12]
 800fd6c:	d106      	bne.n	800fd7c <__sflush_r+0x68>
 800fd6e:	6829      	ldr	r1, [r5, #0]
 800fd70:	291d      	cmp	r1, #29
 800fd72:	d848      	bhi.n	800fe06 <__sflush_r+0xf2>
 800fd74:	4a29      	ldr	r2, [pc, #164]	; (800fe1c <__sflush_r+0x108>)
 800fd76:	40ca      	lsrs	r2, r1
 800fd78:	07d6      	lsls	r6, r2, #31
 800fd7a:	d544      	bpl.n	800fe06 <__sflush_r+0xf2>
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	6062      	str	r2, [r4, #4]
 800fd80:	04d9      	lsls	r1, r3, #19
 800fd82:	6922      	ldr	r2, [r4, #16]
 800fd84:	6022      	str	r2, [r4, #0]
 800fd86:	d504      	bpl.n	800fd92 <__sflush_r+0x7e>
 800fd88:	1c42      	adds	r2, r0, #1
 800fd8a:	d101      	bne.n	800fd90 <__sflush_r+0x7c>
 800fd8c:	682b      	ldr	r3, [r5, #0]
 800fd8e:	b903      	cbnz	r3, 800fd92 <__sflush_r+0x7e>
 800fd90:	6560      	str	r0, [r4, #84]	; 0x54
 800fd92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd94:	602f      	str	r7, [r5, #0]
 800fd96:	2900      	cmp	r1, #0
 800fd98:	d0c9      	beq.n	800fd2e <__sflush_r+0x1a>
 800fd9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd9e:	4299      	cmp	r1, r3
 800fda0:	d002      	beq.n	800fda8 <__sflush_r+0x94>
 800fda2:	4628      	mov	r0, r5
 800fda4:	f7ff fb10 	bl	800f3c8 <_free_r>
 800fda8:	2000      	movs	r0, #0
 800fdaa:	6360      	str	r0, [r4, #52]	; 0x34
 800fdac:	e7c0      	b.n	800fd30 <__sflush_r+0x1c>
 800fdae:	2301      	movs	r3, #1
 800fdb0:	4628      	mov	r0, r5
 800fdb2:	47b0      	blx	r6
 800fdb4:	1c41      	adds	r1, r0, #1
 800fdb6:	d1c8      	bne.n	800fd4a <__sflush_r+0x36>
 800fdb8:	682b      	ldr	r3, [r5, #0]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d0c5      	beq.n	800fd4a <__sflush_r+0x36>
 800fdbe:	2b1d      	cmp	r3, #29
 800fdc0:	d001      	beq.n	800fdc6 <__sflush_r+0xb2>
 800fdc2:	2b16      	cmp	r3, #22
 800fdc4:	d101      	bne.n	800fdca <__sflush_r+0xb6>
 800fdc6:	602f      	str	r7, [r5, #0]
 800fdc8:	e7b1      	b.n	800fd2e <__sflush_r+0x1a>
 800fdca:	89a3      	ldrh	r3, [r4, #12]
 800fdcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdd0:	81a3      	strh	r3, [r4, #12]
 800fdd2:	e7ad      	b.n	800fd30 <__sflush_r+0x1c>
 800fdd4:	690f      	ldr	r7, [r1, #16]
 800fdd6:	2f00      	cmp	r7, #0
 800fdd8:	d0a9      	beq.n	800fd2e <__sflush_r+0x1a>
 800fdda:	0793      	lsls	r3, r2, #30
 800fddc:	680e      	ldr	r6, [r1, #0]
 800fdde:	bf08      	it	eq
 800fde0:	694b      	ldreq	r3, [r1, #20]
 800fde2:	600f      	str	r7, [r1, #0]
 800fde4:	bf18      	it	ne
 800fde6:	2300      	movne	r3, #0
 800fde8:	eba6 0807 	sub.w	r8, r6, r7
 800fdec:	608b      	str	r3, [r1, #8]
 800fdee:	f1b8 0f00 	cmp.w	r8, #0
 800fdf2:	dd9c      	ble.n	800fd2e <__sflush_r+0x1a>
 800fdf4:	4643      	mov	r3, r8
 800fdf6:	463a      	mov	r2, r7
 800fdf8:	6a21      	ldr	r1, [r4, #32]
 800fdfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fdfc:	4628      	mov	r0, r5
 800fdfe:	47b0      	blx	r6
 800fe00:	2800      	cmp	r0, #0
 800fe02:	dc06      	bgt.n	800fe12 <__sflush_r+0xfe>
 800fe04:	89a3      	ldrh	r3, [r4, #12]
 800fe06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe0a:	81a3      	strh	r3, [r4, #12]
 800fe0c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe10:	e78e      	b.n	800fd30 <__sflush_r+0x1c>
 800fe12:	4407      	add	r7, r0
 800fe14:	eba8 0800 	sub.w	r8, r8, r0
 800fe18:	e7e9      	b.n	800fdee <__sflush_r+0xda>
 800fe1a:	bf00      	nop
 800fe1c:	20400001 	.word	0x20400001

0800fe20 <_fflush_r>:
 800fe20:	b538      	push	{r3, r4, r5, lr}
 800fe22:	690b      	ldr	r3, [r1, #16]
 800fe24:	4605      	mov	r5, r0
 800fe26:	460c      	mov	r4, r1
 800fe28:	b1db      	cbz	r3, 800fe62 <_fflush_r+0x42>
 800fe2a:	b118      	cbz	r0, 800fe34 <_fflush_r+0x14>
 800fe2c:	6983      	ldr	r3, [r0, #24]
 800fe2e:	b90b      	cbnz	r3, 800fe34 <_fflush_r+0x14>
 800fe30:	f7ff fa38 	bl	800f2a4 <__sinit>
 800fe34:	4b0c      	ldr	r3, [pc, #48]	; (800fe68 <_fflush_r+0x48>)
 800fe36:	429c      	cmp	r4, r3
 800fe38:	d109      	bne.n	800fe4e <_fflush_r+0x2e>
 800fe3a:	686c      	ldr	r4, [r5, #4]
 800fe3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe40:	b17b      	cbz	r3, 800fe62 <_fflush_r+0x42>
 800fe42:	4621      	mov	r1, r4
 800fe44:	4628      	mov	r0, r5
 800fe46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe4a:	f7ff bf63 	b.w	800fd14 <__sflush_r>
 800fe4e:	4b07      	ldr	r3, [pc, #28]	; (800fe6c <_fflush_r+0x4c>)
 800fe50:	429c      	cmp	r4, r3
 800fe52:	d101      	bne.n	800fe58 <_fflush_r+0x38>
 800fe54:	68ac      	ldr	r4, [r5, #8]
 800fe56:	e7f1      	b.n	800fe3c <_fflush_r+0x1c>
 800fe58:	4b05      	ldr	r3, [pc, #20]	; (800fe70 <_fflush_r+0x50>)
 800fe5a:	429c      	cmp	r4, r3
 800fe5c:	bf08      	it	eq
 800fe5e:	68ec      	ldreq	r4, [r5, #12]
 800fe60:	e7ec      	b.n	800fe3c <_fflush_r+0x1c>
 800fe62:	2000      	movs	r0, #0
 800fe64:	bd38      	pop	{r3, r4, r5, pc}
 800fe66:	bf00      	nop
 800fe68:	08012ae4 	.word	0x08012ae4
 800fe6c:	08012b04 	.word	0x08012b04
 800fe70:	08012ac4 	.word	0x08012ac4

0800fe74 <_lseek_r>:
 800fe74:	b538      	push	{r3, r4, r5, lr}
 800fe76:	4c07      	ldr	r4, [pc, #28]	; (800fe94 <_lseek_r+0x20>)
 800fe78:	4605      	mov	r5, r0
 800fe7a:	4608      	mov	r0, r1
 800fe7c:	4611      	mov	r1, r2
 800fe7e:	2200      	movs	r2, #0
 800fe80:	6022      	str	r2, [r4, #0]
 800fe82:	461a      	mov	r2, r3
 800fe84:	f7f1 f87a 	bl	8000f7c <_lseek>
 800fe88:	1c43      	adds	r3, r0, #1
 800fe8a:	d102      	bne.n	800fe92 <_lseek_r+0x1e>
 800fe8c:	6823      	ldr	r3, [r4, #0]
 800fe8e:	b103      	cbz	r3, 800fe92 <_lseek_r+0x1e>
 800fe90:	602b      	str	r3, [r5, #0]
 800fe92:	bd38      	pop	{r3, r4, r5, pc}
 800fe94:	20006ee0 	.word	0x20006ee0

0800fe98 <__swhatbuf_r>:
 800fe98:	b570      	push	{r4, r5, r6, lr}
 800fe9a:	460e      	mov	r6, r1
 800fe9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fea0:	2900      	cmp	r1, #0
 800fea2:	b096      	sub	sp, #88	; 0x58
 800fea4:	4614      	mov	r4, r2
 800fea6:	461d      	mov	r5, r3
 800fea8:	da07      	bge.n	800feba <__swhatbuf_r+0x22>
 800feaa:	2300      	movs	r3, #0
 800feac:	602b      	str	r3, [r5, #0]
 800feae:	89b3      	ldrh	r3, [r6, #12]
 800feb0:	061a      	lsls	r2, r3, #24
 800feb2:	d410      	bmi.n	800fed6 <__swhatbuf_r+0x3e>
 800feb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800feb8:	e00e      	b.n	800fed8 <__swhatbuf_r+0x40>
 800feba:	466a      	mov	r2, sp
 800febc:	f000 f864 	bl	800ff88 <_fstat_r>
 800fec0:	2800      	cmp	r0, #0
 800fec2:	dbf2      	blt.n	800feaa <__swhatbuf_r+0x12>
 800fec4:	9a01      	ldr	r2, [sp, #4]
 800fec6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800feca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fece:	425a      	negs	r2, r3
 800fed0:	415a      	adcs	r2, r3
 800fed2:	602a      	str	r2, [r5, #0]
 800fed4:	e7ee      	b.n	800feb4 <__swhatbuf_r+0x1c>
 800fed6:	2340      	movs	r3, #64	; 0x40
 800fed8:	2000      	movs	r0, #0
 800feda:	6023      	str	r3, [r4, #0]
 800fedc:	b016      	add	sp, #88	; 0x58
 800fede:	bd70      	pop	{r4, r5, r6, pc}

0800fee0 <__smakebuf_r>:
 800fee0:	898b      	ldrh	r3, [r1, #12]
 800fee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fee4:	079d      	lsls	r5, r3, #30
 800fee6:	4606      	mov	r6, r0
 800fee8:	460c      	mov	r4, r1
 800feea:	d507      	bpl.n	800fefc <__smakebuf_r+0x1c>
 800feec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fef0:	6023      	str	r3, [r4, #0]
 800fef2:	6123      	str	r3, [r4, #16]
 800fef4:	2301      	movs	r3, #1
 800fef6:	6163      	str	r3, [r4, #20]
 800fef8:	b002      	add	sp, #8
 800fefa:	bd70      	pop	{r4, r5, r6, pc}
 800fefc:	ab01      	add	r3, sp, #4
 800fefe:	466a      	mov	r2, sp
 800ff00:	f7ff ffca 	bl	800fe98 <__swhatbuf_r>
 800ff04:	9900      	ldr	r1, [sp, #0]
 800ff06:	4605      	mov	r5, r0
 800ff08:	4630      	mov	r0, r6
 800ff0a:	f7ff faab 	bl	800f464 <_malloc_r>
 800ff0e:	b948      	cbnz	r0, 800ff24 <__smakebuf_r+0x44>
 800ff10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff14:	059a      	lsls	r2, r3, #22
 800ff16:	d4ef      	bmi.n	800fef8 <__smakebuf_r+0x18>
 800ff18:	f023 0303 	bic.w	r3, r3, #3
 800ff1c:	f043 0302 	orr.w	r3, r3, #2
 800ff20:	81a3      	strh	r3, [r4, #12]
 800ff22:	e7e3      	b.n	800feec <__smakebuf_r+0xc>
 800ff24:	4b0d      	ldr	r3, [pc, #52]	; (800ff5c <__smakebuf_r+0x7c>)
 800ff26:	62b3      	str	r3, [r6, #40]	; 0x28
 800ff28:	89a3      	ldrh	r3, [r4, #12]
 800ff2a:	6020      	str	r0, [r4, #0]
 800ff2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff30:	81a3      	strh	r3, [r4, #12]
 800ff32:	9b00      	ldr	r3, [sp, #0]
 800ff34:	6163      	str	r3, [r4, #20]
 800ff36:	9b01      	ldr	r3, [sp, #4]
 800ff38:	6120      	str	r0, [r4, #16]
 800ff3a:	b15b      	cbz	r3, 800ff54 <__smakebuf_r+0x74>
 800ff3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff40:	4630      	mov	r0, r6
 800ff42:	f000 f833 	bl	800ffac <_isatty_r>
 800ff46:	b128      	cbz	r0, 800ff54 <__smakebuf_r+0x74>
 800ff48:	89a3      	ldrh	r3, [r4, #12]
 800ff4a:	f023 0303 	bic.w	r3, r3, #3
 800ff4e:	f043 0301 	orr.w	r3, r3, #1
 800ff52:	81a3      	strh	r3, [r4, #12]
 800ff54:	89a3      	ldrh	r3, [r4, #12]
 800ff56:	431d      	orrs	r5, r3
 800ff58:	81a5      	strh	r5, [r4, #12]
 800ff5a:	e7cd      	b.n	800fef8 <__smakebuf_r+0x18>
 800ff5c:	0800f26d 	.word	0x0800f26d

0800ff60 <__malloc_lock>:
 800ff60:	4770      	bx	lr

0800ff62 <__malloc_unlock>:
 800ff62:	4770      	bx	lr

0800ff64 <_read_r>:
 800ff64:	b538      	push	{r3, r4, r5, lr}
 800ff66:	4c07      	ldr	r4, [pc, #28]	; (800ff84 <_read_r+0x20>)
 800ff68:	4605      	mov	r5, r0
 800ff6a:	4608      	mov	r0, r1
 800ff6c:	4611      	mov	r1, r2
 800ff6e:	2200      	movs	r2, #0
 800ff70:	6022      	str	r2, [r4, #0]
 800ff72:	461a      	mov	r2, r3
 800ff74:	f7f0 ffa2 	bl	8000ebc <_read>
 800ff78:	1c43      	adds	r3, r0, #1
 800ff7a:	d102      	bne.n	800ff82 <_read_r+0x1e>
 800ff7c:	6823      	ldr	r3, [r4, #0]
 800ff7e:	b103      	cbz	r3, 800ff82 <_read_r+0x1e>
 800ff80:	602b      	str	r3, [r5, #0]
 800ff82:	bd38      	pop	{r3, r4, r5, pc}
 800ff84:	20006ee0 	.word	0x20006ee0

0800ff88 <_fstat_r>:
 800ff88:	b538      	push	{r3, r4, r5, lr}
 800ff8a:	4c07      	ldr	r4, [pc, #28]	; (800ffa8 <_fstat_r+0x20>)
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	4605      	mov	r5, r0
 800ff90:	4608      	mov	r0, r1
 800ff92:	4611      	mov	r1, r2
 800ff94:	6023      	str	r3, [r4, #0]
 800ff96:	f7f0 ffd6 	bl	8000f46 <_fstat>
 800ff9a:	1c43      	adds	r3, r0, #1
 800ff9c:	d102      	bne.n	800ffa4 <_fstat_r+0x1c>
 800ff9e:	6823      	ldr	r3, [r4, #0]
 800ffa0:	b103      	cbz	r3, 800ffa4 <_fstat_r+0x1c>
 800ffa2:	602b      	str	r3, [r5, #0]
 800ffa4:	bd38      	pop	{r3, r4, r5, pc}
 800ffa6:	bf00      	nop
 800ffa8:	20006ee0 	.word	0x20006ee0

0800ffac <_isatty_r>:
 800ffac:	b538      	push	{r3, r4, r5, lr}
 800ffae:	4c06      	ldr	r4, [pc, #24]	; (800ffc8 <_isatty_r+0x1c>)
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	4605      	mov	r5, r0
 800ffb4:	4608      	mov	r0, r1
 800ffb6:	6023      	str	r3, [r4, #0]
 800ffb8:	f7f0 ffd5 	bl	8000f66 <_isatty>
 800ffbc:	1c43      	adds	r3, r0, #1
 800ffbe:	d102      	bne.n	800ffc6 <_isatty_r+0x1a>
 800ffc0:	6823      	ldr	r3, [r4, #0]
 800ffc2:	b103      	cbz	r3, 800ffc6 <_isatty_r+0x1a>
 800ffc4:	602b      	str	r3, [r5, #0]
 800ffc6:	bd38      	pop	{r3, r4, r5, pc}
 800ffc8:	20006ee0 	.word	0x20006ee0

0800ffcc <_init>:
 800ffcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffce:	bf00      	nop
 800ffd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffd2:	bc08      	pop	{r3}
 800ffd4:	469e      	mov	lr, r3
 800ffd6:	4770      	bx	lr

0800ffd8 <_fini>:
 800ffd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffda:	bf00      	nop
 800ffdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffde:	bc08      	pop	{r3}
 800ffe0:	469e      	mov	lr, r3
 800ffe2:	4770      	bx	lr
